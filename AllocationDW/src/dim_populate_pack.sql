CREATE OR REPLACE PACKAGE DIM_POPULATE_PACK IS

  -- Author  : FZHANG
  -- Created : 7/14/2015 5:06:08 PM
  -- Purpose : maintain all dimensions

  --1.1 measures
  C_MEASUREMENTS_BLANK CONSTANT PLS_INTEGER := -20001;
  C_MEASUREMENTS_NEGATIVE  CONSTANT PLS_INTEGER := -20002;

  C_TARGETINVENTORY_BLANK CONSTANT PLS_INTEGER := -20003;
  C_TARGETINVENTORY_ZERO CONSTANT PLS_INTEGER := -20004;
  C_TOTAL_QTY_BLANK      CONSTANT PLS_INTEGER := -20005;
  C_TOTAL_QTY_NEGATIVE   CONSTANT PLS_INTEGER := -20006;
  C_TOTAL_RETAIL_BLANK   CONSTANT PLS_INTEGER := -20007;
  C_TOTAL_RETAIL_NEGATIVE CONSTANT PLS_INTEGER := -20008;
  C_TARGETINVENTORY_NEGATIVE CONSTANT PLS_INTEGER := -20009;
  C_SC_MIN_INVENTORY_BLANK CONSTANT PLS_INTEGER := -20010;
--C_SC_MIN_INVENTORY_ZERO CONSTANT PLS_INTEGER := -20011;
  C_SC_MIN_INVENTORY_NEGATIVE CONSTANT PLS_INTEGER := -20012;

  -- 1.2 store dim
  C_DOOR_NUM_BLANK    CONSTANT PLS_INTEGER := -20020;
  C_DOOR_NUM_NOTEXIST CONSTANT PLS_INTEGER := -20021;

  -- 1.3 date dim
  C_ALL_DATE_BLANK CONSTANT PLS_INTEGER := -20030;
  --C_TRANSACTION_DATE_BLANK       CONSTANT PLS_INTEGER := -20031;
  C_YEAR_BLANK  CONSTANT PLS_INTEGER := -20032;
  C_MONTH_BLANK CONSTANT PLS_INTEGER := -20033;
  --C_WEEK_BLANK                   CONSTANT PLS_INTEGER := -20034;
  C_DAY_BLANK                 CONSTANT PLS_INTEGER := -20035;
  C_TRANSACTION_DATE_NOTEXIST CONSTANT PLS_INTEGER := -20036;
  C_YEAR_NOTEXIST             CONSTANT PLS_INTEGER := -20037;
  C_MONTH_NOTEXIST            CONSTANT PLS_INTEGER := -20038;
  C_DAY_NOTEXIST              CONSTANT PLS_INTEGER := -20039;

  -- 1.4 style dim
  C_STYLE_NUMBER_BLANK        CONSTANT PLS_INTEGER := -20040;
  C_COLOR_CODE_BLANK          CONSTANT PLS_INTEGER := -20041;
  C_SIZE_CODE_BLANK           CONSTANT PLS_INTEGER := -20042;
  C_STYLE_NUMBER_NOTEXIST     CONSTANT PLS_INTEGER := -20043;
  C_COLOR_CODE_NOTEXIST       CONSTANT PLS_INTEGER := -20044;
  C_SIZE_CODE_NOTEXIST        CONSTANT PLS_INTEGER := -20045;
  C_YEAR_SEASON_NOTEXIST      CONSTANT PLS_INTEGER := -20046;
  C_VENDOR_REF_NUM_BLANK      CONSTANT PLS_INTEGER := -20047;
  C_VENDOR_REF_NUM_NOTEXIST   CONSTANT PLS_INTEGER := -20048;

  --1.5, sales style dim
  C_SALES_STYLE_BLANK         CONSTANT PLS_INTEGER := -20050;
  C_SALES_STYLE_NOTEXIST      CONSTANT PLS_INTEGER := -20051;

  --1.6,
  C_STORE_COUNTRY_BLANK        CONSTANT PLS_INTEGER := -20052;
  C_STORE_COUNTRY_NOTEXIST     CONSTANT PLS_INTEGER := -20053;
  C_STORE_STORETYPE_BLANK      CONSTANT PLS_INTEGER := -20054;
  C_STORE_STORETYPE_NOTEXIST   CONSTANT PLS_INTEGER := -20055;
  C_STORE_DC_NOTEXIST          CONSTANT PLS_INTEGER := -20056;
  C_STORE_ST_NOTEXIST          CONSTANT PLS_INTEGER := -20057;
  C_PO_BLANK                   CONSTANT PLS_INTEGER := -20058;
  C_STYLE_YEAR_BLANK           CONSTANT PLS_INTEGER := -20059;
  C_STYLE_SEASON_BLANK         CONSTANT PLS_INTEGER := -20060;
  C_STYLE_YEAR_SEASON_NOTEXIST CONSTANT PLS_INTEGER := -20061;
  C_GP_CODE_NOTEXIST           CONSTANT PLS_INTEGER := -20062;
  C_ASN_BLANK                  CONSTANT PLS_INTEGER := -20063;
  C_PO_NOTEXIST                CONSTANT PLS_INTEGER := -20064;
  C_ASN_NOTEXIST               CONSTANT PLS_INTEGER := -20065;
  C_RECEIVER_BLANK             CONSTANT PLS_INTEGER := -20066;
  C_STORE_DC_BLANK             CONSTANT PLS_INTEGER := -20067;
  C_CMM_TRANSFER_BLANK         CONSTANT PLS_INTEGER := -20068;
  C_PROMOTION_CODE_BLANK       CONSTANT PLS_INTEGER := -20069;
  C_PROMOTION_CODE_NOTEXIST    CONSTANT PLS_INTEGER := -20070;

  C_PROD_ATTR1_BLANK           CONSTANT PLS_INTEGER := -20071;
  C_PROD_ATTR1_NOTEXIST        CONSTANT PLS_INTEGER := -20072;
  C_PROD_ATTR2_BLANK           CONSTANT PLS_INTEGER := -20073;
  C_PROD_ATTR2_NOTEXIST        CONSTANT PLS_INTEGER := -20074;
  C_PROD_ATTR3_BLANK           CONSTANT PLS_INTEGER := -20075;
  C_PROD_ATTR3_NOTEXIST        CONSTANT PLS_INTEGER := -20076;
  C_PROD_ATTR4_BLANK           CONSTANT PLS_INTEGER := -20077;
  C_PROD_ATTR4_NOTEXIST        CONSTANT PLS_INTEGER := -20078;
  C_PROD_ATTR5_BLANK           CONSTANT PLS_INTEGER := -20079;
  C_PROD_ATTR5_NOTEXIST        CONSTANT PLS_INTEGER := -20080;

  C_LOC_ATTR1_BLANK            CONSTANT PLS_INTEGER := -20081;
  C_LOC_ATTR1_NOTEXIST         CONSTANT PLS_INTEGER := -20082;

  C_LOC_ATTR2_BLANK            CONSTANT PLS_INTEGER := -20083;
  C_LOC_ATTR2_NOTEXIST         CONSTANT PLS_INTEGER := -20084;

  C_LOC_ATTR3_BLANK            CONSTANT PLS_INTEGER := -20085;
  C_LOC_ATTR3_NOTEXIST         CONSTANT PLS_INTEGER := -20086;

  C_PROD_ATTRS_NOTEXIST        CONSTANT PLS_INTEGER := -20087;
  C_LOC_ATTRS_NOTEXIST         CONSTANT PLS_INTEGER := -20088;

  C_START_DATE_INCORRECT       CONSTANT PLS_INTEGER := -20089;
  C_RECEIVING_DATE_INCORRECT   CONSTANT PLS_INTEGER := -20090;

  C_START_DATE_TOO_LARGE       CONSTANT PLS_INTEGER := -20091;
  C_RECEIVING_DATE_TOO_LESS    CONSTANT PLS_INTEGER := -20092;

  C_START_DATE_BLANK           CONSTANT PLS_INTEGER := -20093;
  C_RECEIVING_DATE_BLANK       CONSTANT PLS_INTEGER := -20094;

  C_RECEIVING_DOOR_BLANK       CONSTANT PLS_INTEGER := -20095;
  C_RECEIVING_DOOR_NOTEXIST    CONSTANT PLS_INTEGER := -20096;

  C_SENDING_DOOR_BLANK         CONSTANT PLS_INTEGER := -20097;
  C_SENDING_DOOR_NOTEXIST      CONSTANT PLS_INTEGER := -20098;
  C_SENDING_DC_DOOR_BLANK      CONSTANT PLS_INTEGER := -20099;

  C_SENDING_RECEIVING_DOOR_SAME CONSTANT PLS_INTEGER := -20100;
  C_TOTAL_INDICATOR_BLANK       CONSTANT PLS_INTEGER := -20101;
  C_TOTAL_INDICATOR_NOTEXIST    CONSTANT PLS_INTEGER := -20102;
  C_LOC_ATTR_BLANK              CONSTANT PLS_INTEGER := -20103;
  C_COMBINED_LOC_NOTEXIST       CONSTANT PLS_INTEGER := -20104;

  C_END_DATE_INCORRECT          CONSTANT PLS_INTEGER := -20105;
  C_END_DATE_BLANK              CONSTANT PLS_INTEGER := -20106;

  C_PO_TRANS_NOTEXIST           CONSTANT PLS_INTEGER := -20107;
  C_PO_RELEASED_TRANS_EXIST     CONSTANT PLS_INTEGER := -20108;
  C_ASN_TRANS_NOTEXIST          CONSTANT PLS_INTEGER := -20109;
  C_ASN_RELEASED_TRANS_EXIST    CONSTANT PLS_INTEGER := -20110;
  C_REC_TRANS_NOTEXIST          CONSTANT PLS_INTEGER := -20111;
  C_REC_RELEASED_TRANS_EXIST    CONSTANT PLS_INTEGER := -20112;
--C_ASN_LINK_MULTIPLE_PO        CONSTANT PLS_INTEGER := -20113;
--C_REC_LINK_MULTIPLE_ASN       CONSTANT PLS_INTEGER := -20114;

  C_CANCEL_DATE_INCORRECT       CONSTANT PLS_INTEGER := -20115;
  C_IN_DC_DATE_INCORRECT        CONSTANT PLS_INTEGER := -20116;
  C_IN_DC_DATE_BLANK            CONSTANT PLS_INTEGER := -20117;
  C_INDC_DT_LARGER_CANCEL_DT    CONSTANT PLS_INTEGER := -20118;
  C_START_DT_LARGER_CANCEL_DT   CONSTANT PLS_INTEGER := -20119;
--C_START_DT_LARGER_INDC_DT     CONSTANT PLS_INTEGER := -20120;

  PROCEDURE ENABLE_ALL_CONS;
  PROCEDURE DISABLE_ALL_CONS;
  PROCEDURE RELY_ALL_CONS;

  PROCEDURE RESET_SEQUENCE(P_SEQUENCE USER_SEQUENCES.SEQUENCE_NAME%TYPE);

  FUNCTION GET_SEQ_NEXTVALUE(SEQ_NAME VARCHAR2) RETURN NUMBER;

  PROCEDURE POP_DIM_TIME;

  --P_IS_INITIAL:if true then all default 0 record should be populated first
  PROCEDURE POP_DIM_STYLE(P_IS_INITIAL BOOLEAN DEFAULT TRUE);

  PROCEDURE POP_DIM_STORE(P_IS_INITIAL BOOLEAN DEFAULT TRUE);

  PROCEDURE POP_DIM_YEARSEASON(P_IS_INITIAL BOOLEAN DEFAULT TRUE);

--PROCEDURE POP_DIM_SALES_STYLE(P_IS_INITIAL BOOLEAN DEFAULT TRUE);
  PROCEDURE POP_DIM_PROMOTION(P_IS_INITIAL BOOLEAN DEFAULT TRUE);

  PROCEDURE POP_DIM_PROD_ATTR_VALUE(P_IS_INITIAL        BOOLEAN DEFAULT TRUE,
                                    P_VIEW_COL_COMMENTS VARCHAR2,
                                    P_SOURCE_BUSKEY_HASH_STR VARCHAR2,
                                    P_TARGET_BUSKEY_HASH_STR VARCHAR2,
                                    P_DELIMITER         VARCHAR2 DEFAULT ',',
                                    P_PROD_ATTR_ID      OUT DIM_PROD_ATTR.PROD_ATTR_ID%TYPE);

  PROCEDURE POP_DIM_YEARSEASON_ATTR_VALUE(P_IS_INITIAL        BOOLEAN DEFAULT TRUE,
                                          P_VIEW_COL_COMMENTS VARCHAR2,
                                          P_SOURCE_BUSKEY_HASH_STR VARCHAR2,
                                          P_TARGET_BUSKEY_HASH_STR VARCHAR2,
                                          P_DELIMITER         VARCHAR2 DEFAULT ',',
                                          P_YEARSEASON_ATTR_ID OUT DIM_YEARSEASON_ATTR.YEARSEASON_ATTR_ID%TYPE);

  PROCEDURE POP_DIM_LOC_ATTR_VALUE(P_IS_INITIAL        BOOLEAN DEFAULT TRUE,
                                   P_VIEW_COL_COMMENTS VARCHAR2,
                                   P_SOURCE_BUSKEY_HASH_STR VARCHAR2,
                                   P_TARGET_BUSKEY_HASH_STR VARCHAR2,
                                   P_DELIMITER         VARCHAR2 DEFAULT ',',
                                   P_LOC_ATTR_ID       OUT DIM_LOC_ATTR.LOC_ATTR_ID%TYPE);

  PROCEDURE POP_DIM_ERROR(P_IS_INITIAL BOOLEAN DEFAULT TRUE);

  PROCEDURE POP_DIM_COMMON(P_IS_INITIAL BOOLEAN DEFAULT TRUE);

  --PLEASE NOTE, DIM_CRITERIA_GROUP SHOULD BE POPULATED BEFORE DIM_TRANSFER
  PROCEDURE POP_DIM_CRITERIA_GROUP(P_IS_INITIAL BOOLEAN DEFAULT TRUE);

  --POPULATE TRANSFER FULR DIM_RULE AND THE ASSOCIATED TABLES
  PROCEDURE POP_DIM_RULE(P_IS_INITIAL BOOLEAN DEFAULT TRUE);

  PROCEDURE POP_DIM_CLUSTER_SEQUENCE(P_IS_INITIAL BOOLEAN DEFAULT TRUE);

  PROCEDURE POP_DIM_TRANSFER;

  PROCEDURE POP_DIM_AUDIT;

  PROCEDURE POP_DIM_ALLOCATION_REFERENCE;

  PROCEDURE POP_DIM_TRANSFER_MATRIX;

  PROCEDURE POP_DIM_BOXSTYLE;

  PROCEDURE POP_DIM_ALLOCATE;

  PROCEDURE POP_DIM_CORE_SIZE;

  PROCEDURE POP_DIM_MIN_MAX;

  PROCEDURE POP_DIM_PROMOTION_SCOPE;

  PROCEDURE POP_DIM_CRITERIA_GROUP_REL(P_CRITERIA_GROUP_ID DIM_CRITERIA_GROUP.CRITERIA_GROUP_ID%TYPE);

  PROCEDURE GATHER_TAB_STATS(P_TABLE_NAME USER_TABLES.TABLE_NAME%TYPE);

  PROCEDURE POP_FACT_STYLE_BUYER_DETAIL(P_IS_INITIAL BOOLEAN DEFAULT TRUE);

END DIM_POPULATE_PACK;
/
CREATE OR REPLACE PACKAGE BODY DIM_POPULATE_PACK IS

  C_MODIFY_CONS_TO_RELY    CONSTANT VARCHAR2(30) := ' RELY ENABLE NOVALIDATE ';
  C_MODIFY_CONS_TO_DISABLE CONSTANT VARCHAR2(30) := ' DISABLE NOVALIDATE ';
  C_MODIFY_CONS_TO_ENABLE  CONSTANT VARCHAR2(30) := ' ENABLE VALIDATE ';
  C_DELIMITER              CONSTANT CHAR := '-';
  C_DUMMY                  CONSTANT VARCHAR2(10) := 'DUMMY';

  C_STYLE_DIM              CONSTANT VARCHAR2(10) := 'STYLE';
  C_STORE_DIM              CONSTANT VARCHAR2(10) := 'STORE';
  C_YEARSEASON_DIM         CONSTANT VARCHAR2(20) := 'YEAR_SEASON';

  C_STYLE_PRIMARY_SIZE_HIER         CONSTANT VARCHAR2(20) := 'PRIMARY_SIZE';
  C_STORE_PRIMARY_DETAIL_HIER       CONSTANT VARCHAR2(20) := 'PRIMARY_DETAIL';
  C_YEARSEASON_PRIMARY_SIZE_HIER    CONSTANT VARCHAR2(20) := 'PRIMARY';

  PROCEDURE RELY_ALL_CONS IS
    L_SQL VARCHAR2(500);
  BEGIN

    FOR ITEM IN (SELECT C.TABLE_NAME, C.CONSTRAINT_NAME
                   FROM USER_CONSTRAINTS C
                  INNER JOIN USER_TABLES T
                     ON C.TABLE_NAME = T.TABLE_NAME
                  WHERE C.CONSTRAINT_TYPE IN ('P', 'U')
                    AND T.IOT_TYPE IS NULL) LOOP
      L_SQL := 'ALTER TABLE ' || ITEM.TABLE_NAME || ' MODIFY CONSTRAINT ' ||
               ITEM.CONSTRAINT_NAME || C_MODIFY_CONS_TO_RELY;
      --      DBMS_OUTPUT.PUT_LINE(L_SQL);
      EXECUTE IMMEDIATE L_SQL;
    END LOOP;

    FOR ITEM IN (SELECT TABLE_NAME, CONSTRAINT_NAME
                   FROM USER_CONSTRAINTS
                  WHERE CONSTRAINT_TYPE = 'R') LOOP
      L_SQL := 'ALTER TABLE ' || ITEM.TABLE_NAME || ' MODIFY CONSTRAINT ' ||
               ITEM.CONSTRAINT_NAME || C_MODIFY_CONS_TO_RELY;
      --      DBMS_OUTPUT.PUT_LINE(L_SQL);
      EXECUTE IMMEDIATE L_SQL;
    END LOOP;

  END RELY_ALL_CONS;

  PROCEDURE ENABLE_ALL_CONS IS
    L_SQL VARCHAR2(500);
  BEGIN

    FOR ITEM IN (SELECT C.TABLE_NAME, C.CONSTRAINT_NAME
                   FROM USER_CONSTRAINTS C
                  INNER JOIN USER_TABLES T
                     ON C.TABLE_NAME = T.TABLE_NAME
                  WHERE C.CONSTRAINT_TYPE IN ('P', 'U')
                    AND T.IOT_TYPE IS NULL) LOOP
      L_SQL := 'ALTER TABLE ' || ITEM.TABLE_NAME || ' MODIFY CONSTRAINT ' ||
               ITEM.CONSTRAINT_NAME || C_MODIFY_CONS_TO_ENABLE;
      --      DBMS_OUTPUT.PUT_LINE(L_SQL);
      EXECUTE IMMEDIATE L_SQL;
    END LOOP;

    FOR ITEM IN (SELECT TABLE_NAME, CONSTRAINT_NAME
                   FROM USER_CONSTRAINTS
                  WHERE CONSTRAINT_TYPE = 'R') LOOP
      L_SQL := 'ALTER TABLE ' || ITEM.TABLE_NAME || ' MODIFY CONSTRAINT ' ||
               ITEM.CONSTRAINT_NAME || C_MODIFY_CONS_TO_ENABLE;
      DBMS_OUTPUT.PUT_LINE(L_SQL);
      EXECUTE IMMEDIATE L_SQL;
    END LOOP;

  END ENABLE_ALL_CONS;

  PROCEDURE DISABLE_ALL_CONS IS
    L_SQL VARCHAR2(500);
  BEGIN
    EXECUTE IMMEDIATE 'PURGE RECYCLEBIN';

    FOR ITEM IN (SELECT TABLE_NAME, CONSTRAINT_NAME
                   FROM USER_CONSTRAINTS
                  WHERE CONSTRAINT_TYPE = 'R') LOOP
      L_SQL := 'ALTER TABLE ' || ITEM.TABLE_NAME || ' MODIFY CONSTRAINT ' ||
               ITEM.CONSTRAINT_NAME || C_MODIFY_CONS_TO_DISABLE;
      DBMS_OUTPUT.PUT_LINE(L_SQL);
      EXECUTE IMMEDIATE L_SQL;
    END LOOP;

    FOR ITEM IN (SELECT C.TABLE_NAME, C.CONSTRAINT_NAME
                   FROM USER_CONSTRAINTS C
                  INNER JOIN USER_TABLES T
                     ON C.TABLE_NAME = T.TABLE_NAME
                  WHERE C.CONSTRAINT_TYPE IN ('P', 'U')
                    AND T.IOT_TYPE IS NULL) LOOP
      L_SQL := 'ALTER TABLE ' || ITEM.TABLE_NAME || ' MODIFY CONSTRAINT ' ||
               ITEM.CONSTRAINT_NAME || C_MODIFY_CONS_TO_DISABLE;
      DBMS_OUTPUT.PUT_LINE(L_SQL);
      EXECUTE IMMEDIATE L_SQL;
    END LOOP;

  END DISABLE_ALL_CONS;

  PROCEDURE RESET_SEQUENCE(P_SEQUENCE USER_SEQUENCES.SEQUENCE_NAME%TYPE) IS
    L_OWNER VARCHAR2(30) := SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA');
  BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE ' || L_OWNER || '.' || P_SEQUENCE;
    EXECUTE IMMEDIATE 'CREATE SEQUENCE ' || L_OWNER || '.' || P_SEQUENCE ||
                      CHR(10) || 'MINVALUE 1' || CHR(10) || 'START WITH 1' ||
                      CHR(10) || 'INCREMENT BY 1' || CHR(10) || 'CACHE 20';

  END RESET_SEQUENCE;

  FUNCTION GET_SEQ_NEXTVALUE(SEQ_NAME VARCHAR2)
    RETURN NUMBER
    IS
    L_NEXTVAL PLS_INTEGER:=0;
    BEGIN
      EXECUTE IMMEDIATE 'SELECT '||SEQ_NAME||'.NEXTVAL FROM DUAL' INTO L_NEXTVAL;
      RETURN L_NEXTVAL;
    END GET_SEQ_NEXTVALUE;

  PROCEDURE POP_DIM_TIME IS
  C_START_DATE CONSTANT DATE := TO_DATE('19000101', 'YYYYMMDD');
  C_END_DATE   CONSTANT DATE := TO_DATE('20991231', 'YYYYMMDD');
  L_START_DATE DATE;
  L_END_DATE   DATE;
  BEGIN

    SELECT TO_DATE(TO_CHAR(MIN(CALENDAR_DATE)), 'YYYYMMDD'),
           TO_DATE(TO_CHAR(MAX(CALENDAR_DATE)), 'YYYYMMDD')
      INTO L_START_DATE, L_END_DATE
      FROM MONTH_WEEK_MAP@MYLINKAPP;

    DISABLE_ALL_CONS;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_DAY';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_IWEEK';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_IYEAR';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_CWEEK';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_CMONTH';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_CYEAR';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_SMONTH';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_SWEEK';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_SWEEK_PART';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_SMYEAR';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DATE_SWYEAR';

    SELECT TO_DATE(TO_CHAR(MIN(CALENDAR_DATE)), 'YYYYMMDD'),
           TO_DATE(TO_CHAR(MAX(CALENDAR_DATE)), 'YYYYMMDD')
      INTO L_START_DATE, L_END_DATE
      FROM MONTH_WEEK_MAP@MYLINKAPP;

    INSERT INTO DIM_DATE_CYEAR
      (CYEAR_ID, CYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, CYEAR_NUM, CYEAR_SEQ)
    VALUES
      (0,
       C_DUMMY,
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    INSERT INTO DIM_DATE_CMONTH
      (CMONTH_ID,
       CMONTH_DESC,
       CYEAR_ID,
       CMONTH_OF_CYEAR,
       CMONTH_NAME,
       IS_FIRST_OF_CYEAR,
       IS_LAST_OF_CYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       CMONTH_NUM,
       CMONTH_SEQ)
    VALUES
      (0,
       C_DUMMY,
       0,
       0,
       C_DUMMY,
       'N',
       'N',
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    INSERT INTO DIM_DATE_CWEEK
      (CWEEK_ID,
       CWEEK_DESC,
       CYEAR_ID,
       CWEEK_OF_CYEAR,
       IS_FIRST_OF_CYEAR,
       IS_LAST_OF_CYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       CWEEK_NUM,
       CWEEK_SEQ)
    VALUES
      (0,
       C_DUMMY,
       0,
       0,
       'N',
       'N',
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    -- ISO Calendar
    INSERT INTO DIM_DATE_IYEAR
      (IYEAR_ID, IYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, IYEAR_NUM, IYEAR_SEQ)
    VALUES
      (0,
       'DUMMY',
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    INSERT INTO DIM_DATE_IWEEK
      (IWEEK_ID,
       IWEEK_DESC,
       IWEEK_OF_IYEAR,
       IS_FIRST_OF_IYEAR,
       IS_LAST_OF_IYEAR,
       IYEAR_ID,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       IWEEK_NUM,
       IWEEK_SEQ)
    VALUES
      (0,
       'DUMMY',
       0,
       'N',
       'N',
       0,
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    -- 7TH Calendar
    INSERT INTO DIM_DATE_SMYEAR
      (SMYEAR_ID, SMYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, SMYEAR_NUM, SMYEAR_SEQ)
    VALUES
      (0,
       C_DUMMY,
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    INSERT INTO DIM_DATE_SWYEAR
      (SWYEAR_ID, SWYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, SWYEAR_NUM, SWYEAR_SEQ)
    VALUES
      (0,
       C_DUMMY,
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    INSERT INTO DIM_DATE_SMONTH
      (SMONTH_ID,
       SMONTH_DESC,
       SMYEAR_ID,
       SMONTH_OF_SMYEAR,
       SMONTH_NAME,
       IS_FIRST_OF_SMYEAR,
       IS_LAST_OF_SMYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       SMONTH_NUM,
       SMONTH_SEQ)
    VALUES
      (0,
       C_DUMMY,
       0,
       0,
       C_DUMMY,
       'N',
       'N',
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    INSERT INTO DIM_DATE_SWEEK
      (SWEEK_ID,
       SWEEK_DESC,
       SWYEAR_ID,
       SWEEK_OF_SWYEAR,
       IS_FIRST_OF_SWYEAR,
       IS_LAST_OF_SWYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       SWEEK_NUM,
       SWEEK_SEQ)
    VALUES
      (0,
       C_DUMMY,
       0,
       0,
       'N',
       'N',
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    INSERT INTO DIM_DATE_SWEEK_PART
      (SWEEK_PART_ID,
       SWEEK_PART_DESC,
       SMONTH_ID,
       SWEEK_ID,
       SWEEK_PART_OF_SMONTH,
       SWEEK_PART_OF_SWEEK,
       IS_FIRST_OF_SMONTH,
       IS_LAST_OF_SMONTH,
       IS_FIRST_OF_SWEEK,
       IS_LAST_OF_SWEEK,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       SWEEK_PART_NUM,
       SWEEK_PART_SEQ)
    VALUES
      (0,
       C_DUMMY,
       0,
       0,
       0,
       0,
       'N',
       'N',
       'N',
       'N',
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    INSERT INTO DIM_DATE_DAY
      (DATE_ID,
       DAY_DATE,
       DAY_DESC,
       CWEEK_ID,
       CMONTH_ID,
       IWEEK_ID,
       SWEEK_PART_ID,
       DAY_OF_CWEEK,
       DAY_OF_CMONTH,
       DAY_OF_CYEAR,
       DAY_OF_IWEEK,
       DAY_OF_IYEAR,
       DAY_OF_SWEEK_PART,
       DAY_OF_SWEEK,
       DAY_OF_SWYEAR,
       DAY_OF_SMONTH,
       DAY_OF_SMYEAR,
       IS_FIRST_OF_CWEEK,
       IS_LAST_OF_CWEEK,
       IS_FIRST_OF_CMONTH,
       IS_LAST_OF_CMONTH,
       IS_FIRST_OF_CYEAR,
       IS_LAST_OF_CYEAR,
       IS_FIRST_OF_IWEEK,
       IS_LAST_OF_IWEEK,
       IS_FIRST_OF_IYEAR,
       IS_LAST_OF_IYEAR,
       IS_FIRST_OF_SWEEK_PART,
       IS_LAST_OF_SWEEK_PART,
       IS_FIRST_OF_SWEEK,
       IS_LAST_OF_SWEEK,
       IS_FIRST_OF_SWYEAR,
       IS_LAST_OF_SWYEAR,
       IS_FIRST_OF_SMONTH,
       IS_LAST_OF_SMONTH,
       IS_FIRST_OF_SMYEAR,
       IS_LAST_OF_SMYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       DAY_NUM,
       DAY_SEQ)
    VALUES
      (0,
       TO_DATE('19000101', 'YYYYMMDD'),
       'DUMMY',
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       'N',
       TO_DATE('19000101', 'YYYYMMDD'),
       TO_DATE('19000101', 'YYYYMMDD'),
       0,
       0,
       0);

    INSERT INTO DIM_DATE_CYEAR
      (CYEAR_ID, CYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, CYEAR_NUM,CYEAR_SEQ)
      WITH MYDATE AS
       (SELECT C_START_DATE + LEVEL - 1 DAY
          FROM DUAL
        CONNECT BY C_START_DATE + LEVEL - 1 <= C_END_DATE)
      SELECT O.CYEAR_ID, O.CYEAR_DESC, O.START_DATE, O.END_DATE, O.TIME_SPAN, O.CYEAR_NUM, ROWNUM CYEAR_SEQ
      FROM (
      SELECT EXTRACT(YEAR FROM DAY) CYEAR_ID,
             EXTRACT(YEAR FROM DAY) CYEAR_DESC,
             MIN(DAY) START_DATE,
             MAX(DAY) + 1 - 1 / 24 / 3600 END_DATE,
             COUNT(DAY) TIME_SPAN,
             EXTRACT(YEAR FROM DAY) CYEAR_NUM
        FROM MYDATE
       WHERE EXTRACT(YEAR FROM DAY) BETWEEN EXTRACT(YEAR FROM L_START_DATE) AND
             EXTRACT(YEAR FROM L_END_DATE)
       GROUP BY EXTRACT(YEAR FROM DAY)
       ORDER BY 1
       ) O;

    INSERT INTO DIM_DATE_CMONTH
      (CMONTH_ID,
       CMONTH_DESC,
       CYEAR_ID,
       CMONTH_OF_CYEAR,
       CMONTH_NAME,
       IS_FIRST_OF_CYEAR,
       IS_LAST_OF_CYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       CMONTH_NUM,
       CMONTH_SEQ)
      WITH MYDATE AS
       (SELECT C_START_DATE + LEVEL - 1 DAY
          FROM DUAL
        CONNECT BY C_START_DATE + LEVEL - 1 <= C_END_DATE)
      SELECT
       CMONTH_ID,
       CMONTH_DESC,
       CYEAR_ID,
       CMONTH_OF_CYEAR,
       CMONTH_NAME,
       IS_FIRST_OF_CYEAR,
       IS_LAST_OF_CYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       CMONTH_NUM,
       ROWNUM CMONTH_SEQ
      FROM (
      SELECT TO_NUMBER(TO_CHAR(M.DAY, 'YYYYMM')) CMONTH_ID,
             TO_CHAR(M.DAY, 'YYYY-MON') CMONTH_DESC,
             Y.CYEAR_ID,
             TO_NUMBER(TO_CHAR(M.DAY, 'MM')) CMONTH_OF_CYEAR,
             TO_CHAR(M.DAY, 'MON') CMONTH_NAME,
             (CASE
               WHEN TO_NUMBER(TO_CHAR(MIN(M.DAY), 'YYYYMM')) =
                    MIN(TO_NUMBER(TO_CHAR(MIN(M.DAY), 'YYYYMM')))
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(MIN(M.DAY), 'YYYY'))) THEN
                'Y'
               ELSE
                'N'
             END) IS_FIRST_OF_CYEAR,
             (CASE
               WHEN TO_NUMBER(TO_CHAR(MAX(M.DAY), 'YYYYMM')) =
                    MAX(TO_NUMBER(TO_CHAR(MAX(M.DAY), 'YYYYMM')))
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(MAX(M.DAY), 'YYYY'))) THEN
                'Y'
               ELSE
                'N'
             END) IS_LAST_OF_CYEAR,
             MIN(M.DAY) START_DATE,
             MAX(M.DAY) + 1 - 1 / 24 / 3600 END_DATE,
             COUNT(M.DAY) TIME_SPAN,
             TO_NUMBER(TO_CHAR(M.DAY, 'MM')) CMONTH_NUM
        FROM MYDATE M
       INNER JOIN DIM_DATE_CYEAR Y
          ON TO_NUMBER(TO_CHAR(M.DAY, 'YYYY')) = Y.CYEAR_NUM
       WHERE TO_NUMBER(TO_CHAR(M.DAY, 'YYYYMM')) BETWEEN
             TO_NUMBER(TO_CHAR(L_START_DATE, 'YYYYMM')) AND
             TO_NUMBER(TO_CHAR(L_END_DATE, 'YYYYMM'))
       GROUP BY TO_CHAR(M.DAY, 'YYYY-MON'),
                Y.CYEAR_ID,
                TO_NUMBER(TO_CHAR(M.DAY, 'MM')),
                TO_CHAR(M.DAY, 'MON'),
                TO_NUMBER(TO_CHAR(M.DAY, 'YYYYMM'))
       ORDER BY 1
       ) O ;

    INSERT INTO DIM_DATE_CWEEK
      (CWEEK_ID,
       CWEEK_DESC,
       CYEAR_ID,
       CWEEK_OF_CYEAR,
       IS_FIRST_OF_CYEAR,
       IS_LAST_OF_CYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       CWEEK_NUM,
       CWEEK_SEQ)
      WITH MYDATE AS
       (SELECT C_START_DATE + LEVEL - 1 DAY
          FROM DUAL
        CONNECT BY C_START_DATE + LEVEL - 1 <= L_END_DATE)
      SELECT
       CWEEK_ID,
       CWEEK_DESC,
       CYEAR_ID,
       CWEEK_OF_CYEAR,
       IS_FIRST_OF_CYEAR,
       IS_LAST_OF_CYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       CWEEK_NUM,
       ROWNUM CWEEK_SEQ
      FROM (
      SELECT TO_CHAR(W.DAY, 'YYYYWW') CWEEK_ID,
             TO_CHAR(W.DAY, 'YYYY-WW') CWEEK_DESC,
             Y.CYEAR_ID,
             TO_CHAR(W.DAY, 'WW') CWEEK_OF_CYEAR,
             (CASE
               WHEN TO_NUMBER(TO_CHAR(MIN(W.DAY), 'YYYYWW')) =
                    MIN(TO_NUMBER(TO_CHAR(MIN(W.DAY), 'YYYYWW')))
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(MIN(W.DAY), 'YYYY'))) THEN
                'Y'
               ELSE
                'N'
             END) IS_FIRST_OF_CYEAR,
             (CASE
               WHEN TO_NUMBER(TO_CHAR(MAX(W.DAY), 'YYYYWW')) =
                    MAX(TO_NUMBER(TO_CHAR(MAX(W.DAY), 'YYYYWW')))
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(MAX(W.DAY), 'YYYY'))) THEN
                'Y'
               ELSE
                'N'
             END) IS_LAST_OF_CYEAR,
             MIN(W.DAY) START_DATE,
             MAX(W.DAY) + 1 - 1 / 24 / 3600 END_DATE,
             COUNT(W.DAY) TIME_SPAN,
             TO_CHAR(W.DAY, 'WW') CWEEK_NUM
        FROM MYDATE W
       INNER JOIN DIM_DATE_CYEAR Y
          ON TO_CHAR(W.DAY, 'YYYY') = Y.CYEAR_NUM
       WHERE TO_CHAR(W.DAY, 'YYYY-WW') BETWEEN
             TO_CHAR(L_START_DATE, 'YYYY-WW') AND
             TO_CHAR(L_END_DATE, 'YYYY-WW')
       GROUP BY TO_CHAR(W.DAY, 'YYYY-WW'),
                Y.CYEAR_ID,
                TO_CHAR(W.DAY, 'WW'),
                TO_CHAR(W.DAY, 'YYYYWW')
       ORDER BY 1
       ) O ;

    --DIM_DATE_IYEAR
    INSERT INTO DIM_DATE_IYEAR
      (IYEAR_ID, IYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, IYEAR_NUM, IYEAR_SEQ)
      WITH MYDATE AS
       (SELECT C_START_DATE + LEVEL - 1 DAY
          FROM DUAL
        CONNECT BY C_START_DATE + LEVEL - 1 <= C_END_DATE)
      SELECT
      IYEAR_ID, IYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, IYEAR_NUM, ROWNUM IYEAR_SEQ
      FROM (
      SELECT TO_NUMBER(TO_CHAR(DAY, 'IYYY')) IYEAR_ID,
             TO_CHAR(DAY, 'IYYY') IYEAR_DESC,
             MIN(DAY) START_DATE,
             MAX(DAY) + 1 - 1 / 24 / 3600 END_DATE,
             COUNT(DAY) TIME_SPAN,
             TO_NUMBER(TO_CHAR(DAY, 'IYYY')) IYEAR_NUM
        FROM MYDATE
       WHERE TO_CHAR(DAY, 'IYYY') BETWEEN TO_CHAR(L_START_DATE, 'IYYY') AND
             TO_CHAR(L_END_DATE, 'IYYY')
       GROUP BY TO_CHAR(DAY, 'IYYY'), TO_NUMBER(TO_CHAR(DAY, 'IYYY'))
       ORDER BY 1
       ) O ;

    --dim_date_iweek
    INSERT INTO DIM_DATE_IWEEK
      (IWEEK_ID,
       IWEEK_DESC,
       IWEEK_OF_IYEAR,
       IYEAR_ID,
       IS_FIRST_OF_IYEAR,
       IS_LAST_OF_IYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       IWEEK_NUM,
       IWEEK_SEQ)
      WITH MYDATE AS
       (SELECT C_START_DATE + LEVEL - 1 DAY
          FROM DUAL
        CONNECT BY C_START_DATE + LEVEL - 1 <= C_END_DATE)
      SELECT
       IWEEK_ID,
       IWEEK_DESC,
       IWEEK_OF_IYEAR,
       IYEAR_ID,
       IS_FIRST_OF_IYEAR,
       IS_LAST_OF_IYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       IWEEK_NUM,
       ROWNUM IWEEK_SEQ
      FROM (
      SELECT TO_NUMBER(TO_CHAR(W.DAY, 'IYYYIW')) IWEEK_ID,
             TO_CHAR(W.DAY, 'IYYY-IW') IWEEK_DESC,
             TO_CHAR(W.DAY, 'IW') IWEEK_OF_IYEAR,
             TO_NUMBER(TO_CHAR(W.DAY, 'IYYY')) IYEAR_ID,
             (CASE
               WHEN TO_NUMBER(TO_CHAR(MIN(W.DAY), 'IYYYIW')) =
                    MIN(TO_NUMBER(TO_CHAR(MIN(W.DAY), 'IYYYIW')))
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(MIN(W.DAY), 'IYYY'))) THEN
                'Y'
               ELSE
                'N'
             END) IS_FIRST_OF_IYEAR,
             (CASE
               WHEN TO_NUMBER(TO_CHAR(MAX(W.DAY), 'IYYYIW')) =
                    MAX(TO_NUMBER(TO_CHAR(MAX(W.DAY), 'IYYYIW')))
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(MAX(W.DAY), 'IYYY'))) THEN
                'Y'
               ELSE
                'N'
             END) IS_LAST_OF_IYEAR,
             MIN(W.DAY) START_DATE,
             MAX(W.DAY) + 1 - 1 / 24 / 3600 END_DATE,
             COUNT(W.DAY) TIME_SPAN,
             TO_CHAR(W.DAY, 'IW') IWEEK_NUM
        FROM MYDATE W
       WHERE TO_CHAR(W.DAY, 'IYYY-IW') BETWEEN
             TO_CHAR(L_START_DATE, 'IYYY-IW') AND
             TO_CHAR(L_END_DATE, 'IYYY-IW')
       GROUP BY TO_CHAR(W.DAY, 'IYYY-IW'),
                TO_CHAR(W.DAY, 'IW'),
                TO_NUMBER(TO_CHAR(W.DAY, 'IYYY')),
                TO_CHAR(W.DAY, 'IYYYIW')
       ORDER BY 1
       ) O ;

    -- 7th Calendar
    INSERT INTO DIM_DATE_SMYEAR
      (SMYEAR_ID, SMYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, SMYEAR_NUM, SMYEAR_SEQ)
      WITH MYCTE AS
       (SELECT YEAR SMYEAR, TO_DATE(CALENDAR_DATE, 'YYYYMMDD') DAY2
          FROM MONTH_WEEK_MAP@MYLINKAPP A)
      SELECT SMYEAR_ID, SMYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, SMYEAR_NUM, ROWNUM SMYEAR_SEQ
      FROM (
      SELECT S.SMYEAR SMYEAR_ID,
             TO_CHAR(S.SMYEAR) SMYEAR_DESC,
             MIN(S.DAY2) START_DATE,
             MAX(S.DAY2) + 1 - 1 / 24 / 3600 END_DATE,
             COUNT(S.DAY2) TIME_SPAN,
             S.SMYEAR SMYEAR_NUM
        FROM MYCTE S
       GROUP BY S.SMYEAR
       ORDER BY 1
       ) O ;

    INSERT INTO DIM_DATE_SMONTH
      (SMONTH_ID,
       SMONTH_DESC,
       SMYEAR_ID,
       SMONTH_OF_SMYEAR,
       SMONTH_NAME,
       IS_FIRST_OF_SMYEAR,
       IS_LAST_OF_SMYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       SMONTH_NUM,
       SMONTH_SEQ)
      WITH MYCTE AS
       (SELECT CASE
                 WHEN MONTH = 12 AND WEEK = 1 THEN
                  YEAR + 1
                 WHEN MONTH = 1 AND WEEK >= 52 THEN
                  YEAR - 1
                 ELSE
                  YEAR
               END SMYEAR,
               MONTH SMONTH,
               TO_DATE(CALENDAR_DATE, 'YYYYMMDD') DAY2
          FROM MONTH_WEEK_MAP@MYLINKAPP A)
      SELECT
       SMONTH_ID,
       SMONTH_DESC,
       SMYEAR_ID,
       SMONTH_OF_SMYEAR,
       SMONTH_NAME,
       IS_FIRST_OF_SMYEAR,
       IS_LAST_OF_SMYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       SMONTH_NUM,
       ROWNUM SMONTH_SEQ
      FROM (
      SELECT S.SMYEAR * 100 + S.SMONTH SMONTH_ID,
             TO_CHAR(TO_DATE(TO_CHAR(S.SMYEAR * 10000 + S.SMONTH * 100 + 1),
                             'YYYYMMDD'),
                     'YYYY-MON') SMONTH_DESC,
             S.SMYEAR SMYEAR_ID,
             S.SMONTH SMONTH_OF_SMYEAR,
             TO_CHAR(TO_DATE(TO_CHAR(S.SMYEAR * 10000 + S.SMONTH * 100 + 1),
                             'YYYYMMDD'),
                     'MON') SMONTH_NAME,
             (CASE
               WHEN S.SMYEAR * 100 + S.SMONTH = MIN(S.SMYEAR * 100 + S.SMONTH)
                OVER(PARTITION BY S.SMYEAR) THEN
                'Y'
               ELSE
                'N'
             END) IS_FIRST_OF_SMYEAR,
             (CASE
               WHEN S.SMYEAR * 100 + S.SMONTH = MAX(S.SMYEAR * 100 + S.SMONTH)
                OVER(PARTITION BY S.SMYEAR) THEN
                'Y'
               ELSE
                'N'
             END) IS_LAST_OF_SMYEAR,
             MIN(S.DAY2) START_DATE,
             MAX(S.DAY2) + 1 - 1 / 24 / 3600 END_DATE,
             COUNT(*) TIME_SPAN,
             S.SMONTH SMONTH_NUM
        FROM MYCTE S
       GROUP BY S.SMYEAR * 100 + S.SMONTH,
                TO_CHAR(TO_DATE(TO_CHAR(S.SMYEAR * 10000 + S.SMONTH * 100 + 1),
                                'YYYYMMDD'),
                        'YYYY-MON'),
                S.SMYEAR,
                S.SMONTH,
                TO_CHAR(S.DAY2, 'MON'),
                TO_CHAR(TO_DATE(TO_CHAR(S.SMYEAR * 10000 + S.SMONTH * 100 + 1),
                                'YYYYMMDD'),
                        'MON'),
                S.SMONTH
         ORDER BY 1
         ) O ;

    INSERT INTO DIM_DATE_SWYEAR
      (SWYEAR_ID, SWYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, SWYEAR_NUM, SWYEAR_SEQ)
      WITH MYCTE AS
       (SELECT CASE
                 WHEN MONTH = 12 AND WEEK = 1 THEN
                  YEAR + 1
                 WHEN MONTH = 1 AND WEEK >= 52 THEN
                  YEAR - 1
                 ELSE
                  YEAR
               END SWYEAR,
               TO_DATE(CALENDAR_DATE, 'YYYYMMDD') DAY2
          FROM MONTH_WEEK_MAP@MYLINKAPP A)
      SELECT SWYEAR_ID, SWYEAR_DESC, START_DATE, END_DATE, TIME_SPAN, SWYEAR_NUM, ROWNUM SWYEAR_SEQ
      FROM (
      SELECT S.SWYEAR SWYEAR_ID,
             TO_CHAR(S.SWYEAR) SWYEAR_DESC,
             MIN(S.DAY2) START_DATE,
             MAX(S.DAY2) + 1 - 1 / 24 / 3600 END_DATE,
             COUNT(S.DAY2) TIME_SPAN,
             S.SWYEAR SWYEAR_NUM
        FROM MYCTE S
       GROUP BY S.SWYEAR
       ORDER BY 1
       ) O ;

    INSERT INTO DIM_DATE_SWEEK
      (SWEEK_ID,
       SWEEK_DESC,
       SWYEAR_ID,
       SWEEK_OF_SWYEAR,
       IS_FIRST_OF_SWYEAR,
       IS_LAST_OF_SWYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       SWEEK_NUM,
       SWEEK_SEQ)
      WITH MYCTE AS
       (SELECT CASE
                 WHEN MONTH = 12 AND WEEK = 1 THEN
                  YEAR + 1
                 WHEN MONTH = 1 AND WEEK >= 52 THEN
                  YEAR - 1
                 ELSE
                  YEAR
               END SWYEAR,
               MONTH SMONTH,
               WEEK SWEEK,
               TO_DATE(CALENDAR_DATE, 'YYYYMMDD') DAY2
          FROM MONTH_WEEK_MAP@MYLINKAPP A)
      SELECT
       SWEEK_ID,
       SWEEK_DESC,
       SWYEAR_ID,
       SWEEK_OF_SWYEAR,
       IS_FIRST_OF_SWYEAR,
       IS_LAST_OF_SWYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       SWEEK_NUM,
       ROWNUM SWEEK_SEQ
      FROM (
      SELECT S.SWYEAR * 100 + S.SWEEK SWEEK_ID,
             TO_CHAR(S.SWYEAR * 100 + S.SWEEK) SWEEK_DESC,
             S.SWYEAR SWYEAR_ID,
             S.SWEEK SWEEK_OF_SWYEAR,
             (CASE
               WHEN S.SWYEAR * 100 + S.SWEEK = MIN(S.SWYEAR * 100 + S.SWEEK)
                OVER(PARTITION BY S.SWYEAR) THEN
                'Y'
               ELSE
                'N'
             END) IS_FIRST_OF_SWYEAR,
             (CASE
               WHEN S.SWYEAR * 100 + S.SWEEK = MAX(S.SWYEAR * 100 + S.SWEEK)
                OVER(PARTITION BY S.SWYEAR) THEN
                'Y'
               ELSE
                'N'
             END) IS_LAST_OF_SWYEAR,
             MIN(S.DAY2) START_DATE,
             MAX(S.DAY2) + 1 - 1 / 24 / 3600 END_DATE,
             COUNT(*) TIME_SPAN,
             S.SWEEK SWEEK_NUM
        FROM MYCTE S
       GROUP BY S.SWYEAR * 100 + S.SWEEK,
                TO_CHAR(S.SWYEAR * 100 + S.SWEEK),
                S.SWYEAR,
                S.SWEEK
        ORDER BY 1
        ) O ;

    INSERT INTO DIM_DATE_SWEEK_PART
      (SWEEK_PART_ID,
       SWEEK_PART_DESC,
       SMONTH_ID,
       SWEEK_ID,
       SWEEK_PART_OF_SMONTH,
       SWEEK_PART_OF_SWEEK,
       IS_FIRST_OF_SMONTH,
       IS_LAST_OF_SMONTH,
       IS_FIRST_OF_SWEEK,
       IS_LAST_OF_SWEEK,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       SWEEK_PART_NUM,
       SWEEK_PART_SEQ)
      WITH MYCTE AS
       (SELECT CASE
                 WHEN MONTH = 12 AND WEEK = 1 THEN
                  YEAR + 1
                 WHEN MONTH = 1 AND WEEK >= 52 THEN
                  YEAR - 1
                 ELSE
                  YEAR
               END SWYEAR,
               YEAR SMYEAR,
               MONTH SMONTH,
               WEEK SWEEK,
               TO_DATE(CALENDAR_DATE, 'YYYYMMDD') DAY2
          FROM MONTH_WEEK_MAP@MYLINKAPP A)
      SELECT
       SWEEK_PART_ID,
       SWEEK_PART_DESC,
       SMONTH_ID,
       SWEEK_ID,
       SWEEK_PART_OF_SMONTH,
       SWEEK_PART_OF_SWEEK,
       IS_FIRST_OF_SMONTH,
       IS_LAST_OF_SMONTH,
       IS_FIRST_OF_SWEEK,
       IS_LAST_OF_SWEEK,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       SWEEK_PART_NUM,
       ROWNUM SWEEK_PART_SEQ
      FROM (
      SELECT S.SMYEAR * 100 + ROW_NUMBER() OVER(PARTITION BY S.SMYEAR ORDER BY MIN(S.DAY2)) SWEEK_PART_ID,
             S.SMYEAR * 100 + ROW_NUMBER() OVER(PARTITION BY S.SMYEAR ORDER BY MIN(S.DAY2)) SWEEK_PART_DESC,
             S.SMYEAR * 100 + S.SMONTH SMONTH_ID,
             S.SWYEAR * 100 + S.SWEEK SWEEK_ID,
             ROW_NUMBER() OVER(PARTITION BY S.SMYEAR, S.SMONTH ORDER BY MIN(S.DAY2)) SWEEK_PART_OF_SMONTH,
             ROW_NUMBER() OVER(PARTITION BY S.SWYEAR, S.SWEEK ORDER BY MIN(S.DAY2)) SWEEK_PART_OF_SWEEK,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SMYEAR, S.SMONTH ORDER BY MIN(S.DAY2)) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_SMONTH,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SMYEAR,
                         S.SMONTH ORDER BY MIN(S.DAY2) DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_SMONTH,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SWYEAR, S.SWEEK ORDER BY MIN(S.DAY2)) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_SWEEK,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SWYEAR,
                         S.SWEEK ORDER BY MIN(S.DAY2) DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_SWEEK,
             MIN(S.DAY2) START_DATE,
             MAX(S.DAY2) + 1 - 1 / 24 / 3600 END_DATE,
             COUNT(*) TIME_SPAN,
             ROW_NUMBER() OVER(PARTITION BY S.SMYEAR ORDER BY MIN(S.DAY2)) SWEEK_PART_NUM
        FROM MYCTE S
       GROUP BY S.SMYEAR, S.SMONTH, S.SWYEAR, S.SWEEK
       ORDER BY 1
       ) O ;

    --  DAY
    INSERT INTO DIM_DATE_DAY
      (DATE_ID,
       DAY_DATE,
       DAY_DESC,
       CWEEK_ID,
       CMONTH_ID,
       IWEEK_ID,
       SWEEK_PART_ID,
       DAY_OF_CWEEK,
       DAY_OF_CMONTH,
       DAY_OF_CYEAR,
       DAY_OF_IWEEK,
       DAY_OF_IYEAR,
       DAY_OF_SWEEK_PART,
       DAY_OF_SWEEK,
       DAY_OF_SWYEAR,
       DAY_OF_SMONTH,
       DAY_OF_SMYEAR,
       IS_FIRST_OF_CWEEK,
       IS_LAST_OF_CWEEK,
       IS_FIRST_OF_CMONTH,
       IS_LAST_OF_CMONTH,
       IS_FIRST_OF_CYEAR,
       IS_LAST_OF_CYEAR,
       IS_FIRST_OF_IWEEK,
       IS_LAST_OF_IWEEK,
       IS_FIRST_OF_IYEAR,
       IS_LAST_OF_IYEAR,
       IS_FIRST_OF_SWEEK_PART,
       IS_LAST_OF_SWEEK_PART,
       IS_FIRST_OF_SWEEK,
       IS_LAST_OF_SWEEK,
       IS_FIRST_OF_SWYEAR,
       IS_LAST_OF_SWYEAR,
       IS_FIRST_OF_SMONTH,
       IS_LAST_OF_SMONTH,
       IS_FIRST_OF_SMYEAR,
       IS_LAST_OF_SMYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       DAY_NUM,
       DAY_SEQ)
      WITH MYCTE AS
       (SELECT CASE
                 WHEN MONTH = 12 AND WEEK = 1 THEN
                  YEAR + 1
                 WHEN MONTH = 1 AND WEEK >= 52 THEN
                  YEAR - 1
                 ELSE
                  YEAR
               END SWYEAR,
               YEAR SMYEAR,
               MONTH SMONTH,
               WEEK SWEEK,
               TO_DATE(CALENDAR_DATE, 'YYYYMMDD') DAY2,
               A.*
          FROM MONTH_WEEK_MAP@MYLINKAPP A),
      MYCTE2 AS
       (SELECT A.*,
               DENSE_RANK() OVER(PARTITION BY SMYEAR ORDER BY SWYEAR, SWEEK, TO_NUMBER(TO_CHAR(DAY2, 'YYYYMM'))) SWEEK_PART
          FROM MYCTE A) --SELECT * FROM mycte2 ORDER BY day2
      SELECT
      DATE_ID,
       DAY_DATE,
       DAY_DESC,
       CWEEK_ID,
       CMONTH_ID,
       IWEEK_ID,
       SWEEK_PART_ID,
       DAY_OF_CWEEK,
       DAY_OF_CMONTH,
       DAY_OF_CYEAR,
       DAY_OF_IWEEK,
       DAY_OF_IYEAR,
       DAY_OF_SWEEK_PART,
       DAY_OF_SWEEK,
       DAY_OF_SWYEAR,
       DAY_OF_SMONTH,
       DAY_OF_SMYEAR,
       IS_FIRST_OF_CWEEK,
       IS_LAST_OF_CWEEK,
       IS_FIRST_OF_CMONTH,
       IS_LAST_OF_CMONTH,
       IS_FIRST_OF_CYEAR,
       IS_LAST_OF_CYEAR,
       IS_FIRST_OF_IWEEK,
       IS_LAST_OF_IWEEK,
       IS_FIRST_OF_IYEAR,
       IS_LAST_OF_IYEAR,
       IS_FIRST_OF_SWEEK_PART,
       IS_LAST_OF_SWEEK_PART,
       IS_FIRST_OF_SWEEK,
       IS_LAST_OF_SWEEK,
       IS_FIRST_OF_SWYEAR,
       IS_LAST_OF_SWYEAR,
       IS_FIRST_OF_SMONTH,
       IS_LAST_OF_SMONTH,
       IS_FIRST_OF_SMYEAR,
       IS_LAST_OF_SMYEAR,
       START_DATE,
       END_DATE,
       TIME_SPAN,
       DAY_NUM,
       ROWNUM DAY_SEQ
      FROM (
      SELECT TO_NUMBER(TO_CHAR(DAY2, 'YYYYMMDD')) DATE_ID,
             DAY2 DAY_DATE,
             TO_CHAR(S.DAY2, 'YYYY-MON-DD') DAY_DESC,
             TO_NUMBER(TO_CHAR(S.DAY2, 'YYYYWW')) CWEEK_ID,
             TO_NUMBER(TO_CHAR(S.DAY2, 'YYYYMM')) CMONTH_ID,
             TO_NUMBER(TO_CHAR(S.DAY2, 'IYYYIW')) IWEEK_ID,
             S.SMYEAR * 100 + S.SWEEK_PART SWEEK_PART_ID,
             ROW_NUMBER() OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'YYYYWW')) ORDER BY S.DAY2) DAY_OF_CWEEK,
             ROW_NUMBER() OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'YYYYMM')) ORDER BY S.DAY2) DAY_OF_CMONTH,
             ROW_NUMBER() OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'YYYY')) ORDER BY S.DAY2) DAY_OF_CYEAR,
             ROW_NUMBER() OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'IYYYIW')) ORDER BY S.DAY2) DAY_OF_IWEEK,
             ROW_NUMBER() OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'IYYY')) ORDER BY S.DAY2) DAY_OF_IYEAR,
             ROW_NUMBER() OVER(PARTITION BY S.SMYEAR * 100 + S.SWEEK_PART ORDER BY S.DAY2) DAY_OF_SWEEK_PART,
             ROW_NUMBER() OVER(PARTITION BY S.SWYEAR * 100 + S.SWEEK ORDER BY S.DAY2) DAY_OF_SWEEK,
             ROW_NUMBER() OVER(PARTITION BY S.SWYEAR * 100 ORDER BY S.DAY2) DAY_OF_SWYEAR,
             ROW_NUMBER() OVER(PARTITION BY S.SMYEAR * 100 + S.SMONTH ORDER BY S.DAY2) DAY_OF_SMONTH,
             ROW_NUMBER() OVER(PARTITION BY S.SMYEAR ORDER BY S.DAY2) DAY_OF_SMYEAR,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'YYYYWW'))
                         ORDER BY S.DAY2) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_CWEEK,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'YYYYWW'))
                         ORDER BY S.DAY2 DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_CWEEK,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'YYYYMM'))
                         ORDER BY S.DAY2) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_CMONTH,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'YYYYMM'))
                         ORDER BY S.DAY2 DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_CMONTH,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'YYYY')) ORDER BY
                         S.DAY2) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_CYEAR,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'YYYY')) ORDER BY
                         S.DAY2 DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_CYEAR,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'IYYYIW'))
                         ORDER BY S.DAY2) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_IWEEK,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'IYYYIW'))
                         ORDER BY S.DAY2 DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_IWEEK,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'IYYY')) ORDER BY
                         S.DAY2) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_IYEAR,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY TO_NUMBER(TO_CHAR(S.DAY2, 'IYYY')) ORDER BY
                         S.DAY2 DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_IYEAR,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SMYEAR * 100 + S.SWEEK_PART ORDER BY
                         S.DAY2) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_SWEEK_PART,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SMYEAR * 100 + S.SWEEK_PART ORDER BY
                         S.DAY2 DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_SWEEK_PART,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SWYEAR * 100 + S.SWEEK ORDER BY S.DAY2) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_SWEEK,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SWYEAR * 100 + S.SWEEK ORDER BY S.DAY2 DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_SWEEK,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SWYEAR * 100 ORDER BY S.DAY2) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_SWYEAR,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SWYEAR * 100 ORDER BY S.DAY2 DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_SWYEAR,
             CASE
               WHEN ROW_NUMBER() OVER(PARTITION BY S.SMYEAR * 100 + S.SMONTH
                         ORDER BY S.DAY2) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_SMONTH,
             CASE
               WHEN ROW_NUMBER() OVER(PARTITION BY S.SMYEAR * 100 + S.SMONTH
                         ORDER BY S.DAY2 DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_SMONTH,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SMYEAR * 100 ORDER BY S.DAY2) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_FIRST_OF_SMYEAR,
             CASE
               WHEN ROW_NUMBER()
                OVER(PARTITION BY S.SMYEAR * 100 ORDER BY S.DAY2 DESC) = 1 THEN
                'Y'
               ELSE
                'N'
             END IS_LAST_OF_SMYEAR,
             DAY2 START_DATE,
             S.DAY2 + 1 - 1 / 24 / 3600 END_DATE,
             1 TIME_SPAN,
             TO_NUMBER(TO_CHAR(S.DAY2, 'DD')) DAY_NUM,
             ROWNUM DAY_SEQ
        FROM MYCTE2 S
       ORDER BY DAY2) O;

    COMMIT;

    RELY_ALL_CONS;

  END POP_DIM_TIME;

  PROCEDURE POP_DIM_STYLE(P_IS_INITIAL BOOLEAN DEFAULT TRUE) IS
  BEGIN

    IF P_IS_INITIAL THEN

      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_SIZE_RANGE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_SIZE_ITEM';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_DEPT';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_VENDOR';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_STYLE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_STYLE_COLOR';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_STYLE_COLOR_SIZE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_STYLE_COLOR_SIZE_GP';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_GP_SIZE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_GP_GP';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_DEPT');
      RESET_SEQUENCE('SEQ_VENDOR');
      RESET_SEQUENCE('SEQ_STYLE');
      RESET_SEQUENCE('SEQ_STYLE_COLOR');
      RESET_SEQUENCE('SEQ_STYLE_COLOR_SIZE');
      RESET_SEQUENCE('SEQ_GP_GP');
      RESET_SEQUENCE('SEQ_GP_SIZE');
      RESET_SEQUENCE('SEQ_SIZE_RANGE');
      RESET_SEQUENCE('SEQ_SIZE_ITEM');
      RESET_SEQUENCE('SEQ_STYLE_COLOR_SIZE_GP');

      --DIM_DEPT
      INSERT INTO DIM_DEPT
        (DEPT_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         DEPT_NUM,
         DEPT,
         DIVISION,
         CORPORATE_DIVISION,
         ORI_DEPT_ID)
      VALUES
        (0, C_DUMMY, C_DUMMY, C_DUMMY, C_DUMMY, C_DUMMY, C_DUMMY, 0);

      INSERT INTO DIM_VENDOR
        (VENDOR_ID,
         SOURCE_BUSKEY,
         NAME,
         VENDOR_DIVISION,
         VENDOR_DEPT,
         VENDOR_PRODUCT_CATEGORY,
         ORI_MIC_ID,
         MIC_CODE,
         MIC_DESC,
         PO_DIRECTION,
         VENDOR_REF_NUMBER,
         ORI_VENDOR_COMPANY_ID,
         TARGET_BUSKEY)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         0,
         C_DUMMY,
         C_DUMMY,
         0,
         C_DUMMY,
         0,
         C_DUMMY);

      --DIM_SIZE_RANGE
      INSERT INTO DIM_SIZE_RANGE
        (SIZE_RANGE_ID, SOURCE_BUSKEY, DEPT_ID, NAME)
      VALUES
        (0, C_DUMMY, 0, C_DUMMY);

      --DIM_SIZE_ITEM
      INSERT INTO DIM_SIZE_ITEM
        (SIZE_ITEM_ID,
         SOURCE_BUSKEY,
         SIZE_RANGE_ID,
         SIZE_CODE,
         SIZE_NAME1,
         SIZE_NAME2,
         SIZE_SEQ1,
         SIZE_SEQ2,
         CORE_SIZE_INDICATOR)
      VALUES
        (0, C_DUMMY, 0, C_DUMMY, C_DUMMY, C_DUMMY, 0, 0,0);


      --DIM_STYLE
      INSERT INTO DIM_STYLE
        (STYLE_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         STYLE_NUMBER,
         DESCRIPTION,
         DEPT_ID,
         VENDOR_ID,
         VENDOR_NAME,
         SIZE_RANGE,
         DEPT_TYPE,
         DIVISION_TYPE,
         CLASS_CODE,
         CLASS,
         PRODUCT_CATEGORY,
         CATEGORY,
         PRODUCTION_TYPE,
         FIBER_CONTENT,
         FABRICATION,
         PRODUCT_GROUP,
         RANGE_CODE,
         COLLAR,
         SLEEVE,
         LABEL_CODE,
         TERM,
         PRODUCT_CATEGORY_CODE,
         SEASON_CODE,
         PRODUCT_GROUP_CODE,
         STYLE_REF_NUMBER,
         STYLE_NAME,
         SUB_CLASS,
         MINOR_CLASS,
         HANG_FOLD,
         YIELD,
         DISCONTINUE_DATE,
         CHANGE_DATE,
         REPLENISHMENT_IND,
         ORI_STYLE_ID,
         ORI_COMPANY_ID,
         ORI_BUYER_CLASS_ID,
         ORI_BUYER_SUBCLASS_ID,
         ORI_MINOR_CLASS_ID,
         ORI_PRODUCTION_TYPE_ID,
         LOW_COST,
         LOW_RETAIL,
         STANDARD_COST,
         VENDOR_REF_NUMBER,
         STATUS,
         ORI_BUYER_COMPANY_ID)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         0,
         0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         0,
         TO_DATE('19000101', 'YYYYMMDD'),
         TO_DATE('19000101', 'YYYYMMDD'),
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         C_DUMMY,
         0,
         0);

      INSERT INTO DIM_STYLE_COLOR
        (STYLE_COLOR_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         STYLE_ID,
         COLOR_NAME,
         COLOR_CODE,
         VENDOR_COLOR_CODE,
         COLOR_FAMILY,
         SHORT_COLOR_NAME,
         COLOR_GROUP,
         PATTERN,
         ACCOUNT_EXCLUSIVE,
         START_SHIP_DATE,
         PRODUCT_TEAM,
         KEY_ITEM_INDICATOR,
         PRODUCT_STOP_DATE,
         OUTLET_STYLE_INDICATOR,
         MULTI_CHANNEL_IND,
         ORI_STYLE_COLOR_ID)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         TO_DATE('19000101', 'YYYYMMDD'),
         C_DUMMY,
         C_DUMMY,
         TO_DATE('19000101', 'YYYYMMDD'),
         C_DUMMY,
         C_DUMMY,
         0);

      INSERT INTO DIM_STYLE_COLOR_SIZE
        (STYLE_COLOR_SIZE_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         STYLE_COLOR_ID,
         SIZE_CODE,
         SIZE_ITEM_ID,
         UPC,
         ARTICLE_NUMBER,
         ORI_STYLE_SIZE_ID)
      VALUES
        (0, C_DUMMY, C_DUMMY, 0, C_DUMMY, 0, C_DUMMY, C_DUMMY, 0);

      INSERT INTO DIM_GP_GP
        (GP_GP_ID, SOURCE_BUSKEY, NAME)
      VALUES
        (0, C_DUMMY, C_DUMMY);

      INSERT INTO DIM_GP_SIZE
        (GP_SIZE_ID, SOURCE_BUSKEY, GP_GP_ID, SIZE_CODE, RATIO)
      VALUES
        (0, C_DUMMY, 0, C_DUMMY, 0);

      INSERT INTO DIM_STYLE_COLOR_SIZE_GP
        (STYLE_COLOR_SIZE_GP_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         GP_SIZE_ID,
         STYLE_COLOR_SIZE_ID,
         PREPACK_CODE,
         PREPACK_TYPE)
      VALUES
        (0, C_DUMMY, C_DUMMY, 0, 0, C_DUMMY, C_DUMMY);

    END IF;

    --1,DIM_DEPT
    MERGE INTO DIM_DEPT T
    USING (SELECT UPPER(BD.BUYER_DEPT_NUM) SOURCE_BUSKEY,
                  UPPER(BD.BUYER_DEPT_ID)  TARGET_BUSKEY,
                  UPPER(BD.BUYER_DEPT_NUM) DEPT_NUM,
                  UPPER(BD.DEPT) DEPT,
                  UPPER(NVL(DC.DEMAND_CENTER_NUM, C_DUMMY)) DIVISION,
                  UPPER(NVL(C.CORPORATE_DIVISION, C_DUMMY)) CORPORATE_DIVISION,
                  BD.BUYER_DEPT_ID ORI_DEPT_ID
             FROM BUYER_DEPT@MYLINKAPP BD
             LEFT JOIN DEMAND_CENTER@MYLINKAPP DC
               ON BD.DEMAND_CENTER_ID = DC.DEMAND_CENTER_ID
             LEFT JOIN COMPANY@MYLINKAPP C
               ON BD.PARENT_COMPANY_ID = C.COMPANY_ID) S
    ON (S.TARGET_BUSKEY = T.TARGET_BUSKEY)
    WHEN MATCHED THEN
      UPDATE
         SET T.DEPT               = S.DEPT,
             T.DIVISION           = S.DIVISION,
             T.CORPORATE_DIVISION = S.CORPORATE_DIVISION,
             T.ORI_DEPT_ID        = S.ORI_DEPT_ID,
             T.SOURCE_BUSKEY      = S.SOURCE_BUSKEY
    WHEN NOT MATCHED THEN
      INSERT
        (DEPT_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         DEPT_NUM,
         DEPT,
         DIVISION,
         CORPORATE_DIVISION,
         ORI_DEPT_ID)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_DEPT'),
         S.SOURCE_BUSKEY,
         S.TARGET_BUSKEY,
         S.DEPT_NUM,
         S.DEPT,
         S.DIVISION,
         S.CORPORATE_DIVISION,
         S.ORI_DEPT_ID);


    --2,DIM_VENDOR
    MERGE INTO DIM_VENDOR T
    USING (SELECT DISTINCT UPPER(M.MIC_CODE) SOURCE_BUSKEY,
                           UPPER(C.COMPANY_NAME) NAME,
                           UPPER(NVL(B.VENDOR_DIVISION, 'DUMMY')) VENDOR_DIVISION,
                           UPPER(NVL(B.VENDOR_DEPT, 'DUMMY')) VENDOR_DEPT,
                           UPPER(NVL(B.VENDOR_PRODUCT_CATEGORY, 'DUMMY')) VENDOR_PRODUCT_CATEGORY,
                           M.MIC_ID ORI_MIC_ID,
                           UPPER(M.MIC_CODE) MIC_CODE,
                           UPPER(M.MIC_DESC) MIC_DESC,
                           NVL(M.PO_DIRECTION, 0) PO_DIRECTION,
                           UPPER(M.MIC_CODE) VENDOR_REF_NUMBER,
                           C.COMPANY_ID ORI_VENDOR_COMPANY_ID,
                           UPPER(C.COMPANY_ID) TARGET_BUSKEY
             FROM BUYER_VENDOR_MIC_MATCH@MYLINKAPP B
            INNER JOIN COMPANY@MYLINKAPP C
               ON C.COMPANY_ID = B.VENDOR_COMPANY_ID
            INNER JOIN MIC@MYLINKAPP M
               ON B.MIC_ID = M.MIC_ID) S
    ON (T.TARGET_BUSKEY = S.TARGET_BUSKEY)
    WHEN NOT MATCHED THEN
      INSERT
        (VENDOR_ID,
         SOURCE_BUSKEY,
         NAME,
         VENDOR_DIVISION,
         VENDOR_DEPT,
         VENDOR_PRODUCT_CATEGORY,
         ORI_MIC_ID,
         MIC_CODE,
         MIC_DESC,
         PO_DIRECTION,
         VENDOR_REF_NUMBER,
         ORI_VENDOR_COMPANY_ID,
         TARGET_BUSKEY)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_VENDOR'),
         S.SOURCE_BUSKEY,
         S.NAME,
         S.VENDOR_DIVISION,
         S.VENDOR_DEPT,
         S.VENDOR_PRODUCT_CATEGORY,
         S.ORI_MIC_ID,
         S.MIC_CODE,
         S.MIC_DESC,
         S.PO_DIRECTION,
         S.VENDOR_REF_NUMBER,
         S.ORI_VENDOR_COMPANY_ID,
         S.TARGET_BUSKEY)
    WHEN MATCHED THEN
      UPDATE
         SET T.SOURCE_BUSKEY           = S.SOURCE_BUSKEY,
             T.NAME                    = S.NAME,
             T.VENDOR_DIVISION         = S.VENDOR_DIVISION,
             T.VENDOR_DEPT             = S.VENDOR_DEPT,
             T.VENDOR_PRODUCT_CATEGORY = S.VENDOR_PRODUCT_CATEGORY,
             T.ORI_MIC_ID              = S.ORI_MIC_ID,
             T.MIC_CODE                = S.MIC_CODE,
             T.MIC_DESC                = S.MIC_DESC,
             T.PO_DIRECTION            = S.PO_DIRECTION,
             T.VENDOR_REF_NUMBER       = S.VENDOR_REF_NUMBER,
             T.ORI_VENDOR_COMPANY_ID   = S.ORI_VENDOR_COMPANY_ID;



    --3,DIM_SIZE_RANGE
    MERGE INTO DIM_SIZE_RANGE T
    USING (SELECT DISTINCT UPPER(B.SOURCE_BUSKEY||C_DELIMITER||A.SIZE_RANGE_NAME) SOURCE_BUSKEY,
                  B.DEPT_ID,
                  UPPER(A.SIZE_RANGE_NAME) NAME
             FROM SIZE_RANGE@MYLINKAPP A
             INNER JOIN DIM_DEPT B
             ON A.BUYER_DEPT_ID=B.ORI_DEPT_ID) S
    ON (S.SOURCE_BUSKEY = T.SOURCE_BUSKEY)
    WHEN MATCHED THEN UPDATE SET
      T.DEPT_ID=S.DEPT_ID,
      T.NAME=S.NAME
    WHEN NOT MATCHED THEN
      INSERT
        (SIZE_RANGE_ID, SOURCE_BUSKEY,DEPT_ID,NAME)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_SIZE_RANGE'), S.SOURCE_BUSKEY,S.DEPT_ID,S.NAME);

    --4,DIM_SIZE_ITEM
    MERGE INTO DIM_SIZE_ITEM T
    USING (SELECT SI.SIZE_RANGE_BK || C_DELIMITER || SI.SIZE_CODE SOURCE_BUSKEY,
                  SR.SIZE_RANGE_ID,
                  SI.SIZE_CODE,
                  SI.SIZE_NAME1,
                  SI.SIZE_NAME2,
                  SI.SIZE_SEQ1,
                  SI.SIZE_SEQ2,
                  SI.CORE_SIZE_INDICATOR
             FROM (SELECT DISTINCT UPPER(NVL(A.SIZE_CODE, C_DUMMY)) SIZE_CODE,
                                   UPPER(B.BUYER_DEPT_NUM)||C_DELIMITER||UPPER(NVL(A.SIZE_RANGE_NAME, C_DUMMY)) SIZE_RANGE_BK,
                                   UPPER(NVL(A.SIZE_DESC1, C_DUMMY)) SIZE_NAME1,
                                   UPPER(NVL(A.SIZE_DESC2, C_DUMMY)) SIZE_NAME2,
                                   NVL(A.SIZE_SEQ1, 0) SIZE_SEQ1,
                                   NVL(A.SIZE_SEQ2, 0) SIZE_SEQ2,
                                   NVL(A.CORE_SIZE_INDICATOR,0) CORE_SIZE_INDICATOR
                     FROM SIZE_RANGE@MYLINKAPP A
                     INNER JOIN BUYER_DEPT@MYLINKAPP B
                     ON A.BUYER_DEPT_ID=B.BUYER_DEPT_ID) SI
            INNER JOIN DIM_SIZE_RANGE SR
               ON SI.SIZE_RANGE_BK = SR.SOURCE_BUSKEY) S
    ON (T.SOURCE_BUSKEY = S.SOURCE_BUSKEY)
    WHEN MATCHED THEN
      UPDATE
         SET T.SIZE_NAME1          = S.SIZE_NAME1,
             T.SIZE_NAME2          = S.SIZE_NAME2,
             T.SIZE_SEQ1           = S.SIZE_SEQ1,
             T.SIZE_SEQ2           = S.SIZE_SEQ2,
             T.CORE_SIZE_INDICATOR = S.CORE_SIZE_INDICATOR
    WHEN NOT MATCHED THEN
      INSERT
        (SIZE_ITEM_ID,
         SOURCE_BUSKEY,
         SIZE_RANGE_ID,
         SIZE_CODE,
         SIZE_NAME1,
         SIZE_NAME2,
         SIZE_SEQ1,
         SIZE_SEQ2,
         CORE_SIZE_INDICATOR)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_SIZE_ITEM'),
         S.SOURCE_BUSKEY,
         S.SIZE_RANGE_ID,
         S.SIZE_CODE,
         S.SIZE_NAME1,
         S.SIZE_NAME2,
         S.SIZE_SEQ1,
         S.SIZE_SEQ2,
         S.CORE_SIZE_INDICATOR);


    --5,DIM_STYLE
    MERGE INTO DIM_STYLE T
    USING (SELECT UPPER(V.SOURCE_BUSKEY)||C_DELIMITER||UPPER(S.STYLE_NUMBER) SOURCE_BUSKEY,
                  UPPER(S.STYLE_ID) TARGET_BUSKEY,
                  UPPER(S.STYLE_NUMBER) STYLE_NUMBER,
                  UPPER(NVL(S.DESCRIPTION,C_DUMMY)) DESCRIPTION,
                  NVL(D.DEPT_ID, 0) DEPT_ID,
                  NVL(V.VENDOR_ID,0) VENDOR_ID,
                  UPPER(NVL(C.COMPANY_NAME, C_DUMMY)) VENDOR_NAME,
                  UPPER(NVL(S.SIZE_RANGE, C_DUMMY)) SIZE_RANGE,
                  UPPER(NVL(S.DEPT_TYPE, C_DUMMY)) DEPT_TYPE,
                  UPPER(NVL(S.DIVISION_TYPE, C_DUMMY)) DIVISION_TYPE,
                  UPPER(NVL(BCR1.BODY_CLASSIFICATION_CODE, C_DUMMY)) CLASS_CODE,
                  UPPER(NVL(BCR1.BODY_CLASSIFICATION_DESC, C_DUMMY)) CLASS,
                  UPPER(NVL(S.PRODUCT_CATEGORY, C_DUMMY)) PRODUCT_CATEGORY,
                  UPPER(NVL(S.CATEGORY, C_DUMMY)) CATEGORY,
                  UPPER(NVL(PT.PRODUCTION_TYPE_NAME, C_DUMMY)) PRODUCTION_TYPE,
                  UPPER(NVL(S.FIBER_CONTENT, C_DUMMY)) FIBER_CONTENT,
                  UPPER(NVL(S.FABRICATION, C_DUMMY)) FABRICATION,
                  UPPER(NVL(S.PRODUCT_GROUP, C_DUMMY)) PRODUCT_GROUP,
                  UPPER(NVL(S.RANGE_CODE, C_DUMMY)) RANGE_CODE,
                  UPPER(NVL(S.COLLAR, C_DUMMY)) COLLAR,
                  UPPER(NVL(S.SLEEVE, C_DUMMY)) SLEEVE,
                  UPPER(NVL(S.LABEL_CODE, C_DUMMY)) LABEL_CODE,
                  UPPER(NVL(S.TERM, C_DUMMY)) TERM,
                  UPPER(NVL(S.PRODUCT_CATEGORY_CODE, C_DUMMY)) PRODUCT_CATEGORY_CODE,
                  UPPER(NVL(S.SEASON_CODE, C_DUMMY)) SEASON_CODE,
                  UPPER(NVL(S.PRODUCT_GROUP_CODE, C_DUMMY)) PRODUCT_GROUP_CODE,
                  UPPER(NVL(S.VENDOR_REF_NUMBER, C_DUMMY)) STYLE_REF_NUMBER,
                  UPPER(NVL(S.NAME, C_DUMMY)) STYLE_NAME,
                  UPPER(NVL(BCR2.BODY_CLASSIFICATION_DESC, C_DUMMY)) SUB_CLASS,
                  UPPER(NVL(BCR3.BODY_CLASSIFICATION_DESC, C_DUMMY)) MINOR_CLASS,
                  UPPER(NVL(S.HANG_FOLD, C_DUMMY)) HANG_FOLD,
                  NVL(S.YIELD, 0) YIELD,
                  NVL(S.DISCONTINUE_DATE, TO_DATE('20991231', 'YYYYMMDD')) DISCONTINUE_DATE,
                  NVL(S.CHANGE_DATE, TO_DATE('20991231', 'YYYYMMDD')) CHANGE_DATE,
                  NVL(SBA.IS_REPLENISHMENT, 0) REPLENISHMENT_IND,
                  S.STYLE_ID ORI_STYLE_ID,
                  NVL(S.COMPANY_ID, 0) ORI_COMPANY_ID,
                  NVL(SBA.BUYER_CLASS_ID, 0) ORI_BUYER_CLASS_ID,
                  NVL(SBA.BUYER_SUBCLASS_ID, 0) ORI_BUYER_SUBCLASS_ID,
                  NVL(SBA.MINOR_CLASS_ID, 0) ORI_MINOR_CLASS_ID,
                  NVL(S.PRODUCTION_TYPE_ID, 0) ORI_PRODUCTION_TYPE_ID,
                  NVL(S.LOW_COST, 0) LOW_COST,
                  NVL(S.LOW_RETAIL, 0) LOW_RETAIL,
                  NVL(S.STANDARD_COST, 0) STANDARD_COST,
                  NVL(S.VENDOR_REF_NUMBER, C_DUMMY) VENDOR_REF_NUMBER,
                  NVL(S.STATUS,0) STATUS,
                  NVL(S.BUYER_COMPANY_ID,0) ORI_BUYER_COMPANY_ID
             FROM STYLE@MYLINKAPP S
             LEFT JOIN STYLE_BUYER_ATTR@MYLINKAPP SBA
               ON S.STYLE_ID = SBA.STYLE_ID
             LEFT JOIN BODY_CLASSIFICATION_REF@MYLINKAPP BCR1
               ON SBA.BUYER_CLASS_ID = BCR1.BODY_CLASSIFICATION_REF_ID
             LEFT JOIN BODY_CLASSIFICATION_REF@MYLINKAPP BCR2
               ON SBA.BUYER_SUBCLASS_ID = BCR2.BODY_CLASSIFICATION_REF_ID
             LEFT JOIN BODY_CLASSIFICATION_REF@MYLINKAPP BCR3
               ON SBA.MINOR_CLASS_ID = BCR3.BODY_CLASSIFICATION_REF_ID
             LEFT JOIN BUYER_DEPT@MYLINKAPP BD
               ON BCR1.BUYER_DEPT_ID = BD.BUYER_DEPT_ID
             LEFT JOIN MIC@MYLINKAPP M
               ON SBA.MIC_ID=M.MIC_ID
             LEFT JOIN DIM_DEPT D
               ON UPPER(BD.BUYER_DEPT_NUM) = D.SOURCE_BUSKEY
             LEFT JOIN DIM_VENDOR V
               ON UPPER(M.MIC_CODE)=V.SOURCE_BUSKEY
             LEFT JOIN COMPANY@MYLINKAPP C
               ON S.COMPANY_ID = C.COMPANY_ID
             LEFT JOIN PRODUCTION_TYPE@MYLINKAPP PT
               ON S.PRODUCTION_TYPE_ID = PT.PRODUCTION_TYPE_ID) S
    ON (T.TARGET_BUSKEY = S.TARGET_BUSKEY)
    WHEN MATCHED THEN
      UPDATE
         SET T.SOURCE_BUSKEY          = S.SOURCE_BUSKEY,
             T.STYLE_NUMBER           = S.STYLE_NUMBER,
             T.DESCRIPTION            = S.DESCRIPTION,
             T.DEPT_ID                = S.DEPT_ID,
             T.VENDOR_ID              = S.VENDOR_ID,
             T.VENDOR_NAME            = S.VENDOR_NAME,
             T.SIZE_RANGE             = S.SIZE_RANGE,
             T.DEPT_TYPE              = S.DEPT_TYPE,
             T.DIVISION_TYPE          = S.DIVISION_TYPE,
             T.CLASS_CODE             = S.CLASS_CODE,
             T.CLASS                  = S.CLASS,
             T.PRODUCT_CATEGORY       = S.PRODUCT_CATEGORY,
             T.CATEGORY               = S.CATEGORY,
             T.PRODUCTION_TYPE        = S.PRODUCTION_TYPE,
             T.FIBER_CONTENT          = S.FIBER_CONTENT,
             T.FABRICATION            = S.FABRICATION,
             T.PRODUCT_GROUP          = S.PRODUCT_GROUP,
             T.RANGE_CODE             = S.RANGE_CODE,
             T.COLLAR                 = S.COLLAR,
             T.SLEEVE                 = S.SLEEVE,
             T.LABEL_CODE             = S.LABEL_CODE,
             T.TERM                   = S.TERM,
             T.PRODUCT_CATEGORY_CODE  = S.PRODUCT_CATEGORY_CODE,
             T.SEASON_CODE            = S.SEASON_CODE,
             T.PRODUCT_GROUP_CODE     = S.PRODUCT_GROUP_CODE,
             T.STYLE_REF_NUMBER       = S.STYLE_REF_NUMBER,
             T.STYLE_NAME             = S.STYLE_NAME,
             T.SUB_CLASS              = S.SUB_CLASS,
             T.MINOR_CLASS            = S.MINOR_CLASS,
             T.HANG_FOLD              = S.HANG_FOLD,
             T.YIELD                  = S.YIELD,
             T.DISCONTINUE_DATE       = S.DISCONTINUE_DATE,
             T.CHANGE_DATE            = S.CHANGE_DATE,
             T.REPLENISHMENT_IND      = S.REPLENISHMENT_IND,
             T.ORI_STYLE_ID           = S.ORI_STYLE_ID,
             T.ORI_COMPANY_ID         = S.ORI_COMPANY_ID,
             T.ORI_BUYER_CLASS_ID     = S.ORI_BUYER_CLASS_ID,
             T.ORI_BUYER_SUBCLASS_ID  = S.ORI_BUYER_SUBCLASS_ID,
             T.ORI_MINOR_CLASS_ID     = S.ORI_MINOR_CLASS_ID,
             T.ORI_PRODUCTION_TYPE_ID = S.ORI_PRODUCTION_TYPE_ID,
             T.LOW_COST               = S.LOW_COST,
             T.LOW_RETAIL             = S.LOW_RETAIL,
             T.STANDARD_COST          = S.STANDARD_COST,
             T.VENDOR_REF_NUMBER      = S.VENDOR_REF_NUMBER,
             T.STATUS                 = S.STATUS,
             T.ORI_BUYER_COMPANY_ID   = S.ORI_BUYER_COMPANY_ID
    WHEN NOT MATCHED THEN
      INSERT
        (STYLE_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         STYLE_NUMBER,
         DESCRIPTION,
         DEPT_ID,
         VENDOR_ID,
         VENDOR_NAME,
         SIZE_RANGE,
         DEPT_TYPE,
         DIVISION_TYPE,
         CLASS_CODE,
         CLASS,
         PRODUCT_CATEGORY,
         CATEGORY,
         PRODUCTION_TYPE,
         FIBER_CONTENT,
         FABRICATION,
         PRODUCT_GROUP,
         RANGE_CODE,
         COLLAR,
         SLEEVE,
         LABEL_CODE,
         TERM,
         PRODUCT_CATEGORY_CODE,
         SEASON_CODE,
         PRODUCT_GROUP_CODE,
         STYLE_REF_NUMBER,
         STYLE_NAME,
         SUB_CLASS,
         MINOR_CLASS,
         HANG_FOLD,
         YIELD,
         DISCONTINUE_DATE,
         CHANGE_DATE,
         REPLENISHMENT_IND,
         ORI_STYLE_ID,
         ORI_COMPANY_ID,
         ORI_BUYER_CLASS_ID,
         ORI_BUYER_SUBCLASS_ID,
         ORI_MINOR_CLASS_ID,
         ORI_PRODUCTION_TYPE_ID,
         LOW_COST,
         LOW_RETAIL,
         STANDARD_COST,
         VENDOR_REF_NUMBER,
         STATUS,
         ORI_BUYER_COMPANY_ID)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_STYLE'),
         S.SOURCE_BUSKEY,
         S.TARGET_BUSKEY,
         S.STYLE_NUMBER,
         S.DESCRIPTION,
         S.DEPT_ID,
         S.VENDOR_ID,
         S.VENDOR_NAME,
         S.SIZE_RANGE,
         S.DEPT_TYPE,
         S.DIVISION_TYPE,
         S.CLASS_CODE,
         S.CLASS,
         S.PRODUCT_CATEGORY,
         S.CATEGORY,
         S.PRODUCTION_TYPE,
         S.FIBER_CONTENT,
         S.FABRICATION,
         S.PRODUCT_GROUP,
         S.RANGE_CODE,
         S.COLLAR,
         S.SLEEVE,
         S.LABEL_CODE,
         S.TERM,
         S.PRODUCT_CATEGORY_CODE,
         S.SEASON_CODE,
         S.PRODUCT_GROUP_CODE,
         S.STYLE_REF_NUMBER,
         S.STYLE_NAME,
         S.SUB_CLASS,
         S.MINOR_CLASS,
         S.HANG_FOLD,
         S.YIELD,
         S.DISCONTINUE_DATE,
         S.CHANGE_DATE,
         S.REPLENISHMENT_IND,
         S.ORI_STYLE_ID,
         S.ORI_COMPANY_ID,
         S.ORI_BUYER_CLASS_ID,
         S.ORI_BUYER_SUBCLASS_ID,
         S.ORI_MINOR_CLASS_ID,
         S.ORI_PRODUCTION_TYPE_ID,
         S.LOW_COST,
         S.LOW_RETAIL,
         S.STANDARD_COST,
         S.VENDOR_REF_NUMBER,
         S.STATUS,
         S.ORI_BUYER_COMPANY_ID);

    --6,DIM_STYLE_COLOR
    MERGE INTO DIM_STYLE_COLOR T
    USING (SELECT UPPER(S.SOURCE_BUSKEY || C_DELIMITER || SC.COLOR_CODE) SOURCE_BUSKEY,
                  UPPER(SC.STYLE_COLOR_ID) TARGET_BUSKEY,
                  S.STYLE_ID,
                  UPPER(SC.COLOR_NAME) COLOR_NAME,
                  UPPER(SC.COLOR_CODE) COLOR_CODE,
                  UPPER(NVL(SC.VENDOR_COLOR_CODE, C_DUMMY)) VENDOR_COLOR_CODE,
                  UPPER(NVL(CF.COLOR_FAMILY_NAME, C_DUMMY)) COLOR_FAMILY,
                  UPPER(NVL(SC.SHORT_COLOR_NAME, C_DUMMY)) SHORT_COLOR_NAME,
                  UPPER(NVL(SC.COLOR_GROUP, C_DUMMY)) COLOR_GROUP,
                  UPPER(NVL(P.PATTERN_NUMBER, C_DUMMY)) PATTERN,
                  UPPER(NVL(SC.ACCOUNT_EXCLUSIVE, C_DUMMY)) ACCOUNT_EXCLUSIVE,
                  NVL(SC.START_SHIP_DATE, TO_DATE('20991231', 'YYYYMMDD')) START_SHIP_DATE,
                  UPPER(NVL(SC.PRODUCT_TEAM,C_DUMMY)) PRODUCT_TEAM,
                  UPPER(NVL(SC.KEY_ITEM_INDICATOR, C_DUMMY)) KEY_ITEM_INDICATOR,
                  NVL(SC.PRODUCT_STOP_DATE, TO_DATE('20991231', 'YYYYMMDD')) PRODUCT_STOP_DATE,
                  UPPER(NVL(SC.OUTLET_STYLE_INDICATOR, C_DUMMY)) OUTLET_STYLE_INDICATOR,
                  UPPER(NVL(SC.MULTI_CHANNEL_IND, C_DUMMY)) MULTI_CHANNEL_IND,
                  SC.STYLE_COLOR_ID ORI_STYLE_COLOR_ID
             FROM STYLE_COLOR@MYLINKAPP SC
             LEFT JOIN DIM_STYLE S
               ON SC.STYLE_ID = S.ORI_STYLE_ID
             LEFT JOIN COLOR_FAMILY@MYLINKAPP CF
               ON SC.COLOR_FAMILY_ID = CF.COLOR_FAMILY_ID
             LEFT JOIN PATTERN@MYLINKAPP P
               ON SC.PATTERN_ID = P.PATTERN_ID) S
    ON (S.TARGET_BUSKEY = T.TARGET_BUSKEY)
    WHEN MATCHED THEN
      UPDATE
         SET T.SOURCE_BUSKEY          = S.SOURCE_BUSKEY,
             T.STYLE_ID               = S.STYLE_ID,
             T.COLOR_NAME             = S.COLOR_NAME,
             T.COLOR_CODE             = S.COLOR_CODE,
             T.VENDOR_COLOR_CODE      = S.VENDOR_COLOR_CODE,
             T.COLOR_FAMILY           = S.COLOR_FAMILY,
             T.SHORT_COLOR_NAME       = S.SHORT_COLOR_NAME,
             T.COLOR_GROUP            = S.COLOR_GROUP,
             T.PATTERN                = S.PATTERN,
             T.ACCOUNT_EXCLUSIVE      = S.ACCOUNT_EXCLUSIVE,
             T.START_SHIP_DATE        = S.START_SHIP_DATE,
             T.PRODUCT_TEAM           = S.PRODUCT_TEAM,
             T.KEY_ITEM_INDICATOR     = S.KEY_ITEM_INDICATOR,
             T.PRODUCT_STOP_DATE      = S.PRODUCT_STOP_DATE,
             T.OUTLET_STYLE_INDICATOR = S.OUTLET_STYLE_INDICATOR,
             T.MULTI_CHANNEL_IND      = S.MULTI_CHANNEL_IND,
             T.ORI_STYLE_COLOR_ID     = S.ORI_STYLE_COLOR_ID
    WHEN NOT MATCHED THEN
      INSERT
        (STYLE_COLOR_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         STYLE_ID,
         COLOR_NAME,
         COLOR_CODE,
         VENDOR_COLOR_CODE,
         COLOR_FAMILY,
         SHORT_COLOR_NAME,
         COLOR_GROUP,
         PATTERN,
         ACCOUNT_EXCLUSIVE,
         START_SHIP_DATE,
         PRODUCT_TEAM,
         KEY_ITEM_INDICATOR,
         PRODUCT_STOP_DATE,
         OUTLET_STYLE_INDICATOR,
         MULTI_CHANNEL_IND,
         ORI_STYLE_COLOR_ID)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_STYLE_COLOR'),
         S.SOURCE_BUSKEY,
         S.TARGET_BUSKEY,
         S.STYLE_ID,
         S.COLOR_NAME,
         S.COLOR_CODE,
         S.VENDOR_COLOR_CODE,
         S.COLOR_FAMILY,
         S.SHORT_COLOR_NAME,
         S.COLOR_GROUP,
         S.PATTERN,
         S.ACCOUNT_EXCLUSIVE,
         S.START_SHIP_DATE,
         S.PRODUCT_TEAM,
         S.KEY_ITEM_INDICATOR,
         S.PRODUCT_STOP_DATE,
         S.OUTLET_STYLE_INDICATOR,
         S.MULTI_CHANNEL_IND,
         S.ORI_STYLE_COLOR_ID);

    --7,DIM_STYLE_COLOR_SIZE
    MERGE INTO DIM_STYLE_COLOR_SIZE T
    USING (SELECT /*+full(B) full(SS) full(U)*/
            UPPER(SC.SOURCE_BUSKEY || C_DELIMITER || SS.SIZE_CODE) SOURCE_BUSKEY,
            UPPER(SC.ORI_STYLE_COLOR_ID)||C_DELIMITER||UPPER(SS.STYLE_SIZE_ID) TARGET_BUSKEY,
            SC.STYLE_COLOR_ID,
            UPPER(SS.SIZE_CODE) SIZE_CODE,
            NVL(SI.SIZE_ITEM_ID, 0) SIZE_ITEM_ID,
            NVL(U.UPC, C_DUMMY) UPC,
            NVL(U.ARTICLE_NUMBER, C_DUMMY) ARTICLE_NUMBER,
            SS.STYLE_SIZE_ID ORI_STYLE_SIZE_ID
             FROM STYLE_SIZE@MYLINKAPP SS
            INNER JOIN DIM_STYLE S
               ON SS.STYLE_ID = S.ORI_STYLE_ID
            INNER JOIN DIM_DEPT D
               ON S.DEPT_ID=D.DEPT_ID
            INNER JOIN DIM_STYLE_COLOR SC
               ON S.STYLE_ID = SC.STYLE_ID
             LEFT JOIN COMPANY_SIZE@MYLINKAPP B
               ON SS.COMPANY_SIZE_ID = B.COMPANY_SIZE_ID
           /*LEFT JOIN COMPANY_SIZE_DIMENSION1@MYLINKAPP D1
             ON B.COMPANY_SIZE_DIMENSION1_ID =
                D1.COMPANY_SIZE_DIMENSION1_ID
           LEFT JOIN COMPANY_SIZE_DIMENSION2@MYLINKAPP D2
             ON B.COMPANY_SIZE_DIMENSION2_ID =
                D2.COMPANY_SIZE_DIMENSION2_ID*/
             LEFT JOIN DIM_SIZE_RANGE SR
               ON D.SOURCE_BUSKEY||C_DELIMITER||UPPER(S.SIZE_RANGE) = SR.SOURCE_BUSKEY
             LEFT JOIN DIM_SIZE_ITEM SI
               ON SR.SIZE_RANGE_ID = SI.SIZE_RANGE_ID
              AND UPPER(SS.SIZE_CODE) = SI.SIZE_CODE
             LEFT JOIN UPC@MYLINKAPP U
               ON SS.STYLE_SIZE_ID = U.STYLE_SIZE_ID
              AND SC.ORI_STYLE_COLOR_ID = U.STYLE_COLOR_ID) S
    ON (S.TARGET_BUSKEY = T.TARGET_BUSKEY)
    WHEN MATCHED THEN
      UPDATE
         SET T.STYLE_COLOR_ID    = S.STYLE_COLOR_ID,
             T.SIZE_CODE         = S.SIZE_CODE,
             T.SIZE_ITEM_ID      = S.SIZE_ITEM_ID,
             T.UPC               = S.UPC,
             T.ARTICLE_NUMBER    = S.ARTICLE_NUMBER,
             T.ORI_STYLE_SIZE_ID = S.ORI_STYLE_SIZE_ID,
             T.SOURCE_BUSKEY     = S.SOURCE_BUSKEY
    WHEN NOT MATCHED THEN
      INSERT
        (STYLE_COLOR_SIZE_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         STYLE_COLOR_ID,
         SIZE_CODE,
         SIZE_ITEM_ID,
         UPC,
         ARTICLE_NUMBER,
         ORI_STYLE_SIZE_ID)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_STYLE_COLOR_SIZE'),
         S.SOURCE_BUSKEY,
         S.TARGET_BUSKEY,
         S.STYLE_COLOR_ID,
         S.SIZE_CODE,
         S.SIZE_ITEM_ID,
         S.UPC,
         S.ARTICLE_NUMBER,
         S.ORI_STYLE_SIZE_ID);

    --8,DIM_GP_GP
    MERGE INTO DIM_GP_GP T
    USING (SELECT DISTINCT GOLDEN_PACKAGE SOURCE_BUSKEY, GOLDEN_PACKAGE NAME
             FROM (SELECT PREPACK_CODE,
                          TYPE,
                          LISTAGG(SIZE_CODE || C_DELIMITER || PREPACK_QTY,
                                  ',') WITHIN GROUP(ORDER BY SIZE_CODE) OVER(PARTITION BY PREPACK_CODE, TYPE) GOLDEN_PACKAGE
                     FROM (SELECT DISTINCT UPPER(PREPACK_CODE) PREPACK_CODE,
                                           UPPER(TYPE) TYPE,
                                           UPPER(SIZE_CODE) SIZE_CODE,
                                           PREPACK_QTY
                             FROM ALLOCATE_PREPACK_UPLOAD@MYLINKAPP)) GP) S
    ON (S.SOURCE_BUSKEY = T.SOURCE_BUSKEY)
    WHEN MATCHED THEN
      UPDATE SET T.NAME = S.NAME
    WHEN NOT MATCHED THEN
      INSERT
        (GP_GP_ID, SOURCE_BUSKEY, NAME)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_GP_GP'), S.SOURCE_BUSKEY, S.NAME);

    --9,DIM_GP_SIZE
    MERGE INTO DIM_GP_SIZE T
    USING (SELECT DISTINCT D.SOURCE_BUSKEY || C_DELIMITER ||
                           UPPER(G.SIZE_CODE) SOURCE_BUSKEY,
                           NVL(D.GP_GP_ID, 0) GP_GP_ID,
                           UPPER(G.SIZE_CODE) SIZE_CODE,
                           G.PREPACK_QTY RATIO
             FROM (SELECT PREPACK_CODE,
                          TYPE,
                          SIZE_CODE,
                          PREPACK_QTY,
                          LISTAGG(SIZE_CODE || C_DELIMITER || PREPACK_QTY,
                                  ',') WITHIN GROUP(ORDER BY SIZE_CODE) OVER(PARTITION BY PREPACK_CODE, TYPE) SOURCE_BUSKEY
                     FROM (SELECT DISTINCT PREPACK_CODE,
                                           SIZE_CODE,
                                           PREPACK_QTY,
                                           TYPE
                             FROM ALLOCATE_PREPACK_UPLOAD@MYLINKAPP)) G
             LEFT JOIN DIM_GP_GP D
               ON UPPER(G.SOURCE_BUSKEY) = D.SOURCE_BUSKEY) S
    ON (S.SOURCE_BUSKEY = T.SOURCE_BUSKEY)
    WHEN MATCHED THEN
      UPDATE
         SET T.GP_GP_ID  = S.GP_GP_ID,
             T.SIZE_CODE = S.SIZE_CODE,
             T.RATIO     = S.RATIO
    WHEN NOT MATCHED THEN
      INSERT
        (GP_SIZE_ID, SOURCE_BUSKEY, GP_GP_ID, SIZE_CODE, RATIO)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_GP_SIZE'),
         S.SOURCE_BUSKEY,
         S.GP_GP_ID,
         S.SIZE_CODE,
         S.RATIO);

    --10,dim_style_color_size_gp
    MERGE INTO DIM_STYLE_COLOR_SIZE_GP T
    USING (SELECT GP_SIZE_ID,
                  STYLE_COLOR_SIZE_ID,
                  TARGET_BUSKEY,
                  SOURCE_BUSKEY,
                  PREPACK_CODE,
                  PREPACK_TYPE
             FROM (SELECT 0 GP_SIZE_ID, --OPEN STOCK
                          SCS.STYLE_COLOR_SIZE_ID,
                          SCS.SOURCE_BUSKEY || C_DELIMITER || C_DUMMY || C_DELIMITER || 'OPENSTOCK' SOURCE_BUSKEY,
                          SCS.TARGET_BUSKEY|| C_DELIMITER || C_DUMMY || C_DELIMITER || 'OPENSTOCK' TARGET_BUSKEY,
                          C_DUMMY PREPACK_CODE,
                          'OPENSTOCK' PREPACK_TYPE
                     FROM DIM_STYLE_COLOR_SIZE SCS
                   UNION ALL --GOLDGEN PACKAGE
                   SELECT /*+no_merge ordered full(sc) full(scs) full(gs)*/
                    GS.GP_SIZE_ID,
                    SCS.STYLE_COLOR_SIZE_ID,
                    SCS.SOURCE_BUSKEY || C_DELIMITER || O.PREPACK_CODE || C_DELIMITER || O.PREPACK_TYPE SOURCE_BUSKEY,
                    SCS.TARGET_BUSKEY|| C_DELIMITER || O.PREPACK_CODE || C_DELIMITER || O.PREPACK_TYPE TARGET_BUSKEY,
                    O.PREPACK_CODE,
                    O.PREPACK_TYPE
                     FROM (SELECT /*+no_merge full(A) full(B)*/
                            UPPER(A.PREPACK_CODE) PREPACK_CODE,
                            UPPER(A.TYPE) PREPACK_TYPE,
                            A.SIZE_CODE,
                            A.PREPACK_QTY,
                            A.STYLE_COLOR_ID,
                            LISTAGG(A.SIZE_CODE || C_DELIMITER ||
                                    A.PREPACK_QTY,
                                    ',') WITHIN GROUP(ORDER BY A.SIZE_CODE) OVER(PARTITION BY A.PREPACK_CODE, A.TYPE) SOURCE_BUSKEY
                             FROM ALLOCATE_PREPACK_UPLOAD@MYLINKAPP A
                             WHERE STYLE_COLOR_ID IS NOT NULL) O
                    INNER JOIN DIM_STYLE_COLOR SC
                       ON O.STYLE_COLOR_ID = SC.ORI_STYLE_COLOR_ID
                    INNER JOIN DIM_STYLE_COLOR_SIZE SCS
                       ON UPPER(SC.SOURCE_BUSKEY || C_DELIMITER ||
                                O.SIZE_CODE) = SCS.SOURCE_BUSKEY
                    INNER JOIN DIM_GP_SIZE GS
                       ON UPPER(O.SOURCE_BUSKEY || C_DELIMITER || O.SIZE_CODE) =
                          GS.SOURCE_BUSKEY)
            WHERE STYLE_COLOR_SIZE_ID > 0) S
    ON (S.TARGET_BUSKEY = T.TARGET_BUSKEY)
    WHEN NOT MATCHED THEN
      INSERT
        (STYLE_COLOR_SIZE_GP_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         GP_SIZE_ID,
         STYLE_COLOR_SIZE_ID,
         PREPACK_CODE,
         PREPACK_TYPE)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_STYLE_COLOR_SIZE_GP'),
         S.SOURCE_BUSKEY,
         S.TARGET_BUSKEY,
         S.GP_SIZE_ID,
         S.STYLE_COLOR_SIZE_ID,
         S.PREPACK_CODE,
         S.PREPACK_TYPE)
     WHEN MATCHED THEN
       UPDATE
       SET T.SOURCE_BUSKEY        =S.SOURCE_BUSKEY,
          T.GP_SIZE_ID            =S.GP_SIZE_ID,
          T.STYLE_COLOR_SIZE_ID   =S.STYLE_COLOR_SIZE_ID,
          T.PREPACK_CODE          =S.PREPACK_CODE,
          T.PREPACK_TYPE          =S.PREPACK_TYPE;

    COMMIT;

  END POP_DIM_STYLE;

  PROCEDURE POP_DIM_YEARSEASON(P_IS_INITIAL BOOLEAN DEFAULT TRUE) IS
  BEGIN

    IF P_IS_INITIAL THEN

      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_STYLE_YEAR_SEASON';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_YEAR_SEASON';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_YEAR_SEASON');
      RESET_SEQUENCE('SEQ_STYLE_YEAR_SEASON');

      INSERT INTO DIM_YEAR_SEASON
        (YEAR_SEASON_ID,
         SOURCE_BUSKEY,
         STYLE_YEAR,
         SEASON_NAME,
         ORI_SEASON_ID)
      VALUES
        (0, C_DUMMY, 0, C_DUMMY, 0);

      INSERT INTO DIM_STYLE_YEAR_SEASON
        (STYLE_YEAR_SEASON_ID,
         SOURCE_BUSKEY,
         STYLE_COLOR_ID,
         SMONTH_ID,
         YEAR_SEASON_ID,
         REAL_YEAR_SEASON_ID)
      VALUES
        (0, C_DUMMY, 0, 0, 0, 0);

    END IF;

    --1,DIM_YEAR_SEASON
    MERGE INTO DIM_YEAR_SEASON T
    USING (SELECT UPPER(TO_CHAR(O.STYLE_YEAR) || C_DELIMITER ||
                        O.SEASON_NAME) SOURCE_BUSKEY,
                  O.STYLE_YEAR,
                  UPPER(O.SEASON_NAME) SEASON_NAME,
                  NVL(STYLE_SEASON_ID, 0) ORI_SEASON_ID
             FROM (SELECT DISTINCT STYLE_YEAR, STYLE_SEASON_ID, B.SEASON_NAME
                     FROM STYLE_YEAR_SEASON@MYLINKAPP A
                     JOIN SEASON@MYLINKAPP B
                       ON A.STYLE_SEASON_ID = B.SEASON_ID
                   UNION
                   SELECT DISTINCT REAL_STYLE_YEAR,
                                   REAL_STYLE_SEASON_ID,
                                   B.SEASON_NAME
                     FROM STYLE_YEAR_SEASON@MYLINKAPP A
                     JOIN SEASON@MYLINKAPP B
                       ON A.REAL_STYLE_SEASON_ID = B.SEASON_ID) O) S
    ON (S.SOURCE_BUSKEY = T.SOURCE_BUSKEY)
    WHEN MATCHED THEN
      UPDATE
         SET T.STYLE_YEAR    = S.STYLE_YEAR,
             T.SEASON_NAME   = S.SEASON_NAME,
             T.ORI_SEASON_ID = S.ORI_SEASON_ID
    WHEN NOT MATCHED THEN
      INSERT
        (YEAR_SEASON_ID,
         SOURCE_BUSKEY,
         STYLE_YEAR,
         SEASON_NAME,
         ORI_SEASON_ID)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_YEAR_SEASON'),
         S.SOURCE_BUSKEY,
         S.STYLE_YEAR,
         S.SEASON_NAME,
         S.ORI_SEASON_ID);

    --2,DIM_STYLE_YEAR_SEASON

    MERGE INTO DIM_STYLE_YEAR_SEASON T
    USING(
      SELECT SC.STYLE_COLOR_ID,
             YS.SMONTH_ID,
             SC.SOURCE_BUSKEY || C_DELIMITER || NVL(YS.SMONTH_ID, '190001') SOURCE_BUSKEY,
             NVL(DYS1.YEAR_SEASON_ID, 0) YEAR_SEASON_ID,
             NVL(DYS2.YEAR_SEASON_ID, 0) REAL_YEAR_SEASON_ID
        FROM DIM_STYLE_COLOR SC
       INNER JOIN (SELECT /*+no_merge full(A) full(B1) full(B2)*/
                    A.STYLE_COLOR_ID,
                    A.YEAR * 100 + A.MONTH SMONTH_ID,
                    TO_CHAR(A.STYLE_YEAR) || C_DELIMITER ||
                    UPPER(B1.SEASON_NAME) YS_SOURCE_BUSKEY,
                    TO_CHAR(A.REAL_STYLE_YEAR) || C_DELIMITER ||
                    UPPER(B2.SEASON_NAME) REAL_YS_SOURCE_BUSKEY
                     FROM STYLE_YEAR_SEASON@MYLINKAPP A
                     LEFT JOIN SEASON@MYLINKAPP B1
                       ON A.STYLE_SEASON_ID = B1.SEASON_ID
                     LEFT JOIN SEASON@MYLINKAPP B2
                       ON A.REAL_STYLE_SEASON_ID = B2.SEASON_ID
                    GROUP BY A.STYLE_COLOR_ID,
                             A.YEAR * 100 + A.MONTH,
                             TO_CHAR(A.STYLE_YEAR) || C_DELIMITER ||
                             UPPER(B1.SEASON_NAME),
                             TO_CHAR(A.REAL_STYLE_YEAR) || C_DELIMITER ||
                             UPPER(B2.SEASON_NAME)) YS
          ON SC.ORI_STYLE_COLOR_ID = YS.STYLE_COLOR_ID
        LEFT JOIN DIM_YEAR_SEASON DYS1
          ON YS.YS_SOURCE_BUSKEY = DYS1.SOURCE_BUSKEY
        LEFT JOIN DIM_YEAR_SEASON DYS2
          ON YS.REAL_YS_SOURCE_BUSKEY = DYS2.SOURCE_BUSKEY
       WHERE SC.STYLE_COLOR_ID > 0) S
       ON (T.STYLE_COLOR_ID = S.STYLE_COLOR_ID AND T.SMONTH_ID=S.SMONTH_ID)
      WHEN MATCHED THEN UPDATE
         SET T.YEAR_SEASON_ID      = S.YEAR_SEASON_ID,
             T.REAL_YEAR_SEASON_ID = S.REAL_YEAR_SEASON_ID,
             T.SOURCE_BUSKEY       = S.SOURCE_BUSKEY
         WHERE T.YEAR_SEASON_ID <> S.YEAR_SEASON_ID
            OR T.REAL_YEAR_SEASON_ID <> S.REAL_YEAR_SEASON_ID
            OR T.SOURCE_BUSKEY <> S.SOURCE_BUSKEY
      WHEN NOT MATCHED THEN INSERT
          (STYLE_YEAR_SEASON_ID,
           SOURCE_BUSKEY,
           STYLE_COLOR_ID,
           SMONTH_ID,
           YEAR_SEASON_ID,
           REAL_YEAR_SEASON_ID)
         VALUES
           (GET_SEQ_NEXTVALUE('SEQ_STYLE_YEAR_SEASON'),
             S.SOURCE_BUSKEY,
             S.STYLE_COLOR_ID,
             S.SMONTH_ID,
             S.YEAR_SEASON_ID,
             S.REAL_YEAR_SEASON_ID);

    COMMIT;

  END POP_DIM_YEARSEASON;

  PROCEDURE POP_DIM_PROMOTION(P_IS_INITIAL BOOLEAN DEFAULT TRUE) IS
  BEGIN

    IF P_IS_INITIAL THEN

      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_SALES_STYLE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_PROMOTION';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_SALES_STYLE');
      RESET_SEQUENCE('SEQ_PROMOTION');

      INSERT INTO DIM_SALES_STYLE
        (SALES_STYLE_ID,
         SOURCE_BUSKEY,
         SALES_STYLE_CODE,
         SALES_STYLE_NAME,
         ORI_SALES_STYLE_ID)
      VALUES
        (0, C_DUMMY, C_DUMMY, C_DUMMY, 0);

      INSERT INTO DIM_PROMOTION
        (PROMOTION_ID,
         SOURCE_BUSKEY,
         SALES_STYLE_ID,
         GROUP_CODE,
         GROUP_NAME,
         TYPE,
         CODE,
         NAME,
         START_DATE,
         END_DATE,
         PROMO_PERCENT)
      VALUES
        (0,
         C_DUMMY,
         0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         TO_DATE('19000101','YYYYMMDD'),
         TO_DATE('99991231','YYYYMMDD'),
         0);

    END IF;

    MERGE INTO DIM_SALES_STYLE T
    USING (SELECT UPPER(SALES_STYLE_CODE) SOURCE_BUSKEY,
                  UPPER(SALES_STYLE_CODE) SALES_STYLE_CODE,
                  UPPER(NVL(SALES_STYLE_NAME, C_DUMMY)) SALES_STYLE_NAME,
                  SALES_STYLE_ID ORI_SALES_STYLE_ID
             FROM SALES_STYLE@MYLINKAPP) S
    ON (S.SOURCE_BUSKEY = T.SOURCE_BUSKEY)
    WHEN MATCHED THEN
      UPDATE
         SET T.SALES_STYLE_CODE   = S.SALES_STYLE_CODE,
             T.SALES_STYLE_NAME   = S.SALES_STYLE_NAME,
             T.ORI_SALES_STYLE_ID = S.ORI_SALES_STYLE_ID
    WHEN NOT MATCHED THEN
      INSERT
        (SALES_STYLE_ID,
         SOURCE_BUSKEY,
         SALES_STYLE_CODE,
         SALES_STYLE_NAME,
         ORI_SALES_STYLE_ID)
      VALUES
        (SEQ_SALES_STYLE.NEXTVAL,
         S.SOURCE_BUSKEY,
         S.SALES_STYLE_CODE,
         S.SALES_STYLE_NAME,
         S.ORI_SALES_STYLE_ID);


      MERGE INTO DIM_PROMOTION T
      USING (SELECT DISTINCT NVL(A.PROMO_GROUP_CODE,C_DUMMY) GROUP_CODE,
                             NVL(A.PROMO_GROUP_NAME,C_DUMMY) GROUP_NAME,
                             NVL(A.PROMO_TYPE,C_DUMMY)       TYPE,
                             A.PROMO_CODE       CODE,
                             NVL(A.PROMO_NAME,C_DUMMY)       NAME,
                             NVL(A.START_DATE,TO_DATE('19000101','YYYYMMDD')) START_DATE,
                             NVL(A.END_DATE,TO_DATE('99991231','YYYYMMDD')) END_DATE,
                             NVL(A.PROMO_PERCENT,0) PROMO_PERCENT,
                             NVL(B.SALES_STYLE_ID,0) SALES_STYLE_ID,
                             A.PROMO_CODE       SOURCE_BUSKEY
               FROM PROMO_TYPE@MYLINKAPP A
              LEFT JOIN DIM_SALES_STYLE B
                 ON TO_CHAR(A.SALES_STYLE_ID) = B.SOURCE_BUSKEY) S
      ON (T.SOURCE_BUSKEY = S.SOURCE_BUSKEY)
      WHEN MATCHED THEN
        UPDATE
           SET
               T.SALES_STYLE_ID = S.SALES_STYLE_ID,
               T.GROUP_CODE     = S.GROUP_CODE,
               T.GROUP_NAME     = S.GROUP_NAME,
               T.CODE           = S.CODE,
               T.NAME           = S.NAME,
               T.START_DATE     = S.START_DATE,
               T.END_DATE       = S.END_DATE,
               T.PROMO_PERCENT  = S.PROMO_PERCENT,
               T.TYPE           = S.TYPE
      WHEN NOT MATCHED THEN
        INSERT
          (T.PROMOTION_ID,
           T.SOURCE_BUSKEY,
           T.SALES_STYLE_ID,
           T.GROUP_CODE,
           T.GROUP_NAME,
           T.CODE,
           T.NAME,
           T.START_DATE,
           T.END_DATE,
           T.PROMO_PERCENT,
           T.TYPE)
        VALUES
          (GET_SEQ_NEXTVALUE('SEQ_PROMOTION'),
           S.SOURCE_BUSKEY,
           S.SALES_STYLE_ID,
           S.GROUP_CODE,
           S.GROUP_NAME,
           S.CODE,
           S.NAME,
           S.START_DATE,
           S.END_DATE,
           S.PROMO_PERCENT,
           S.TYPE);

    COMMIT;

  END POP_DIM_PROMOTION;

  PROCEDURE POP_DIM_PROD_ATTR_VALUE(P_IS_INITIAL                 BOOLEAN DEFAULT TRUE,
                                    P_VIEW_COL_COMMENTS          VARCHAR2,
                                    P_SOURCE_BUSKEY_HASH_STR     VARCHAR2,
                                    P_TARGET_BUSKEY_HASH_STR     VARCHAR2,
                                    P_DELIMITER                  VARCHAR2 DEFAULT ',',
                                    P_PROD_ATTR_ID               OUT DIM_PROD_ATTR.PROD_ATTR_ID%TYPE) IS
    L_PAV_SQL  VARCHAR2(32767);
    L_PAVR_SQL VARCHAR2(32767);

    L_SOURCE_BUSKEY_SQL VARCHAR2(4000):='UTILITY_PACK.GET_HASH_VAL(UPPER(:PROD_ATTR_ID)';
    L_TARGET_BUSKEY_SQL VARCHAR2(4000):='UTILITY_PACK.GET_HASH_VAL(UPPER(:PROD_ATTR_ID)';

    C_MAX_ATTR_NUM CONSTANT PLS_INTEGER:=20;

    TYPE REC_COL_COMMENTS IS RECORD(
      COLUMN_NAME VARCHAR2(30),
      COMMENTS    VARCHAR2(30));
    TYPE NNT_COL_COMMENTS IS TABLE OF REC_COL_COMMENTS;
    L_NNT_COL_COMMENTS NNT_COL_COMMENTS := NNT_COL_COMMENTS();
    L_PROD_ATTR_ID     PLS_INTEGER := 0;
    L_ATTR_COUNT       PLS_INTEGER := 0;

    L_VIEW             VARCHAR2(30);

  BEGIN

    SELECT T.DB_TAB_NAME INTO L_VIEW
    FROM META_DIM_HIERARCHIES T
    WHERE T.DIM_NAME=C_STYLE_DIM
    AND T.HIERARCHY_NAME=C_STYLE_PRIMARY_SIZE_HIER;

    L_PAV_SQL  := 'SELECT DISTINCT ';
    L_PAVR_SQL := 'SELECT A.PROD_ATTR_VALUE_ID,B.STYLE_COLOR_SIZE_ID' ||
                  CHR(10) || 'FROM DIM_PROD_ATTR_VALUE A' || CHR(10) ||
                  'INNER JOIN ' || L_VIEW || ' B' || CHR(10) || 'ON A.PROD_ATTR_ID=:1 ' ||
                  CHR(10);

    FOR ITEM IN (SELECT T.DB_COL_NAME COLUMN_NAME, T.BUSINESS_DESC COMMENTS
                   FROM META_DIM_HIER_LEVEL_ATTRS T
                  WHERE T.DIM_NAME=C_STYLE_DIM
                    AND T.HIERARCHY_NAME=C_STYLE_PRIMARY_SIZE_HIER
                    AND P_DELIMITER || UPPER(P_VIEW_COL_COMMENTS) ||
                        P_DELIMITER LIKE
                        '%' || P_DELIMITER || UPPER(T.BUSINESS_DESC) ||
                        P_DELIMITER || '%'
                  ORDER BY INSTR(P_DELIMITER ||UPPER(P_VIEW_COL_COMMENTS)|| P_DELIMITER,
                                 P_DELIMITER ||UPPER(T.BUSINESS_DESC)||P_DELIMITER)
                                 ) LOOP

      L_NNT_COL_COMMENTS.EXTEND();
      L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COLUMN_NAME := ITEM.COLUMN_NAME;
      L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COMMENTS := ITEM.COMMENTS;
    END LOOP;

    L_ATTR_COUNT := L_NNT_COL_COMMENTS.COUNT;

    FOR I IN 1 .. C_MAX_ATTR_NUM LOOP
      IF I <= L_ATTR_COUNT THEN
        L_PAV_SQL  := L_PAV_SQL || (CASE
                        WHEN I = 1 THEN
                         'TO_CHAR(' || L_NNT_COL_COMMENTS(I).COLUMN_NAME || ')'
                        ELSE
                         ',TO_CHAR(' || L_NNT_COL_COMMENTS(I).COLUMN_NAME || ')'
                      END) || ' PROD_ATTR_VALUE' || TO_CHAR(I) || CHR(10);
        L_PAVR_SQL := L_PAVR_SQL || 'AND A.PROD_ATTR_VALUE' || TO_CHAR(I) ||
                      '=UPPER(B.' || L_NNT_COL_COMMENTS(I).COLUMN_NAME || ')' ||
                      CHR(10);
      ELSE
        L_PAV_SQL := L_PAV_SQL || CASE
                       WHEN I = 1 THEN
                        ''''
                       ELSE
                        ','''
                     END || C_DUMMY || ''' PROD_ATTR_VALUE' || TO_CHAR(I) ||
                     CHR(10);
        L_NNT_COL_COMMENTS.EXTEND();
        L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COLUMN_NAME := C_DUMMY;
        L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COMMENTS := C_DUMMY;
      END IF;
    END LOOP;

--    L_PAV_SQL := L_PAV_SQL || ' FROM ' || L_VIEW;

    --  DBMS_OUTPUT.PUT_LINE('L_PAV_SQL:'||L_PAV_SQL);
    --  DBMS_OUTPUT.PUT_LINE('L_PAVR_SQL:'||L_PAVR_SQL);

    FOR ITEM IN (
      SELECT ID
      FROM (SELECT LEVEL ID FROM DUAL CONNECT BY LEVEL<=C_MAX_ATTR_NUM) O
      WHERE P_DELIMITER || UPPER(P_SOURCE_BUSKEY_HASH_STR) ||
                        P_DELIMITER LIKE
                        '%' || P_DELIMITER || UPPER(O.ID) ||
                        P_DELIMITER || '%'
      ORDER BY INSTR(UPPER(P_SOURCE_BUSKEY_HASH_STR),UPPER(O.ID))
    ) LOOP
      L_SOURCE_BUSKEY_SQL:=L_SOURCE_BUSKEY_SQL||'||'''||C_DELIMITER||'''||UPPER('||L_NNT_COL_COMMENTS(ITEM.ID).COLUMN_NAME||')';
    END LOOP;

    L_SOURCE_BUSKEY_SQL:=L_SOURCE_BUSKEY_SQL||')';

    FOR ITEM IN (
      SELECT ID
      FROM (SELECT LEVEL ID FROM DUAL CONNECT BY LEVEL<=C_MAX_ATTR_NUM) O
      WHERE P_DELIMITER || UPPER(P_TARGET_BUSKEY_HASH_STR) ||
                        P_DELIMITER LIKE
                        '%' || P_DELIMITER || UPPER(O.ID) ||
                        P_DELIMITER || '%'
      ORDER BY INSTR(UPPER(P_TARGET_BUSKEY_HASH_STR),UPPER(O.ID))
    ) LOOP
      L_TARGET_BUSKEY_SQL:=L_TARGET_BUSKEY_SQL||'||'''||C_DELIMITER||'''||UPPER('||L_NNT_COL_COMMENTS(ITEM.ID).COLUMN_NAME||')';
    END LOOP;

    L_TARGET_BUSKEY_SQL:=L_TARGET_BUSKEY_SQL||')';

    L_PAV_SQL := L_PAV_SQL ||','||L_SOURCE_BUSKEY_SQL||' SOURCE_BUSKEY,'||L_TARGET_BUSKEY_SQL ||' TARGET_BUSKEY FROM ' || L_VIEW;

    IF P_IS_INITIAL THEN

      DISABLE_ALL_CONS;
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_PROD_ATTR';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_PROD_ATTR_VALUE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_PROD_ATTR_VAL_REL';
      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_PROD_ATTR');
      RESET_SEQUENCE('SEQ_PROD_ATTR_VALUE');

      INSERT INTO DIM_PROD_ATTR
        (PROD_ATTR_ID,
         PROD_ATTR_NAME1,
         PROD_ATTR_NAME2,
         PROD_ATTR_NAME3,
         PROD_ATTR_NAME4,
         PROD_ATTR_NAME5,
         PROD_ATTR_NAME6,
         PROD_ATTR_NAME7,
         PROD_ATTR_NAME8,
         PROD_ATTR_NAME9,
         PROD_ATTR_NAME10,
         PROD_ATTR_NAME11,
         PROD_ATTR_NAME12,
         PROD_ATTR_NAME13,
         PROD_ATTR_NAME14,
         PROD_ATTR_NAME15,
         PROD_ATTR_NAME16,
         PROD_ATTR_NAME17,
         PROD_ATTR_NAME18,
         PROD_ATTR_NAME19,
         PROD_ATTR_NAME20,
         SOURCE_BUSKEY_HASH_STR,
         TARGET_BUSKEY_HASH_STR)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY);

      INSERT INTO DIM_PROD_ATTR_VALUE
        (PROD_ATTR_VALUE_ID,
         PROD_ATTR_ID,
         PROD_ATTR_VALUE1,
         PROD_ATTR_VALUE2,
         PROD_ATTR_VALUE3,
         PROD_ATTR_VALUE4,
         PROD_ATTR_VALUE5,
         PROD_ATTR_VALUE6,
         PROD_ATTR_VALUE7,
         PROD_ATTR_VALUE8,
         PROD_ATTR_VALUE9,
         PROD_ATTR_VALUE10,
         PROD_ATTR_VALUE11,
         PROD_ATTR_VALUE12,
         PROD_ATTR_VALUE13,
         PROD_ATTR_VALUE14,
         PROD_ATTR_VALUE15,
         PROD_ATTR_VALUE16,
         PROD_ATTR_VALUE17,
         PROD_ATTR_VALUE18,
         PROD_ATTR_VALUE19,
         PROD_ATTR_VALUE20,
         SOURCE_BUSKEY,
         TARGET_BUSKEY)
      VALUES
        (0,
         0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY);

    END IF;

    BEGIN

      SELECT PROD_ATTR_ID
        INTO L_PROD_ATTR_ID
        FROM DIM_PROD_ATTR
       WHERE PROD_ATTR_NAME1 = L_NNT_COL_COMMENTS(1).COMMENTS
         AND PROD_ATTR_NAME2 = L_NNT_COL_COMMENTS(2).COMMENTS
         AND PROD_ATTR_NAME3 = L_NNT_COL_COMMENTS(3).COMMENTS
         AND PROD_ATTR_NAME4 = L_NNT_COL_COMMENTS(4).COMMENTS
         AND PROD_ATTR_NAME5 = L_NNT_COL_COMMENTS(5).COMMENTS
         AND PROD_ATTR_NAME6 = L_NNT_COL_COMMENTS(6).COMMENTS
         AND PROD_ATTR_NAME7 = L_NNT_COL_COMMENTS(7).COMMENTS
         AND PROD_ATTR_NAME8 = L_NNT_COL_COMMENTS(8).COMMENTS
         AND PROD_ATTR_NAME9 = L_NNT_COL_COMMENTS(9).COMMENTS
         AND PROD_ATTR_NAME10 = L_NNT_COL_COMMENTS(10).COMMENTS
         AND PROD_ATTR_NAME11 = L_NNT_COL_COMMENTS(11).COMMENTS
         AND PROD_ATTR_NAME12 = L_NNT_COL_COMMENTS(12).COMMENTS
         AND PROD_ATTR_NAME13 = L_NNT_COL_COMMENTS(13).COMMENTS
         AND PROD_ATTR_NAME14 = L_NNT_COL_COMMENTS(14).COMMENTS
         AND PROD_ATTR_NAME15 = L_NNT_COL_COMMENTS(15).COMMENTS
         AND PROD_ATTR_NAME16 = L_NNT_COL_COMMENTS(16).COMMENTS
         AND PROD_ATTR_NAME17 = L_NNT_COL_COMMENTS(17).COMMENTS
         AND PROD_ATTR_NAME18 = L_NNT_COL_COMMENTS(18).COMMENTS
         AND PROD_ATTR_NAME19 = L_NNT_COL_COMMENTS(19).COMMENTS
         AND PROD_ATTR_NAME20 = L_NNT_COL_COMMENTS(20).COMMENTS;

        IF L_PROD_ATTR_ID>0 THEN
        EXECUTE IMMEDIATE 'MERGE INTO DIM_PROD_ATTR_VALUE T
        USING(
              SELECT :PROD_ATTR_ID PROD_ATTR_ID,
                    PROD_ATTR_VALUE1 ,
                    PROD_ATTR_VALUE2 ,
                    PROD_ATTR_VALUE3 ,
                    PROD_ATTR_VALUE4 ,
                    PROD_ATTR_VALUE5 ,
                    PROD_ATTR_VALUE6 ,
                    PROD_ATTR_VALUE7 ,
                    PROD_ATTR_VALUE8 ,
                    PROD_ATTR_VALUE9 ,
                    PROD_ATTR_VALUE10,
                    PROD_ATTR_VALUE11,
                    PROD_ATTR_VALUE12,
                    PROD_ATTR_VALUE13,
                    PROD_ATTR_VALUE14,
                    PROD_ATTR_VALUE15,
                    PROD_ATTR_VALUE16,
                    PROD_ATTR_VALUE17,
                    PROD_ATTR_VALUE18,
                    PROD_ATTR_VALUE19,
                    PROD_ATTR_VALUE20,
                    SOURCE_BUSKEY,
                    TARGET_BUSKEY
                    FROM (' || L_PAV_SQL || ')
        ) S
        ON (S.PROD_ATTR_ID  = T.PROD_ATTR_ID AND
            S.TARGET_BUSKEY = T.TARGET_BUSKEY
        )
        WHEN NOT MATCHED THEN INSERT(
            PROD_ATTR_VALUE_ID,
            PROD_ATTR_ID,
            PROD_ATTR_VALUE1,
            PROD_ATTR_VALUE2,
            PROD_ATTR_VALUE3,
            PROD_ATTR_VALUE4,
            PROD_ATTR_VALUE5,
            PROD_ATTR_VALUE6,
            PROD_ATTR_VALUE7,
            PROD_ATTR_VALUE8,
            PROD_ATTR_VALUE9,
            PROD_ATTR_VALUE10,
            PROD_ATTR_VALUE11,
            PROD_ATTR_VALUE12,
            PROD_ATTR_VALUE13,
            PROD_ATTR_VALUE14,
            PROD_ATTR_VALUE15,
            PROD_ATTR_VALUE16,
            PROD_ATTR_VALUE17,
            PROD_ATTR_VALUE18,
            PROD_ATTR_VALUE19,
            PROD_ATTR_VALUE20,
            SOURCE_BUSKEY,
            TARGET_BUSKEY
          ) VALUES(
          DIM_POPULATE_PACK.GET_SEQ_NEXTVALUE(''SEQ_PROD_ATTR_VALUE''),
            S.PROD_ATTR_ID,
            S.PROD_ATTR_VALUE1,
            S.PROD_ATTR_VALUE2,
            S.PROD_ATTR_VALUE3,
            S.PROD_ATTR_VALUE4,
            S.PROD_ATTR_VALUE5,
            S.PROD_ATTR_VALUE6,
            S.PROD_ATTR_VALUE7,
            S.PROD_ATTR_VALUE8,
            S.PROD_ATTR_VALUE9,
            S.PROD_ATTR_VALUE10,
            S.PROD_ATTR_VALUE11,
            S.PROD_ATTR_VALUE12,
            S.PROD_ATTR_VALUE13,
            S.PROD_ATTR_VALUE14,
            S.PROD_ATTR_VALUE15,
            S.PROD_ATTR_VALUE16,
            S.PROD_ATTR_VALUE17,
            S.PROD_ATTR_VALUE18,
            S.PROD_ATTR_VALUE19,
            S.PROD_ATTR_VALUE20,
            S.SOURCE_BUSKEY,
            S.TARGET_BUSKEY)
        WHEN MATCHED THEN UPDATE
          SET
            T.PROD_ATTR_VALUE1 =S.PROD_ATTR_VALUE1 ,
            T.PROD_ATTR_VALUE2 =S.PROD_ATTR_VALUE2 ,
            T.PROD_ATTR_VALUE3 =S.PROD_ATTR_VALUE3 ,
            T.PROD_ATTR_VALUE4 =S.PROD_ATTR_VALUE4 ,
            T.PROD_ATTR_VALUE5 =S.PROD_ATTR_VALUE5 ,
            T.PROD_ATTR_VALUE6 =S.PROD_ATTR_VALUE6 ,
            T.PROD_ATTR_VALUE7 =S.PROD_ATTR_VALUE7 ,
            T.PROD_ATTR_VALUE8 =S.PROD_ATTR_VALUE8 ,
            T.PROD_ATTR_VALUE9 =S.PROD_ATTR_VALUE9 ,
            T.PROD_ATTR_VALUE10=S.PROD_ATTR_VALUE10,
            T.PROD_ATTR_VALUE11=S.PROD_ATTR_VALUE11,
            T.PROD_ATTR_VALUE12=S.PROD_ATTR_VALUE12,
            T.PROD_ATTR_VALUE13=S.PROD_ATTR_VALUE13,
            T.PROD_ATTR_VALUE14=S.PROD_ATTR_VALUE14,
            T.PROD_ATTR_VALUE15=S.PROD_ATTR_VALUE15,
            T.PROD_ATTR_VALUE16=S.PROD_ATTR_VALUE16,
            T.PROD_ATTR_VALUE17=S.PROD_ATTR_VALUE17,
            T.PROD_ATTR_VALUE18=S.PROD_ATTR_VALUE18,
            T.PROD_ATTR_VALUE19=S.PROD_ATTR_VALUE19,
            T.PROD_ATTR_VALUE20=S.PROD_ATTR_VALUE20,
            T.SOURCE_BUSKEY    =S.SOURCE_BUSKEY' USING L_PROD_ATTR_ID,L_PROD_ATTR_ID,L_PROD_ATTR_ID;

        EXECUTE IMMEDIATE
'BEGIN
  DELETE FROM DIM_PROD_ATTR_VAL_REL R
  WHERE EXISTS(SELECT 1 FROM DIM_PROD_ATTR_VALUE V
        WHERE R.PROD_ATTR_VALUE_ID=V.PROD_ATTR_VALUE_ID
        AND V.PROD_ATTR_ID=:PROD_ATTR_ID);
  MERGE INTO DIM_PROD_ATTR_VAL_REL T
  USING(' || L_PAVR_SQL || ') S
  ON (T.PROD_ATTR_VALUE_ID=S.PROD_ATTR_VALUE_ID AND T.STYLE_COLOR_SIZE_ID=S.STYLE_COLOR_SIZE_ID)
  WHEN NOT MATCHED THEN INSERT(PROD_ATTR_VALUE_ID,STYLE_COLOR_SIZE_ID)
    VALUES(S.PROD_ATTR_VALUE_ID,S.STYLE_COLOR_SIZE_ID);
END;' USING L_PROD_ATTR_ID,L_PROD_ATTR_ID;

      END IF;

      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          BEGIN

            INSERT INTO DIM_PROD_ATTR
              (PROD_ATTR_ID,
               PROD_ATTR_NAME1,
               PROD_ATTR_NAME2,
               PROD_ATTR_NAME3,
               PROD_ATTR_NAME4,
               PROD_ATTR_NAME5,
               PROD_ATTR_NAME6,
               PROD_ATTR_NAME7,
               PROD_ATTR_NAME8,
               PROD_ATTR_NAME9,
               PROD_ATTR_NAME10,
               PROD_ATTR_NAME11,
               PROD_ATTR_NAME12,
               PROD_ATTR_NAME13,
               PROD_ATTR_NAME14,
               PROD_ATTR_NAME15,
               PROD_ATTR_NAME16,
               PROD_ATTR_NAME17,
               PROD_ATTR_NAME18,
               PROD_ATTR_NAME19,
               PROD_ATTR_NAME20,
               SOURCE_BUSKEY_HASH_STR,
               TARGET_BUSKEY_HASH_STR)
            VALUES
              (SEQ_PROD_ATTR.NEXTVAL,
               L_NNT_COL_COMMENTS   (1).COMMENTS,
               L_NNT_COL_COMMENTS   (2).COMMENTS,
               L_NNT_COL_COMMENTS   (3).COMMENTS,
               L_NNT_COL_COMMENTS   (4).COMMENTS,
               L_NNT_COL_COMMENTS   (5).COMMENTS,
               L_NNT_COL_COMMENTS   (6).COMMENTS,
               L_NNT_COL_COMMENTS   (7).COMMENTS,
               L_NNT_COL_COMMENTS   (8).COMMENTS,
               L_NNT_COL_COMMENTS   (9).COMMENTS,
               L_NNT_COL_COMMENTS   (10).COMMENTS,
               L_NNT_COL_COMMENTS   (11).COMMENTS,
               L_NNT_COL_COMMENTS   (12).COMMENTS,
               L_NNT_COL_COMMENTS   (13).COMMENTS,
               L_NNT_COL_COMMENTS   (14).COMMENTS,
               L_NNT_COL_COMMENTS   (15).COMMENTS,
               L_NNT_COL_COMMENTS   (16).COMMENTS,
               L_NNT_COL_COMMENTS   (17).COMMENTS,
               L_NNT_COL_COMMENTS   (18).COMMENTS,
               L_NNT_COL_COMMENTS   (19).COMMENTS,
               L_NNT_COL_COMMENTS   (20).COMMENTS,
               P_SOURCE_BUSKEY_HASH_STR,
               P_TARGET_BUSKEY_HASH_STR)
            RETURNING PROD_ATTR_ID INTO L_PROD_ATTR_ID;

            IF L_PROD_ATTR_ID > 0 THEN
              EXECUTE IMMEDIATE 'INSERT INTO DIM_PROD_ATTR_VALUE(
                      PROD_ATTR_VALUE_ID,
                      PROD_ATTR_ID,
                      PROD_ATTR_VALUE1,
                      PROD_ATTR_VALUE2,
                      PROD_ATTR_VALUE3,
                      PROD_ATTR_VALUE4,
                      PROD_ATTR_VALUE5,
                      PROD_ATTR_VALUE6,
                      PROD_ATTR_VALUE7,
                      PROD_ATTR_VALUE8,
                      PROD_ATTR_VALUE9,
                      PROD_ATTR_VALUE10,
                      PROD_ATTR_VALUE11,
                      PROD_ATTR_VALUE12,
                      PROD_ATTR_VALUE13,
                      PROD_ATTR_VALUE14,
                      PROD_ATTR_VALUE15,
                      PROD_ATTR_VALUE16,
                      PROD_ATTR_VALUE17,
                      PROD_ATTR_VALUE18,
                      PROD_ATTR_VALUE19,
                      PROD_ATTR_VALUE20,
                      SOURCE_BUSKEY,
                      TARGET_BUSKEY)
                  SELECT SEQ_PROD_ATTR_VALUE.NEXTVAL,
                         :PROD_ATTR_ID PROD_ATTR_ID,
                         PROD_ATTR_VALUE1,
                         PROD_ATTR_VALUE2,
                         PROD_ATTR_VALUE3,
                         PROD_ATTR_VALUE4,
                         PROD_ATTR_VALUE5,
                         PROD_ATTR_VALUE6,
                         PROD_ATTR_VALUE7,
                         PROD_ATTR_VALUE8,
                         PROD_ATTR_VALUE9,
                         PROD_ATTR_VALUE10,
                         PROD_ATTR_VALUE11,
                         PROD_ATTR_VALUE12,
                         PROD_ATTR_VALUE13,
                         PROD_ATTR_VALUE14,
                         PROD_ATTR_VALUE15,
                         PROD_ATTR_VALUE16,
                         PROD_ATTR_VALUE17,
                         PROD_ATTR_VALUE18,
                         PROD_ATTR_VALUE19,
                         PROD_ATTR_VALUE20,
                         SOURCE_BUSKEY,
                         TARGET_BUSKEY
                   FROM ( ' || L_PAV_SQL ||
                                CHR(10) || ') O' USING L_PROD_ATTR_ID, L_PROD_ATTR_ID, L_PROD_ATTR_ID;

              EXECUTE IMMEDIATE 'INSERT INTO DIM_PROD_ATTR_VAL_REL(PROD_ATTR_VALUE_ID,STYLE_COLOR_SIZE_ID)' ||
                    CHR(10) || L_PAVR_SQL || CHR(10) USING L_PROD_ATTR_ID;

            END IF;
          END;

    END;

    COMMIT;

    P_PROD_ATTR_ID:=L_PROD_ATTR_ID;

  END POP_DIM_PROD_ATTR_VALUE;

  PROCEDURE POP_DIM_YEARSEASON_ATTR_VALUE(P_IS_INITIAL                 BOOLEAN DEFAULT TRUE,
                                          P_VIEW_COL_COMMENTS          VARCHAR2,
                                          P_SOURCE_BUSKEY_HASH_STR     VARCHAR2,
                                          P_TARGET_BUSKEY_HASH_STR     VARCHAR2,
                                          P_DELIMITER                  VARCHAR2 DEFAULT ',',
                                          P_YEARSEASON_ATTR_ID         OUT DIM_YEARSEASON_ATTR.YEARSEASON_ATTR_ID%TYPE) IS
    L_PAV_SQL  VARCHAR2(32767);
    L_PAVR_SQL VARCHAR2(32767);

    L_SOURCE_BUSKEY_SQL VARCHAR2(4000):='UTILITY_PACK.GET_HASH_VAL(UPPER(:YEARSEASON_ATTR_ID)';
    L_TARGET_BUSKEY_SQL VARCHAR2(4000):='UTILITY_PACK.GET_HASH_VAL(UPPER(:YEARSEASON_ATTR_ID)';

    C_MAX_ATTR_NUM CONSTANT PLS_INTEGER:=20;

    TYPE REC_COL_COMMENTS IS RECORD(
      COLUMN_NAME VARCHAR2(30),
      COMMENTS    VARCHAR2(30));
    TYPE NNT_COL_COMMENTS IS TABLE OF REC_COL_COMMENTS;
    L_NNT_COL_COMMENTS   NNT_COL_COMMENTS := NNT_COL_COMMENTS();
    L_YEARSEASON_ATTR_ID PLS_INTEGER := 0;
    L_ATTR_COUNT         PLS_INTEGER := 0;
    L_VIEW               VARCHAR2(30);

  BEGIN

    SELECT T.DB_TAB_NAME INTO L_VIEW
    FROM META_DIM_HIERARCHIES T
    WHERE T.DIM_NAME=C_YEARSEASON_DIM
    AND T.HIERARCHY_NAME=C_YEARSEASON_PRIMARY_SIZE_HIER;

    L_PAV_SQL  := 'SELECT DISTINCT ';
    L_PAVR_SQL := 'SELECT A.YEARSEASON_ATTR_VALUE_ID,B.STYLE_YEAR_SEASON_ID' ||
                  CHR(10) || 'FROM DIM_YEARSEASON_ATTR_VALUE A' || CHR(10) ||
                  'INNER JOIN ' || L_VIEW || ' B' || CHR(10) || 'ON A.YEARSEASON_ATTR_ID=:1 ' ||
                  CHR(10);

    FOR ITEM IN (SELECT T.DB_COL_NAME COLUMN_NAME, T.BUSINESS_DESC COMMENTS
                   FROM META_DIM_HIER_LEVEL_ATTRS T
                  WHERE T.DIM_NAME = C_YEARSEASON_DIM
                    AND T.HIERARCHY_NAME = C_YEARSEASON_PRIMARY_SIZE_HIER
                    AND P_DELIMITER || UPPER(P_VIEW_COL_COMMENTS) ||
                        P_DELIMITER LIKE
                        '%' || P_DELIMITER || UPPER(T.BUSINESS_DESC) ||
                        P_DELIMITER || '%'
                  ORDER BY INSTR(P_DELIMITER ||UPPER(P_VIEW_COL_COMMENTS)|| P_DELIMITER,
                                 P_DELIMITER ||UPPER(T.BUSINESS_DESC)||P_DELIMITER)
                  ) LOOP

      L_NNT_COL_COMMENTS.EXTEND();
      L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COLUMN_NAME := ITEM.COLUMN_NAME;
      L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COMMENTS := ITEM.COMMENTS;
    END LOOP;

    L_ATTR_COUNT := L_NNT_COL_COMMENTS.COUNT;

    FOR I IN 1 .. C_MAX_ATTR_NUM LOOP
      IF I <= L_ATTR_COUNT THEN
        L_PAV_SQL  := L_PAV_SQL || (CASE
                        WHEN I = 1 THEN
                         'TO_CHAR(' || L_NNT_COL_COMMENTS(I).COLUMN_NAME || ')'
                        ELSE
                         ',TO_CHAR(' || L_NNT_COL_COMMENTS(I).COLUMN_NAME || ')'
                      END) || ' YEARSEASON_ATTR_VALUE' || TO_CHAR(I) ||
                      CHR(10);
        L_PAVR_SQL := L_PAVR_SQL || 'AND A.YEARSEASON_ATTR_VALUE' ||
                      TO_CHAR(I) || '=UPPER(B.' || L_NNT_COL_COMMENTS(I)
                     .COLUMN_NAME || ')' || CHR(10);
      ELSE
        L_PAV_SQL := L_PAV_SQL || CASE
                       WHEN I = 1 THEN
                        ''''
                       ELSE
                        ','''
                     END || C_DUMMY || ''' YEARSEASON_ATTR_VALUE' || TO_CHAR(I) ||
                     CHR(10);
        L_NNT_COL_COMMENTS.EXTEND();
        L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COLUMN_NAME := C_DUMMY;
        L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COMMENTS := C_DUMMY;
      END IF;
    END LOOP;

    --  L_PAV_SQL := L_PAV_SQL || ' FROM ' || L_VIEW;

    --  DBMS_OUTPUT.PUT_LINE('L_PAV_SQL:'||L_PAV_SQL);
    --  DBMS_OUTPUT.PUT_LINE('L_PAVR_SQL:'||L_PAVR_SQL);

    FOR ITEM IN (
      SELECT ID
      FROM (SELECT LEVEL ID FROM DUAL CONNECT BY LEVEL<=C_MAX_ATTR_NUM) O
      WHERE P_DELIMITER || UPPER(P_SOURCE_BUSKEY_HASH_STR) ||
                        P_DELIMITER LIKE
                        '%' || P_DELIMITER || UPPER(O.ID) ||
                        P_DELIMITER || '%'
      ORDER BY INSTR(UPPER(P_SOURCE_BUSKEY_HASH_STR),UPPER(O.ID))
    ) LOOP
      L_SOURCE_BUSKEY_SQL:=L_SOURCE_BUSKEY_SQL||'||'''||C_DELIMITER||'''||UPPER('||L_NNT_COL_COMMENTS(ITEM.ID).COLUMN_NAME||')';
    END LOOP;

    L_SOURCE_BUSKEY_SQL:=L_SOURCE_BUSKEY_SQL||')';

    FOR ITEM IN (
      SELECT ID
      FROM (SELECT LEVEL ID FROM DUAL CONNECT BY LEVEL<=C_MAX_ATTR_NUM) O
      WHERE P_DELIMITER || UPPER(P_TARGET_BUSKEY_HASH_STR) ||
                        P_DELIMITER LIKE
                        '%' || P_DELIMITER || UPPER(O.ID) ||
                        P_DELIMITER || '%'
      ORDER BY INSTR(UPPER(P_TARGET_BUSKEY_HASH_STR),UPPER(O.ID))
    ) LOOP
      L_TARGET_BUSKEY_SQL:=L_TARGET_BUSKEY_SQL||'||'''||C_DELIMITER||'''||UPPER('||L_NNT_COL_COMMENTS(ITEM.ID).COLUMN_NAME||')';
    END LOOP;

    L_TARGET_BUSKEY_SQL:=L_TARGET_BUSKEY_SQL||')';

    L_PAV_SQL := L_PAV_SQL ||','||L_SOURCE_BUSKEY_SQL||' SOURCE_BUSKEY,'||L_TARGET_BUSKEY_SQL ||' TARGET_BUSKEY FROM ' || L_VIEW;



    IF P_IS_INITIAL THEN

      DISABLE_ALL_CONS;
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_YEARSEASON_ATTR';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_YEARSEASON_ATTR_VALUE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_YEARSEASON_ATTR_VAL_REL';
      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_YEARSEASON_ATTR');
      RESET_SEQUENCE('SEQ_YEARSEASON_ATTR_VALUE');

      INSERT INTO DIM_YEARSEASON_ATTR
        (YEARSEASON_ATTR_ID,
         YEARSEASON_ATTR_NAME1,
         YEARSEASON_ATTR_NAME2,
         YEARSEASON_ATTR_NAME3,
         YEARSEASON_ATTR_NAME4,
         YEARSEASON_ATTR_NAME5,
         YEARSEASON_ATTR_NAME6,
         YEARSEASON_ATTR_NAME7,
         YEARSEASON_ATTR_NAME8,
         YEARSEASON_ATTR_NAME9,
         YEARSEASON_ATTR_NAME10,
         YEARSEASON_ATTR_NAME11,
         YEARSEASON_ATTR_NAME12,
         YEARSEASON_ATTR_NAME13,
         YEARSEASON_ATTR_NAME14,
         YEARSEASON_ATTR_NAME15,
         YEARSEASON_ATTR_NAME16,
         YEARSEASON_ATTR_NAME17,
         YEARSEASON_ATTR_NAME18,
         YEARSEASON_ATTR_NAME19,
         YEARSEASON_ATTR_NAME20,
         SOURCE_BUSKEY_HASH_STR,
         TARGET_BUSKEY_HASH_STR
         )
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY
         );

      INSERT INTO DIM_YEARSEASON_ATTR_VALUE
        (YEARSEASON_ATTR_VALUE_ID,
         YEARSEASON_ATTR_ID,
         YEARSEASON_ATTR_VALUE1,
         YEARSEASON_ATTR_VALUE2,
         YEARSEASON_ATTR_VALUE3,
         YEARSEASON_ATTR_VALUE4,
         YEARSEASON_ATTR_VALUE5,
         YEARSEASON_ATTR_VALUE6,
         YEARSEASON_ATTR_VALUE7,
         YEARSEASON_ATTR_VALUE8,
         YEARSEASON_ATTR_VALUE9,
         YEARSEASON_ATTR_VALUE10,
         YEARSEASON_ATTR_VALUE11,
         YEARSEASON_ATTR_VALUE12,
         YEARSEASON_ATTR_VALUE13,
         YEARSEASON_ATTR_VALUE14,
         YEARSEASON_ATTR_VALUE15,
         YEARSEASON_ATTR_VALUE16,
         YEARSEASON_ATTR_VALUE17,
         YEARSEASON_ATTR_VALUE18,
         YEARSEASON_ATTR_VALUE19,
         YEARSEASON_ATTR_VALUE20,
         SOURCE_BUSKEY,
         TARGET_BUSKEY)
      VALUES
        (0,
         0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY
         );

    END IF;

    BEGIN

      SELECT YEARSEASON_ATTR_ID
        INTO L_YEARSEASON_ATTR_ID
        FROM DIM_YEARSEASON_ATTR
       WHERE YEARSEASON_ATTR_NAME1 = L_NNT_COL_COMMENTS(1).COMMENTS
         AND YEARSEASON_ATTR_NAME2 = L_NNT_COL_COMMENTS(2).COMMENTS
         AND YEARSEASON_ATTR_NAME3 = L_NNT_COL_COMMENTS(3).COMMENTS
         AND YEARSEASON_ATTR_NAME4 = L_NNT_COL_COMMENTS(4).COMMENTS
         AND YEARSEASON_ATTR_NAME5 = L_NNT_COL_COMMENTS(5).COMMENTS
         AND YEARSEASON_ATTR_NAME6 = L_NNT_COL_COMMENTS(6).COMMENTS
         AND YEARSEASON_ATTR_NAME7 = L_NNT_COL_COMMENTS(7).COMMENTS
         AND YEARSEASON_ATTR_NAME8 = L_NNT_COL_COMMENTS(8).COMMENTS
         AND YEARSEASON_ATTR_NAME9 = L_NNT_COL_COMMENTS(9).COMMENTS
         AND YEARSEASON_ATTR_NAME10 = L_NNT_COL_COMMENTS(10).COMMENTS
         AND YEARSEASON_ATTR_NAME11 = L_NNT_COL_COMMENTS(11).COMMENTS
         AND YEARSEASON_ATTR_NAME12 = L_NNT_COL_COMMENTS(12).COMMENTS
         AND YEARSEASON_ATTR_NAME13 = L_NNT_COL_COMMENTS(13).COMMENTS
         AND YEARSEASON_ATTR_NAME14 = L_NNT_COL_COMMENTS(14).COMMENTS
         AND YEARSEASON_ATTR_NAME15 = L_NNT_COL_COMMENTS(15).COMMENTS
         AND YEARSEASON_ATTR_NAME16 = L_NNT_COL_COMMENTS(16).COMMENTS
         AND YEARSEASON_ATTR_NAME17 = L_NNT_COL_COMMENTS(17).COMMENTS
         AND YEARSEASON_ATTR_NAME18 = L_NNT_COL_COMMENTS(18).COMMENTS
         AND YEARSEASON_ATTR_NAME19 = L_NNT_COL_COMMENTS(19).COMMENTS
         AND YEARSEASON_ATTR_NAME20 = L_NNT_COL_COMMENTS(20).COMMENTS;

      IF L_YEARSEASON_ATTR_ID>0 THEN
        EXECUTE IMMEDIATE 'MERGE INTO DIM_YEARSEASON_ATTR_VALUE T
        USING(
              SELECT :YEARSEASON_ATTR_ID YEARSEASON_ATTR_ID,
                    YEARSEASON_ATTR_VALUE1 ,
                    YEARSEASON_ATTR_VALUE2 ,
                    YEARSEASON_ATTR_VALUE3 ,
                    YEARSEASON_ATTR_VALUE4 ,
                    YEARSEASON_ATTR_VALUE5 ,
                    YEARSEASON_ATTR_VALUE6 ,
                    YEARSEASON_ATTR_VALUE7 ,
                    YEARSEASON_ATTR_VALUE8 ,
                    YEARSEASON_ATTR_VALUE9 ,
                    YEARSEASON_ATTR_VALUE10,
                    YEARSEASON_ATTR_VALUE11,
                    YEARSEASON_ATTR_VALUE12,
                    YEARSEASON_ATTR_VALUE13,
                    YEARSEASON_ATTR_VALUE14,
                    YEARSEASON_ATTR_VALUE15,
                    YEARSEASON_ATTR_VALUE16,
                    YEARSEASON_ATTR_VALUE17,
                    YEARSEASON_ATTR_VALUE18,
                    YEARSEASON_ATTR_VALUE19,
                    YEARSEASON_ATTR_VALUE20,
                    SOURCE_BUSKEY,
                    TARGET_BUSKEY
                    FROM (' || L_PAV_SQL || ')
        ) S
        ON (
            S.TARGET_BUSKEY=T.TARGET_BUSKEY AND
            S.YEARSEASON_ATTR_ID=T.YEARSEASON_ATTR_ID
        )
        WHEN NOT MATCHED THEN INSERT(
            YEARSEASON_ATTR_VALUE_ID,
            YEARSEASON_ATTR_ID,
            YEARSEASON_ATTR_VALUE1,
            YEARSEASON_ATTR_VALUE2,
            YEARSEASON_ATTR_VALUE3,
            YEARSEASON_ATTR_VALUE4,
            YEARSEASON_ATTR_VALUE5,
            YEARSEASON_ATTR_VALUE6,
            YEARSEASON_ATTR_VALUE7,
            YEARSEASON_ATTR_VALUE8,
            YEARSEASON_ATTR_VALUE9,
            YEARSEASON_ATTR_VALUE10,
            YEARSEASON_ATTR_VALUE11,
            YEARSEASON_ATTR_VALUE12,
            YEARSEASON_ATTR_VALUE13,
            YEARSEASON_ATTR_VALUE14,
            YEARSEASON_ATTR_VALUE15,
            YEARSEASON_ATTR_VALUE16,
            YEARSEASON_ATTR_VALUE17,
            YEARSEASON_ATTR_VALUE18,
            YEARSEASON_ATTR_VALUE19,
            YEARSEASON_ATTR_VALUE20,
            SOURCE_BUSKEY,
            TARGET_BUSKEY
          ) VALUES(
          DIM_POPULATE_PACK.GET_SEQ_NEXTVALUE(''SEQ_YEARSEASON_ATTR_VALUE''),
            S.YEARSEASON_ATTR_ID,
            S.YEARSEASON_ATTR_VALUE1,
            S.YEARSEASON_ATTR_VALUE2,
            S.YEARSEASON_ATTR_VALUE3,
            S.YEARSEASON_ATTR_VALUE4,
            S.YEARSEASON_ATTR_VALUE5,
            S.YEARSEASON_ATTR_VALUE6,
            S.YEARSEASON_ATTR_VALUE7,
            S.YEARSEASON_ATTR_VALUE8,
            S.YEARSEASON_ATTR_VALUE9,
            S.YEARSEASON_ATTR_VALUE10,
            S.YEARSEASON_ATTR_VALUE11,
            S.YEARSEASON_ATTR_VALUE12,
            S.YEARSEASON_ATTR_VALUE13,
            S.YEARSEASON_ATTR_VALUE14,
            S.YEARSEASON_ATTR_VALUE15,
            S.YEARSEASON_ATTR_VALUE16,
            S.YEARSEASON_ATTR_VALUE17,
            S.YEARSEASON_ATTR_VALUE18,
            S.YEARSEASON_ATTR_VALUE19,
            S.YEARSEASON_ATTR_VALUE20,
            S.SOURCE_BUSKEY,
            S.TARGET_BUSKEY)
        WHEN MATCHED THEN UPDATE
          SET
            T.YEARSEASON_ATTR_VALUE1 =S.YEARSEASON_ATTR_VALUE1 ,
            T.YEARSEASON_ATTR_VALUE2 =S.YEARSEASON_ATTR_VALUE2 ,
            T.YEARSEASON_ATTR_VALUE3 =S.YEARSEASON_ATTR_VALUE3 ,
            T.YEARSEASON_ATTR_VALUE4 =S.YEARSEASON_ATTR_VALUE4 ,
            T.YEARSEASON_ATTR_VALUE5 =S.YEARSEASON_ATTR_VALUE5 ,
            T.YEARSEASON_ATTR_VALUE6 =S.YEARSEASON_ATTR_VALUE6 ,
            T.YEARSEASON_ATTR_VALUE7 =S.YEARSEASON_ATTR_VALUE7 ,
            T.YEARSEASON_ATTR_VALUE8 =S.YEARSEASON_ATTR_VALUE8 ,
            T.YEARSEASON_ATTR_VALUE9 =S.YEARSEASON_ATTR_VALUE9 ,
            T.YEARSEASON_ATTR_VALUE10=S.YEARSEASON_ATTR_VALUE10,
            T.YEARSEASON_ATTR_VALUE11=S.YEARSEASON_ATTR_VALUE11,
            T.YEARSEASON_ATTR_VALUE12=S.YEARSEASON_ATTR_VALUE12,
            T.YEARSEASON_ATTR_VALUE13=S.YEARSEASON_ATTR_VALUE13,
            T.YEARSEASON_ATTR_VALUE14=S.YEARSEASON_ATTR_VALUE14,
            T.YEARSEASON_ATTR_VALUE15=S.YEARSEASON_ATTR_VALUE15,
            T.YEARSEASON_ATTR_VALUE16=S.YEARSEASON_ATTR_VALUE16,
            T.YEARSEASON_ATTR_VALUE17=S.YEARSEASON_ATTR_VALUE17,
            T.YEARSEASON_ATTR_VALUE18=S.YEARSEASON_ATTR_VALUE18,
            T.YEARSEASON_ATTR_VALUE19=S.YEARSEASON_ATTR_VALUE19,
            T.YEARSEASON_ATTR_VALUE20=S.YEARSEASON_ATTR_VALUE20,
            T.SOURCE_BUSKEY          =S.SOURCE_BUSKEY ' USING L_YEARSEASON_ATTR_ID,L_YEARSEASON_ATTR_ID,L_YEARSEASON_ATTR_ID;

        EXECUTE IMMEDIATE
'BEGIN
  DELETE FROM DIM_YEARSEASON_ATTR_VAL_REL R
  WHERE EXISTS(SELECT 1 FROM DIM_YEARSEASON_ATTR_VALUE V
        WHERE R.YEARSEASON_ATTR_VALUE_ID=V.YEARSEASON_ATTR_VALUE_ID
        AND V.YEARSEASON_ATTR_ID=:YEARSEASON_ATTR_ID);
  MERGE INTO DIM_YEARSEASON_ATTR_VAL_REL T
  USING(' || L_PAVR_SQL || ') S
  ON (T.YEARSEASON_ATTR_VALUE_ID=S.YEARSEASON_ATTR_VALUE_ID AND T.STYLE_YEAR_SEASON_ID=S.STYLE_YEAR_SEASON_ID)
  WHEN NOT MATCHED THEN INSERT(YEARSEASON_ATTR_VALUE_ID,STYLE_YEAR_SEASON_ID)
    VALUES(S.YEARSEASON_ATTR_VALUE_ID,S.STYLE_YEAR_SEASON_ID);
END;' USING L_YEARSEASON_ATTR_ID, L_YEARSEASON_ATTR_ID;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        BEGIN

          INSERT INTO DIM_YEARSEASON_ATTR
            (YEARSEASON_ATTR_ID,
             YEARSEASON_ATTR_NAME1,
             YEARSEASON_ATTR_NAME2,
             YEARSEASON_ATTR_NAME3,
             YEARSEASON_ATTR_NAME4,
             YEARSEASON_ATTR_NAME5,
             YEARSEASON_ATTR_NAME6,
             YEARSEASON_ATTR_NAME7,
             YEARSEASON_ATTR_NAME8,
             YEARSEASON_ATTR_NAME9,
             YEARSEASON_ATTR_NAME10,
             YEARSEASON_ATTR_NAME11,
             YEARSEASON_ATTR_NAME12,
             YEARSEASON_ATTR_NAME13,
             YEARSEASON_ATTR_NAME14,
             YEARSEASON_ATTR_NAME15,
             YEARSEASON_ATTR_NAME16,
             YEARSEASON_ATTR_NAME17,
             YEARSEASON_ATTR_NAME18,
             YEARSEASON_ATTR_NAME19,
             YEARSEASON_ATTR_NAME20,
             SOURCE_BUSKEY_HASH_STR,
             TARGET_BUSKEY_HASH_STR
             )
          VALUES
            (SEQ_YEARSEASON_ATTR.NEXTVAL,
             L_NNT_COL_COMMENTS         (1).COMMENTS,
             L_NNT_COL_COMMENTS         (2).COMMENTS,
             L_NNT_COL_COMMENTS         (3).COMMENTS,
             L_NNT_COL_COMMENTS         (4).COMMENTS,
             L_NNT_COL_COMMENTS         (5).COMMENTS,
             L_NNT_COL_COMMENTS         (6).COMMENTS,
             L_NNT_COL_COMMENTS         (7).COMMENTS,
             L_NNT_COL_COMMENTS         (8).COMMENTS,
             L_NNT_COL_COMMENTS         (9).COMMENTS,
             L_NNT_COL_COMMENTS         (10).COMMENTS,
             L_NNT_COL_COMMENTS         (11).COMMENTS,
             L_NNT_COL_COMMENTS         (12).COMMENTS,
             L_NNT_COL_COMMENTS         (13).COMMENTS,
             L_NNT_COL_COMMENTS         (14).COMMENTS,
             L_NNT_COL_COMMENTS         (15).COMMENTS,
             L_NNT_COL_COMMENTS         (16).COMMENTS,
             L_NNT_COL_COMMENTS         (17).COMMENTS,
             L_NNT_COL_COMMENTS         (18).COMMENTS,
             L_NNT_COL_COMMENTS         (19).COMMENTS,
             L_NNT_COL_COMMENTS         (20).COMMENTS,
             P_SOURCE_BUSKEY_HASH_STR,
             P_TARGET_BUSKEY_HASH_STR
             )
          RETURNING YEARSEASON_ATTR_ID INTO L_YEARSEASON_ATTR_ID;

          IF L_YEARSEASON_ATTR_ID > 0 THEN
            EXECUTE IMMEDIATE 'INSERT INTO DIM_YEARSEASON_ATTR_VALUE(
                    YEARSEASON_ATTR_VALUE_ID,
                    YEARSEASON_ATTR_ID,
                    YEARSEASON_ATTR_VALUE1,
                    YEARSEASON_ATTR_VALUE2,
                    YEARSEASON_ATTR_VALUE3,
                    YEARSEASON_ATTR_VALUE4,
                    YEARSEASON_ATTR_VALUE5,
                    YEARSEASON_ATTR_VALUE6,
                    YEARSEASON_ATTR_VALUE7,
                    YEARSEASON_ATTR_VALUE8,
                    YEARSEASON_ATTR_VALUE9,
                    YEARSEASON_ATTR_VALUE10,
                    YEARSEASON_ATTR_VALUE11,
                    YEARSEASON_ATTR_VALUE12,
                    YEARSEASON_ATTR_VALUE13,
                    YEARSEASON_ATTR_VALUE14,
                    YEARSEASON_ATTR_VALUE15,
                    YEARSEASON_ATTR_VALUE16,
                    YEARSEASON_ATTR_VALUE17,
                    YEARSEASON_ATTR_VALUE18,
                    YEARSEASON_ATTR_VALUE19,
                    YEARSEASON_ATTR_VALUE20,
                    SOURCE_BUSKEY,
                    TARGET_BUSKEY)
                SELECT SEQ_YEARSEASON_ATTR_VALUE.NEXTVAL,
                       :YEARSEASON_ATTR_ID YEARSEASON_ATTR_ID,
                       YEARSEASON_ATTR_VALUE1,
                       YEARSEASON_ATTR_VALUE2,
                       YEARSEASON_ATTR_VALUE3,
                       YEARSEASON_ATTR_VALUE4,
                       YEARSEASON_ATTR_VALUE5,
                       YEARSEASON_ATTR_VALUE6,
                       YEARSEASON_ATTR_VALUE7,
                       YEARSEASON_ATTR_VALUE8,
                       YEARSEASON_ATTR_VALUE9,
                       YEARSEASON_ATTR_VALUE10,
                       YEARSEASON_ATTR_VALUE11,
                       YEARSEASON_ATTR_VALUE12,
                       YEARSEASON_ATTR_VALUE13,
                       YEARSEASON_ATTR_VALUE14,
                       YEARSEASON_ATTR_VALUE15,
                       YEARSEASON_ATTR_VALUE16,
                       YEARSEASON_ATTR_VALUE17,
                       YEARSEASON_ATTR_VALUE18,
                       YEARSEASON_ATTR_VALUE19,
                       YEARSEASON_ATTR_VALUE20,
                       SOURCE_BUSKEY,
                       TARGET_BUSKEY
                 FROM ( ' || L_PAV_SQL ||
                              CHR(10) || ') O' USING L_YEARSEASON_ATTR_ID,L_YEARSEASON_ATTR_ID,L_YEARSEASON_ATTR_ID;

            EXECUTE IMMEDIATE 'INSERT INTO DIM_YEARSEASON_ATTR_VAL_REL(YEARSEASON_ATTR_VALUE_ID,STYLE_YEAR_SEASON_ID)' ||
                              CHR(10) || L_PAVR_SQL || CHR(10) USING L_YEARSEASON_ATTR_ID;

          END IF;
        END;
    END;

    COMMIT;

    P_YEARSEASON_ATTR_ID:=L_YEARSEASON_ATTR_ID;

  END POP_DIM_YEARSEASON_ATTR_VALUE;

  PROCEDURE POP_DIM_LOC_ATTR_VALUE(P_IS_INITIAL                BOOLEAN DEFAULT TRUE,
                                   P_VIEW_COL_COMMENTS         VARCHAR2,
                                   P_SOURCE_BUSKEY_HASH_STR    VARCHAR2,
                                   P_TARGET_BUSKEY_HASH_STR    VARCHAR2,
                                   P_DELIMITER                 VARCHAR2 DEFAULT ',',
                                   P_LOC_ATTR_ID               OUT DIM_LOC_ATTR.LOC_ATTR_ID%TYPE) IS
    L_LAV_SQL  VARCHAR2(32767);
    L_LAVR_SQL VARCHAR2(32767);

    L_SOURCE_BUSKEY_SQL VARCHAR2(4000):='UTILITY_PACK.GET_HASH_VAL(UPPER(:LOC_ATTR_ID)';
    L_TARGET_BUSKEY_SQL VARCHAR2(4000):='UTILITY_PACK.GET_HASH_VAL(UPPER(:LOC_ATTR_ID)';

    C_MAX_ATTR_NUM CONSTANT PLS_INTEGER:=20;

    TYPE REC_COL_COMMENTS IS RECORD(
      COLUMN_NAME VARCHAR2(30),
      COMMENTS    VARCHAR2(30));
    TYPE NNT_COL_COMMENTS IS TABLE OF REC_COL_COMMENTS;
    L_NNT_COL_COMMENTS NNT_COL_COMMENTS := NNT_COL_COMMENTS();
    L_LOC_ATTR_ID      PLS_INTEGER := 0;
    L_ATTR_COUNT       PLS_INTEGER := 0;
    L_VIEW             VARCHAR2(30);
  BEGIN

    SELECT T.DB_TAB_NAME INTO L_VIEW
    FROM META_DIM_HIERARCHIES T
    WHERE T.DIM_NAME=C_STORE_DIM
    AND T.HIERARCHY_NAME=C_STORE_PRIMARY_DETAIL_HIER;

    L_LAV_SQL  := 'SELECT DISTINCT ';
    L_LAVR_SQL := 'SELECT A.LOC_ATTR_VALUE_ID,B.STORE_ID' || CHR(10) ||
                  'FROM DIM_LOC_ATTR_VALUE A' || CHR(10) || 'INNER JOIN ' ||
                  L_VIEW || ' B' || CHR(10) || 'ON A.LOC_ATTR_ID=:1 ' || CHR(10);

    FOR ITEM IN (SELECT T.DB_COL_NAME COLUMN_NAME, T.BUSINESS_DESC COMMENTS
                   FROM META_DIM_HIER_LEVEL_ATTRS T
                  WHERE T.DIM_NAME = C_STORE_DIM
                    AND T.HIERARCHY_NAME=C_STORE_PRIMARY_DETAIL_HIER
                    AND P_DELIMITER || UPPER(P_VIEW_COL_COMMENTS) ||
                        P_DELIMITER LIKE
                        '%' || P_DELIMITER || UPPER(T.BUSINESS_DESC) ||
                        P_DELIMITER || '%'
                  ORDER BY INSTR(P_DELIMITER ||UPPER(P_VIEW_COL_COMMENTS)|| P_DELIMITER,
                                 P_DELIMITER ||UPPER(T.BUSINESS_DESC)||P_DELIMITER)
                  ) LOOP

      L_NNT_COL_COMMENTS.EXTEND();
      L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COLUMN_NAME := ITEM.COLUMN_NAME;
      L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COMMENTS := ITEM.COMMENTS;
    END LOOP;

    L_ATTR_COUNT := L_NNT_COL_COMMENTS.COUNT;

    FOR I IN 1 .. C_MAX_ATTR_NUM LOOP
      IF I <= L_ATTR_COUNT THEN
        L_LAV_SQL  := L_LAV_SQL || (CASE
                        WHEN I = 1 THEN
                         'TO_CHAR(' || L_NNT_COL_COMMENTS(I).COLUMN_NAME || ')'
                        ELSE
                         ',TO_CHAR(' || L_NNT_COL_COMMENTS(I).COLUMN_NAME || ')'
                      END) || ' LOC_ATTR_VALUE' || TO_CHAR(I) || CHR(10);
        L_LAVR_SQL := L_LAVR_SQL || 'AND A.LOC_ATTR_VALUE' || TO_CHAR(I) ||
                      '=UPPER(B.' || L_NNT_COL_COMMENTS(I).COLUMN_NAME || ')' ||
                      CHR(10);
      ELSE
        L_LAV_SQL := L_LAV_SQL || CASE
                       WHEN I = 1 THEN
                        ''''
                       ELSE
                        ','''
                     END || C_DUMMY || ''' LOC_ATTR_VALUE' || TO_CHAR(I) ||
                     CHR(10);
        L_NNT_COL_COMMENTS.EXTEND();
        L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COLUMN_NAME := C_DUMMY;
        L_NNT_COL_COMMENTS(L_NNT_COL_COMMENTS.COUNT).COMMENTS := C_DUMMY;
      END IF;
    END LOOP;

    --  L_LAV_SQL := L_LAV_SQL || ' FROM ' || L_VIEW;

    --  DBMS_OUTPUT.PUT_LINE('L_LAV_SQL:'||L_LAV_SQL);
    --  DBMS_OUTPUT.PUT_LINE('L_LAVR_SQL:'||L_LAVR_SQL);

    FOR ITEM IN (
      SELECT ID
      FROM (SELECT LEVEL ID FROM DUAL CONNECT BY LEVEL<=C_MAX_ATTR_NUM) O
      WHERE P_DELIMITER || UPPER(P_SOURCE_BUSKEY_HASH_STR) ||
                        P_DELIMITER LIKE
                        '%' || P_DELIMITER || UPPER(O.ID) ||
                        P_DELIMITER || '%'
      ORDER BY INSTR(UPPER(P_SOURCE_BUSKEY_HASH_STR),UPPER(O.ID))
    ) LOOP
      L_SOURCE_BUSKEY_SQL:=L_SOURCE_BUSKEY_SQL||'||'''||C_DELIMITER||'''||UPPER('||L_NNT_COL_COMMENTS(ITEM.ID).COLUMN_NAME||')';
    END LOOP;

    L_SOURCE_BUSKEY_SQL:=L_SOURCE_BUSKEY_SQL||')';

    FOR ITEM IN (
      SELECT ID
      FROM (SELECT LEVEL ID FROM DUAL CONNECT BY LEVEL<=C_MAX_ATTR_NUM) O
      WHERE P_DELIMITER || UPPER(P_TARGET_BUSKEY_HASH_STR) ||
                        P_DELIMITER LIKE
                        '%' || P_DELIMITER || UPPER(O.ID) ||
                        P_DELIMITER || '%'
      ORDER BY INSTR(UPPER(P_TARGET_BUSKEY_HASH_STR),UPPER(O.ID))
    ) LOOP
      L_TARGET_BUSKEY_SQL:=L_TARGET_BUSKEY_SQL||'||'''||C_DELIMITER||'''||UPPER('||L_NNT_COL_COMMENTS(ITEM.ID).COLUMN_NAME||')';
    END LOOP;

    L_TARGET_BUSKEY_SQL:=L_TARGET_BUSKEY_SQL||')';

    L_LAV_SQL := L_LAV_SQL ||','||L_SOURCE_BUSKEY_SQL||' SOURCE_BUSKEY,'||L_TARGET_BUSKEY_SQL ||' TARGET_BUSKEY FROM ' || L_VIEW;

    IF P_IS_INITIAL THEN

      DISABLE_ALL_CONS;
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_LOC_ATTR';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_LOC_ATTR_VALUE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_LOC_ATTR_VAL_REL';
      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_LOC_ATTR');
      RESET_SEQUENCE('SEQ_LOC_ATTR_VALUE');

      INSERT INTO DIM_LOC_ATTR
        (LOC_ATTR_ID,
         LOC_ATTR_NAME1,
         LOC_ATTR_NAME2,
         LOC_ATTR_NAME3,
         LOC_ATTR_NAME4,
         LOC_ATTR_NAME5,
         LOC_ATTR_NAME6,
         LOC_ATTR_NAME7,
         LOC_ATTR_NAME8,
         LOC_ATTR_NAME9,
         LOC_ATTR_NAME10,
         LOC_ATTR_NAME11,
         LOC_ATTR_NAME12,
         LOC_ATTR_NAME13,
         LOC_ATTR_NAME14,
         LOC_ATTR_NAME15,
         LOC_ATTR_NAME16,
         LOC_ATTR_NAME17,
         LOC_ATTR_NAME18,
         LOC_ATTR_NAME19,
         LOC_ATTR_NAME20,
         SOURCE_BUSKEY_HASH_STR,
         TARGET_BUSKEY_HASH_STR)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY
         );

      INSERT INTO DIM_LOC_ATTR_VALUE
        (LOC_ATTR_VALUE_ID,
         LOC_ATTR_ID,
         LOC_ATTR_VALUE1,
         LOC_ATTR_VALUE2,
         LOC_ATTR_VALUE3,
         LOC_ATTR_VALUE4,
         LOC_ATTR_VALUE5,
         LOC_ATTR_VALUE6,
         LOC_ATTR_VALUE7,
         LOC_ATTR_VALUE8,
         LOC_ATTR_VALUE9,
         LOC_ATTR_VALUE10,
         LOC_ATTR_VALUE11,
         LOC_ATTR_VALUE12,
         LOC_ATTR_VALUE13,
         LOC_ATTR_VALUE14,
         LOC_ATTR_VALUE15,
         LOC_ATTR_VALUE16,
         LOC_ATTR_VALUE17,
         LOC_ATTR_VALUE18,
         LOC_ATTR_VALUE19,
         LOC_ATTR_VALUE20,
         SOURCE_BUSKEY,
         TARGET_BUSKEY
         )
      VALUES
        (0,
         0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY
         );

    END IF;

    BEGIN

      SELECT LOC_ATTR_ID
        INTO L_LOC_ATTR_ID
        FROM DIM_LOC_ATTR
       WHERE LOC_ATTR_NAME1 = L_NNT_COL_COMMENTS(1).COMMENTS
         AND LOC_ATTR_NAME2 = L_NNT_COL_COMMENTS(2).COMMENTS
         AND LOC_ATTR_NAME3 = L_NNT_COL_COMMENTS(3).COMMENTS
         AND LOC_ATTR_NAME4 = L_NNT_COL_COMMENTS(4).COMMENTS
         AND LOC_ATTR_NAME5 = L_NNT_COL_COMMENTS(5).COMMENTS
         AND LOC_ATTR_NAME6 = L_NNT_COL_COMMENTS(6).COMMENTS
         AND LOC_ATTR_NAME7 = L_NNT_COL_COMMENTS(7).COMMENTS
         AND LOC_ATTR_NAME8 = L_NNT_COL_COMMENTS(8).COMMENTS
         AND LOC_ATTR_NAME9 = L_NNT_COL_COMMENTS(9).COMMENTS
         AND LOC_ATTR_NAME10 = L_NNT_COL_COMMENTS(10).COMMENTS
         AND LOC_ATTR_NAME11 = L_NNT_COL_COMMENTS(11).COMMENTS
         AND LOC_ATTR_NAME12 = L_NNT_COL_COMMENTS(12).COMMENTS
         AND LOC_ATTR_NAME13 = L_NNT_COL_COMMENTS(13).COMMENTS
         AND LOC_ATTR_NAME14 = L_NNT_COL_COMMENTS(14).COMMENTS
         AND LOC_ATTR_NAME15 = L_NNT_COL_COMMENTS(15).COMMENTS
         AND LOC_ATTR_NAME16 = L_NNT_COL_COMMENTS(16).COMMENTS
         AND LOC_ATTR_NAME17 = L_NNT_COL_COMMENTS(17).COMMENTS
         AND LOC_ATTR_NAME18 = L_NNT_COL_COMMENTS(18).COMMENTS
         AND LOC_ATTR_NAME19 = L_NNT_COL_COMMENTS(19).COMMENTS
         AND LOC_ATTR_NAME20 = L_NNT_COL_COMMENTS(20).COMMENTS;

      IF L_LOC_ATTR_ID>0 THEN
        EXECUTE IMMEDIATE 'MERGE INTO DIM_LOC_ATTR_VALUE T
        USING(
              SELECT :LOC_ATTR_ID LOC_ATTR_ID,
                    LOC_ATTR_VALUE1 ,
                    LOC_ATTR_VALUE2 ,
                    LOC_ATTR_VALUE3 ,
                    LOC_ATTR_VALUE4 ,
                    LOC_ATTR_VALUE5 ,
                    LOC_ATTR_VALUE6 ,
                    LOC_ATTR_VALUE7 ,
                    LOC_ATTR_VALUE8 ,
                    LOC_ATTR_VALUE9 ,
                    LOC_ATTR_VALUE10,
                    LOC_ATTR_VALUE11,
                    LOC_ATTR_VALUE12,
                    LOC_ATTR_VALUE13,
                    LOC_ATTR_VALUE14,
                    LOC_ATTR_VALUE15,
                    LOC_ATTR_VALUE16,
                    LOC_ATTR_VALUE17,
                    LOC_ATTR_VALUE18,
                    LOC_ATTR_VALUE19,
                    LOC_ATTR_VALUE20,
                    SOURCE_BUSKEY,
                    TARGET_BUSKEY
                    FROM (' || L_LAV_SQL || ')
        ) S
        ON (
            S.TARGET_BUSKEY=T.TARGET_BUSKEY AND
            S.LOC_ATTR_ID=T.LOC_ATTR_ID
        )
        WHEN NOT MATCHED THEN INSERT(
            LOC_ATTR_VALUE_ID,
            LOC_ATTR_ID,
            LOC_ATTR_VALUE1,
            LOC_ATTR_VALUE2,
            LOC_ATTR_VALUE3,
            LOC_ATTR_VALUE4,
            LOC_ATTR_VALUE5,
            LOC_ATTR_VALUE6,
            LOC_ATTR_VALUE7,
            LOC_ATTR_VALUE8,
            LOC_ATTR_VALUE9,
            LOC_ATTR_VALUE10,
            LOC_ATTR_VALUE11,
            LOC_ATTR_VALUE12,
            LOC_ATTR_VALUE13,
            LOC_ATTR_VALUE14,
            LOC_ATTR_VALUE15,
            LOC_ATTR_VALUE16,
            LOC_ATTR_VALUE17,
            LOC_ATTR_VALUE18,
            LOC_ATTR_VALUE19,
            LOC_ATTR_VALUE20,
            SOURCE_BUSKEY,
            TARGET_BUSKEY
          ) VALUES(
          DIM_POPULATE_PACK.GET_SEQ_NEXTVALUE(''SEQ_LOC_ATTR_VALUE''),
            S.LOC_ATTR_ID,
            S.LOC_ATTR_VALUE1,
            S.LOC_ATTR_VALUE2,
            S.LOC_ATTR_VALUE3,
            S.LOC_ATTR_VALUE4,
            S.LOC_ATTR_VALUE5,
            S.LOC_ATTR_VALUE6,
            S.LOC_ATTR_VALUE7,
            S.LOC_ATTR_VALUE8,
            S.LOC_ATTR_VALUE9,
            S.LOC_ATTR_VALUE10,
            S.LOC_ATTR_VALUE11,
            S.LOC_ATTR_VALUE12,
            S.LOC_ATTR_VALUE13,
            S.LOC_ATTR_VALUE14,
            S.LOC_ATTR_VALUE15,
            S.LOC_ATTR_VALUE16,
            S.LOC_ATTR_VALUE17,
            S.LOC_ATTR_VALUE18,
            S.LOC_ATTR_VALUE19,
            S.LOC_ATTR_VALUE20,
            S.SOURCE_BUSKEY,
            S.TARGET_BUSKEY)
        WHEN MATCHED THEN UPDATE
          SET T.LOC_ATTR_VALUE1    =S.LOC_ATTR_VALUE1  ,
          T.LOC_ATTR_VALUE2    =S.LOC_ATTR_VALUE2  ,
          T.LOC_ATTR_VALUE3    =S.LOC_ATTR_VALUE3  ,
          T.LOC_ATTR_VALUE4    =S.LOC_ATTR_VALUE4  ,
          T.LOC_ATTR_VALUE5    =S.LOC_ATTR_VALUE5  ,
          T.LOC_ATTR_VALUE6    =S.LOC_ATTR_VALUE6  ,
          T.LOC_ATTR_VALUE7    =S.LOC_ATTR_VALUE7  ,
          T.LOC_ATTR_VALUE8    =S.LOC_ATTR_VALUE8  ,
          T.LOC_ATTR_VALUE9    =S.LOC_ATTR_VALUE9  ,
          T.LOC_ATTR_VALUE10   =S.LOC_ATTR_VALUE10 ,
          T.LOC_ATTR_VALUE11   =S.LOC_ATTR_VALUE11 ,
          T.LOC_ATTR_VALUE12   =S.LOC_ATTR_VALUE12 ,
          T.LOC_ATTR_VALUE13   =S.LOC_ATTR_VALUE13 ,
          T.LOC_ATTR_VALUE14   =S.LOC_ATTR_VALUE14 ,
          T.LOC_ATTR_VALUE15   =S.LOC_ATTR_VALUE15 ,
          T.LOC_ATTR_VALUE16   =S.LOC_ATTR_VALUE16 ,
          T.LOC_ATTR_VALUE17   =S.LOC_ATTR_VALUE17 ,
          T.LOC_ATTR_VALUE18   =S.LOC_ATTR_VALUE18 ,
          T.LOC_ATTR_VALUE19   =S.LOC_ATTR_VALUE19 ,
          T.LOC_ATTR_VALUE20   =S.LOC_ATTR_VALUE20 ,
          T.SOURCE_BUSKEY      =S.SOURCE_BUSKEY' USING L_LOC_ATTR_ID,L_LOC_ATTR_ID,L_LOC_ATTR_ID;

        EXECUTE IMMEDIATE
'BEGIN
  DELETE FROM DIM_LOC_ATTR_VAL_REL R
  WHERE EXISTS(SELECT 1 FROM DIM_LOC_ATTR_VALUE V
        WHERE R.LOC_ATTR_VALUE_ID=V.LOC_ATTR_VALUE_ID
        AND V.LOC_ATTR_ID=:LOC_ATTR_ID);
  MERGE INTO DIM_LOC_ATTR_VAL_REL T
  USING(' || L_LAVR_SQL || ') S
  ON (T.LOC_ATTR_VALUE_ID=S.LOC_ATTR_VALUE_ID AND T.STORE_ID=S.STORE_ID)
  WHEN NOT MATCHED THEN INSERT(LOC_ATTR_VALUE_ID,STORE_ID)
    VALUES(S.LOC_ATTR_VALUE_ID,S.STORE_ID);
END;' USING L_LOC_ATTR_ID, L_LOC_ATTR_ID;

    END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        BEGIN

          INSERT INTO DIM_LOC_ATTR
            (LOC_ATTR_ID,
             LOC_ATTR_NAME1,
             LOC_ATTR_NAME2,
             LOC_ATTR_NAME3,
             LOC_ATTR_NAME4,
             LOC_ATTR_NAME5,
             LOC_ATTR_NAME6,
             LOC_ATTR_NAME7,
             LOC_ATTR_NAME8,
             LOC_ATTR_NAME9,
             LOC_ATTR_NAME10,
             LOC_ATTR_NAME11,
             LOC_ATTR_NAME12,
             LOC_ATTR_NAME13,
             LOC_ATTR_NAME14,
             LOC_ATTR_NAME15,
             LOC_ATTR_NAME16,
             LOC_ATTR_NAME17,
             LOC_ATTR_NAME18,
             LOC_ATTR_NAME19,
             LOC_ATTR_NAME20,
             SOURCE_BUSKEY_HASH_STR,
             TARGET_BUSKEY_HASH_STR
             )
          VALUES
            (SEQ_LOC_ATTR.NEXTVAL,
             L_NNT_COL_COMMENTS  (1).COMMENTS,
             L_NNT_COL_COMMENTS  (2).COMMENTS,
             L_NNT_COL_COMMENTS  (3).COMMENTS,
             L_NNT_COL_COMMENTS  (4).COMMENTS,
             L_NNT_COL_COMMENTS  (5).COMMENTS,
             L_NNT_COL_COMMENTS  (6).COMMENTS,
             L_NNT_COL_COMMENTS  (7).COMMENTS,
             L_NNT_COL_COMMENTS  (8).COMMENTS,
             L_NNT_COL_COMMENTS  (9).COMMENTS,
             L_NNT_COL_COMMENTS  (10).COMMENTS,
             L_NNT_COL_COMMENTS  (11).COMMENTS,
             L_NNT_COL_COMMENTS  (12).COMMENTS,
             L_NNT_COL_COMMENTS  (13).COMMENTS,
             L_NNT_COL_COMMENTS  (14).COMMENTS,
             L_NNT_COL_COMMENTS  (15).COMMENTS,
             L_NNT_COL_COMMENTS  (16).COMMENTS,
             L_NNT_COL_COMMENTS  (17).COMMENTS,
             L_NNT_COL_COMMENTS  (18).COMMENTS,
             L_NNT_COL_COMMENTS  (19).COMMENTS,
             L_NNT_COL_COMMENTS  (20).COMMENTS,
             P_SOURCE_BUSKEY_HASH_STR,
             P_TARGET_BUSKEY_HASH_STR
             )
          RETURNING LOC_ATTR_ID INTO L_LOC_ATTR_ID;

          IF L_LOC_ATTR_ID > 0 THEN
            EXECUTE IMMEDIATE 'INSERT INTO DIM_LOC_ATTR_VALUE(
                    LOC_ATTR_VALUE_ID,
                    LOC_ATTR_ID,
                    LOC_ATTR_VALUE1,
                    LOC_ATTR_VALUE2,
                    LOC_ATTR_VALUE3,
                    LOC_ATTR_VALUE4,
                    LOC_ATTR_VALUE5,
                    LOC_ATTR_VALUE6,
                    LOC_ATTR_VALUE7,
                    LOC_ATTR_VALUE8,
                    LOC_ATTR_VALUE9,
                    LOC_ATTR_VALUE10,
                    LOC_ATTR_VALUE11,
                    LOC_ATTR_VALUE12,
                    LOC_ATTR_VALUE13,
                    LOC_ATTR_VALUE14,
                    LOC_ATTR_VALUE15,
                    LOC_ATTR_VALUE16,
                    LOC_ATTR_VALUE17,
                    LOC_ATTR_VALUE18,
                    LOC_ATTR_VALUE19,
                    LOC_ATTR_VALUE20,
                    SOURCE_BUSKEY,
                    TARGET_BUSKEY
                    )
                SELECT SEQ_LOC_ATTR_VALUE.NEXTVAL,
                       :LOC_ATTR_ID LOC_ATTR_ID,
                       LOC_ATTR_VALUE1,
                       LOC_ATTR_VALUE2,
                       LOC_ATTR_VALUE3,
                       LOC_ATTR_VALUE4,
                       LOC_ATTR_VALUE5,
                       LOC_ATTR_VALUE6,
                       LOC_ATTR_VALUE7,
                       LOC_ATTR_VALUE8,
                       LOC_ATTR_VALUE9,
                       LOC_ATTR_VALUE10,
                       LOC_ATTR_VALUE11,
                       LOC_ATTR_VALUE12,
                       LOC_ATTR_VALUE13,
                       LOC_ATTR_VALUE14,
                       LOC_ATTR_VALUE15,
                       LOC_ATTR_VALUE16,
                       LOC_ATTR_VALUE17,
                       LOC_ATTR_VALUE18,
                       LOC_ATTR_VALUE19,
                       LOC_ATTR_VALUE20,
                       SOURCE_BUSKEY,
                       TARGET_BUSKEY
                 FROM ( ' || L_LAV_SQL ||
                              CHR(10) || ') O' USING L_LOC_ATTR_ID,L_LOC_ATTR_ID,L_LOC_ATTR_ID;

            EXECUTE IMMEDIATE 'INSERT INTO DIM_LOC_ATTR_VAL_REL(LOC_ATTR_VALUE_ID,STORE_ID)' ||
                              CHR(10) || L_LAVR_SQL || CHR(10) USING L_LOC_ATTR_ID;

          END IF;
        END;
    END;

    COMMIT;

    P_LOC_ATTR_ID:=L_LOC_ATTR_ID;

  END POP_DIM_LOC_ATTR_VALUE;

  PROCEDURE POP_DIM_ERROR(P_IS_INITIAL BOOLEAN DEFAULT TRUE) IS
  BEGIN
    IF P_IS_INITIAL THEN
      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_ERROR';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_ERROR_MSG';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_ERROR');

      INSERT INTO DIM_ERROR
        (ERROR_ID, ERROR_CODE, ERROR_CATEGORY, SEVERITY)
      VALUES
        (0, 0, C_DUMMY, 0);

      INSERT INTO DIM_ERROR_MSG
        (ERROR_ID, LANGUAGE, ERROR_MSG)
      VALUES
        (0, 'EN', C_DUMMY);
    END IF;

    FOR ITEM IN (SELECT C_MEASUREMENTS_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Style/Color/Size - {0} has zero value in all columns in this record.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_TOTAL_QTY_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Total Qty is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_TOTAL_QTY_NEGATIVE ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Total Qty {0} is negative.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_TOTAL_RETAIL_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Total Retail is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_TOTAL_RETAIL_NEGATIVE ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Total Retail {0} is negative.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_MEASUREMENTS_NEGATIVE ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Style/Color/Size - {0} has negative value in some columns in this record.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_TARGETINVENTORY_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Target Inventory is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_TARGETINVENTORY_ZERO ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Target Inventory is zero.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
        SELECT C_TARGETINVENTORY_NEGATIVE ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Target Inventory is negative.' ERROR_MSG
                   FROM DUAL
                 UNION ALL

                 SELECT C_SC_MIN_INVENTORY_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Style color Min Inventory is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
/*                 SELECT C_SC_MIN_INVENTORY_ZERO ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Style color Min Inventory is zero.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
*/
                 SELECT C_SC_MIN_INVENTORY_NEGATIVE ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Style color Min Inventory is negative.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_DOOR_NUM_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Store Number is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_DOOR_NUM_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Store Number {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_ALL_DATE_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Year/Month/Day cannot be blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_YEAR_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Fiscal [-$-Year-$-] is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_MONTH_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Fiscal Month is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_DAY_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Fiscal Day is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_TRANSACTION_DATE_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Transaction Date {0} is not in the valid YYYYMMDD format.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_YEAR_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Fiscal [-$-Year-$-] {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_MONTH_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Fiscal Month {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_DAY_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Fiscal Day {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STYLE_NUMBER_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field [-$-Style_Number-$-] is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_COLOR_CODE_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field [-$-Color_Code-$-] is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_SIZE_CODE_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field [-$-Size_Code-$-] is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STYLE_NUMBER_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'The combination of Vendor Ref Number and [-$-Style_Number-$-] {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_COLOR_CODE_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        '[-$-Color_Code-$-] {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_SIZE_CODE_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        '[-$-Size_Code-$-] {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_YEAR_SEASON_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        '[-$-Season-$-] [-$-Year-$-] {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_SALES_STYLE_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Sales Style is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_SALES_STYLE_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Sales Style {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STORE_COUNTRY_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field [-$-Country-$-] is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STORE_COUNTRY_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        '[-$-Country-$-] {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STORE_STORETYPE_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Store Type is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STORE_STORETYPE_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Store Type {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STORE_DC_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'DC {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STORE_ST_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Stock Category {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PO_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field PO number is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STYLE_YEAR_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Style Year is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STYLE_SEASON_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Style Season is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STYLE_YEAR_SEASON_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Style Year Season does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_GP_CODE_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Golden Packet Code {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_ASN_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field ASN Number is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PO_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'PO number {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_ASN_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'ASN Number {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_RECEIVER_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Receiver Number is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_STORE_DC_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field DC is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_CMM_TRANSFER_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field In Transit Tracking Number is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROMOTION_CODE_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Promotion Code is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROMOTION_CODE_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Promotion code {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTR1_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Prod Attr1 is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTR1_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Prod Attr1 {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTR2_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Prod Attr2 is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTR2_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Prod Attr2 {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTR3_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Prod Attr3 is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTR3_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Prod Attr3 {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTR4_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Prod Attr4 is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTR4_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Prod Attr4 {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTR5_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Prod Attr5 is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTR5_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Prod Attr5 {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_LOC_ATTR1_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Loc Attr1 is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_LOC_ATTR1_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Loc Attr1 {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_LOC_ATTR2_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Loc Attr2 is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_LOC_ATTR2_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Loc Attr2 {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_LOC_ATTR3_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Loc Attr3 is blank' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_LOC_ATTR3_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Loc Attr3 {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_PROD_ATTRS_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Prod Attr combination {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_LOC_ATTRS_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Loc Attr combination {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_START_DATE_INCORRECT ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Start Date {0} is not in the valid YYYYMMDD format.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_CANCEL_DATE_INCORRECT ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Cancel Date {0} is not in the valid YYYYMMDD format.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_IN_DC_DATE_INCORRECT ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'In DC Date {0} is not in the valid YYYYMMDD format.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_END_DATE_INCORRECT ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'End Date {0} is not in the valid YYYYMMDD format.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_RECEIVING_DATE_INCORRECT ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Estimated Receiving Date {0} is not in the valid YYYYMMDD format.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_START_DATE_TOO_LARGE ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Start Date cannot be later than Transaction Date or year/month/week/day.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_RECEIVING_DATE_TOO_LESS ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Start Date cannot be later than Estimated Receiving Date.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_INDC_DT_LARGER_CANCEL_DT ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'In DC Date cannot be later than Cancel Date.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_START_DT_LARGER_CANCEL_DT ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Start Date cannot be later than Cancel Date.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
/*                 SELECT C_START_DT_LARGER_INDC_DT ERROR_CODE,
                        'FORMAT' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Start Date cannot be later than In DC Date.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
*/
                 SELECT C_START_DATE_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Start Date is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_IN_DC_DATE_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field In DC Date is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_END_DATE_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field End Date is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_RECEIVING_DATE_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Receiving Date is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_RECEIVING_DOOR_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Receiving Door Number is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_RECEIVING_DOOR_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Receiving Door Number {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_SENDING_DOOR_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Sending Door Number is blank.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_SENDING_DOOR_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Sending Door Number {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                 UNION ALL
                 SELECT C_SENDING_DC_DOOR_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Sending door number/Sending dc is blank.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_VENDOR_REF_NUM_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Vendor Reference Code is blank.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_VENDOR_REF_NUM_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Vendor Reference Code {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_SENDING_RECEIVING_DOOR_SAME ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Sending Door Num Cannot be equal to Receiving Door Num.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_TOTAL_INDICATOR_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Total Distribution Indicator is blank.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_TOTAL_INDICATOR_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Total Distribution Indicator {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_LOC_ATTR_BLANK ERROR_CODE,
                        'BLANK' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Required field Loc Attr{0} is blank.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_COMBINED_LOC_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Combined Location {0} does not exist in the system.' ERROR_MSG
                   FROM DUAL

                   UNION ALL
                 SELECT C_PO_TRANS_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'The record to be dropped doesn''t exist in our system yet.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_PO_RELEASED_TRANS_EXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Po trans {0} has been released in the system.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_ASN_TRANS_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'The record to be dropped doesn''t exist in our system yet.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_ASN_RELEASED_TRANS_EXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Asn trans {0} has been released in the system.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_REC_TRANS_NOTEXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'The record to be dropped doesn''t exist in our system yet.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_REC_RELEASED_TRANS_EXIST ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Receiver trans {0} has been released in the system.' ERROR_MSG
                   FROM DUAL
/*                   UNION ALL
                 SELECT C_ASN_LINK_MULTIPLE_PO ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Asn number {0} links to multiple po in the system.' ERROR_MSG
                   FROM DUAL
                   UNION ALL
                 SELECT C_REC_LINK_MULTIPLE_ASN ERROR_CODE,
                        'EXISTENCE' ERROR_CATEGORY,
                        1 SEVERITY,
                        'Receiver number {0} links to multiple asn in the system.' ERROR_MSG
                   FROM DUAL
*/
                 ) LOOP

      MERGE INTO DIM_ERROR T
      USING (SELECT ITEM.ERROR_CODE     ERROR_CODE,
                    ITEM.ERROR_CATEGORY ERROR_CATEGORY,
                    ITEM.SEVERITY       SEVERITY
               FROM DUAL) S
      ON (T.ERROR_CODE = S.ERROR_CODE)
      WHEN NOT MATCHED THEN
        INSERT
          (ERROR_ID, ERROR_CODE, ERROR_CATEGORY, SEVERITY)
        VALUES
          (GET_SEQ_NEXTVALUE('SEQ_ERROR'), S.ERROR_CODE, S.ERROR_CATEGORY, S.SEVERITY)
      WHEN MATCHED THEN
        UPDATE
           SET T.ERROR_CATEGORY = S.ERROR_CATEGORY, T.SEVERITY = S.SEVERITY;

      MERGE INTO DIM_ERROR_MSG T
      USING (SELECT ITEM.ERROR_MSG ERROR_MSG, 'EN' LANGUAGE, E.ERROR_ID
               FROM DIM_ERROR E
              WHERE E.ERROR_CODE = ITEM.ERROR_CODE) S
      ON (T.ERROR_ID = S.ERROR_ID AND T.LANGUAGE = S.LANGUAGE)
      WHEN MATCHED THEN
        UPDATE SET T.ERROR_MSG = S.ERROR_MSG
      WHEN NOT MATCHED THEN
        INSERT
          (ERROR_ID, LANGUAGE, ERROR_MSG)
        VALUES
          (S.ERROR_ID, S.LANGUAGE, S.ERROR_MSG);

    END LOOP;

    COMMIT;

  END POP_DIM_ERROR;

  PROCEDURE POP_DIM_COMMON(P_IS_INITIAL BOOLEAN DEFAULT TRUE) IS
  BEGIN
    IF P_IS_INITIAL THEN
      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_COMMON';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_COMMON');

      --POPULATE
      INSERT INTO DIM_COMMON
        (COMMON_ID, COMMON_CODE, COMMON_VALUE, COMMON_DESC)
      VALUES
        (0, C_DUMMY, C_DUMMY, C_DUMMY);
    END IF;

    MERGE INTO DIM_COMMON T
    USING (SELECT 'PO-ASN-RECEIVER_SOURCE_IND' COMMON_CODE,
                  'BREAKDOWN' COMMON_VALUE,
                  'DISCARDED' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'PO-ASN-RECEIVER_SOURCE_IND' COMMON_CODE,
                  'NATIVE' COMMON_VALUE,
                  'DISCARDED' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'PO-ASN-RECEIVER_STATUS_IND' COMMON_CODE,
                  'BREAKDOWN' COMMON_VALUE,
                  'DATA STATUS - DATA WAS BROKE DOWN' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'PO-ASN-RECEIVER_STATUS_IND' COMMON_CODE,
                  'READY' COMMON_VALUE,
                  'DATA STATUS - DATA WAS UPLOADED' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'PO-ASN-RECEIVER_STATUS_IND' COMMON_CODE,
                  'INVALIDATED' COMMON_VALUE,
                  'DATA STATUS - DATA WAS DELETED' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'TRANSFER_STATUS_IND' COMMON_CODE,
                  'SUGGESTED' COMMON_VALUE,
                  'DATA TYPE - SUGGESTED DATA' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'TRANSFER_STATUS_IND' COMMON_CODE,
                  'ADJUSTED' COMMON_VALUE,
                  'DATA TYPE - ADJUSTED DATA' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'TRANSFER_RELEASE_STATUS_IND' COMMON_CODE,
                  'RELEASED' COMMON_VALUE,
                  'DATA TYPE - RELEASED DATA' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'TRANSFER_RELEASE_STATUS_IND' COMMON_CODE,
                  'APO' COMMON_VALUE,
                  'DATA TYPE - GENERATED APO DATA' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'PO-ASN-RECEIVER_STATUS_IND' COMMON_CODE,
                  'SUGGESTED' COMMON_VALUE,
                  'DATA TYPE - SUGGESTED DATA' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'PO-ASN-RECEIVER_STATUS_IND' COMMON_CODE,
                  'ADJUSTED' COMMON_VALUE,
                  'DATA TYPE - ADJUSTED DATA' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'PO-ASN-RECEIVER_STATUS_IND' COMMON_CODE,
                  'RELEASED' COMMON_VALUE,
                  'DATA TYPE - RELEASED DATA' COMMON_DESC
             FROM DUAL
           UNION ALL
           SELECT 'PO-ASN-RECEIVER_STATUS_IND' COMMON_CODE,
                  'APO' COMMON_VALUE,
                  'DATA TYPE - GENERATED APO DATA' COMMON_DESC
             FROM DUAL
           UNION ALL
             SELECT 'PROMOTION_STATUS' COMMON_CODE,
              'UNFULFILLED' COMMON_VALUE,
              'DATA STATUS - DATA WAS UNFULFILLED' COMMON_DESC
             FROM DUAL
           UNION ALL
             SELECT 'PROMOTION_STATUS' COMMON_CODE,
                    'FULFILLED' COMMON_VALUE,
                    'DATA STATUS - DATA WAS FULFILLED' COMMON_DESC
               FROM DUAL
           UNION ALL
             SELECT 'FE_LEVEL' COMMON_CODE,
                    TO_CHAR(LEVEL) COMMON_VALUE,
                    'FE LEVEL '||TO_CHAR(LEVEL) COMMON_DESC
               FROM DUAL
               CONNECT BY LEVEL<10
           UNION ALL
             SELECT 'CMMTRANSFER_TYPE' COMMON_CODE,
                    'SYSTEM_SUGGESTED' COMMON_VALUE,
                    'DATA TYPE - SUGGESTED DATA' COMMON_DESC
             FROM DUAL
           UNION ALL
             SELECT 'CMMTRANSFER_TYPE' COMMON_CODE,
                    'USER_UPLOADED' COMMON_VALUE,
                    'DATA STATUS - DATA WAS UPLOADED' COMMON_DESC
             FROM DUAL
           UNION ALL
             SELECT 'PROMOTION_ACTION_TYPE' COMMON_CODE,
                    'NO_ACTION_REQUIRED' COMMON_VALUE,
                    'DATA TYPE - TARGET INVENTORY IS 0' COMMON_DESC
             FROM DUAL
           UNION ALL
             SELECT 'PROMOTION_ACTION_TYPE' COMMON_CODE,
                    'ACTION_REQUIRED' COMMON_VALUE,
                    'DATA TYPE - TARGET INVENTORY IS EMPTY OR MORE THAN 0' COMMON_DESC
             FROM DUAL
         ) S
    ON (T.COMMON_CODE = S.COMMON_CODE AND T.COMMON_VALUE = S.COMMON_VALUE)
    WHEN NOT MATCHED THEN
      INSERT
        (COMMON_ID, COMMON_CODE, COMMON_VALUE, COMMON_DESC)
      VALUES
        (GET_SEQ_NEXTVALUE('SEQ_COMMON'), S.COMMON_CODE, S.COMMON_VALUE, S.COMMON_DESC);

    COMMIT;

  END POP_DIM_COMMON;

  PROCEDURE POP_DIM_CRITERIA_GROUP(P_IS_INITIAL BOOLEAN DEFAULT TRUE) IS
    L_DATE              DATE := SYSDATE;
    L_CRITERIA_GROUP_ID DIM_CRITERIA_GROUP.CRITERIA_GROUP_ID%TYPE;
    L_DW_VERSION        DIM_CRITERIA_GROUP.DW_CURRFLAG%TYPE;

  BEGIN

    IF P_IS_INITIAL THEN

      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_CRITERIA_GROUP';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_CRITERIA_ITEM';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_CRITERIA_GROUP_LOC_REL';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_CRITERIA_GROUP_PROD_REL';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_CRITERIA_GROUP_YS_REL';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_CRITERIA_GROUP');
      RESET_SEQUENCE('SEQ_CRITERIA_ITEM');

      INSERT INTO DIM_CRITERIA_GROUP
        (CRITERIA_GROUP_ID,
         SOURCE_BUSKEY,
         DIMENSION,
         HIERARCHY,
         DW_START_DATE,
         DW_END_DATE,
         DW_VERSION,
         DW_CURRFLAG)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         TO_DATE('19000101', 'YYYYMMDD'),
         TO_DATE('99991231', 'YYYYMMDD'),
         1,
         'Y');

      INSERT INTO DIM_CRITERIA_ITEM
        (CRITERIA_ITEM_ID,
         SOURCE_BUSKEY,
         CRITERIA_GROUP_ID,
         NAME,
         VALUE,
         SEQ)
      VALUES
        (0, C_DUMMY, 0, C_DUMMY, C_DUMMY, 0);

    END IF;


    UPDATE DIM_CRITERIA_GROUP Z
       SET Z.DW_END_DATE = L_DATE, Z.DW_CURRFLAG = 'N'
     WHERE EXISTS(WITH SOURCE AS (SELECT UPPER(I.SETTING_ID || C_DELIMITER ||
                                         I.DIMENSION) SOURCE_BUSKEY,
                                   I.DIMENSION,
                                   I.CONTENT
                              FROM (SELECT O.SETTING_ID,
                                           O.DIM_NAME DIMENSION,
                                           O.HIERARCHY_NAME HIERARCHY,
                                           CAST(COLLECT(O.ATTR_NAME ||
                                                        C_DELIMITER ||
                                                        O.ATTR_VALUE
                                                        ORDER BY
                                                        O.CRITERIA_ATTR_SEQ,
                                                        O.FILTER_COLUMN_SEQ,
                                                        O.ATTR_VALUE) AS
                                                NNT_STRS) CONTENT
                                      FROM (SELECT T.*,
                                                   A.ATTR_NAME,
                                                   A.DIM_NAME,
                                                   A.HIERARCHY_NAME
                                              FROM ALLOCATE_SETTING@MYLINKAPP S
                                             INNER JOIN ALLOCATE_SETTING_CRITERIA@MYLINKAPP T
                                                ON S.SETTING_ID =
                                                   T.SETTING_ID
                                             INNER JOIN COMPANY_CRITERIA@MYLINKAPP C
                                                ON C.CRITERIA_TYPE =
                                                   S.CRITERIA_TYPE
                                             INNER JOIN META_DIM_HIER_LEVEL_ATTRS A
                                                ON UPPER(CASE
                                                          T.CRITERIA_ATTR_SEQ
                                                           WHEN 1 THEN
                                                            C.ATTR_NAME1
                                                           WHEN 2 THEN
                                                            C.ATTR_NAME2
                                                           WHEN 3 THEN
                                                            C.ATTR_NAME3
                                                           WHEN 4 THEN
                                                            C.ATTR_NAME4
                                                           WHEN 5 THEN
                                                            C.ATTR_NAME5
                                                           WHEN 6 THEN
                                                            C.ATTR_NAME6
                                                           WHEN 7 THEN
                                                            C.ATTR_NAME7
                                                           WHEN 8 THEN
                                                            C.ATTR_NAME8
                                                           WHEN 9 THEN
                                                            C.ATTR_NAME9
                                                           WHEN 10 THEN
                                                            C.ATTR_NAME10
                                                         END) =A.BUSINESS_DESC
                                              WHERE (A.DIM_NAME,A.HIERARCHY_NAME) IN
                                                   (
                                                    (C_STYLE_DIM,C_STYLE_PRIMARY_SIZE_HIER),
                                                    (C_STORE_DIM,C_STORE_PRIMARY_DETAIL_HIER),
                                                    (C_YEARSEASON_DIM,C_YEARSEASON_PRIMARY_SIZE_HIER)
                                                    )
                                                         ) O
                                     GROUP BY O.DIM_NAME, O.HIERARCHY_NAME,O.SETTING_ID) I),
                                     TARGET AS (SELECT G.SOURCE_BUSKEY,
                                                  G.DIMENSION,
                                                  G.HIERARCHY,
                                                  G.DW_VERSION,
                                                  CAST(COLLECT(I.NAME ||
                                                               C_DELIMITER ||
                                                               I.VALUE
                                                               ORDER BY
                                                               I.SEQ,
                                                               I.VALUE) AS
                                                       NNT_STRS) CONTENT
                                             FROM DIM_CRITERIA_GROUP G
                                            INNER JOIN DIM_CRITERIA_ITEM I
                                               ON G.CRITERIA_GROUP_ID =
                                                  I.CRITERIA_GROUP_ID
                                            WHERE G.DW_CURRFLAG = 'Y'
                                            GROUP BY G.SOURCE_BUSKEY,
                                                     G.DIMENSION,
                                                     G.HIERARCHY,
                                                     G.DW_VERSION)
       SELECT 1
         FROM SOURCE X
        INNER JOIN TARGET Y
           ON X.SOURCE_BUSKEY = Y.SOURCE_BUSKEY
        WHERE X.CONTENT <> Y.CONTENT
          AND X.SOURCE_BUSKEY = Z.SOURCE_BUSKEY) AND Z.DW_CURRFLAG = 'Y';

    INSERT INTO DIM_CRITERIA_GROUP
      (CRITERIA_GROUP_ID,
       SOURCE_BUSKEY,
       DIMENSION,
       HIERARCHY,
       DW_START_DATE,
       DW_END_DATE,
       DW_VERSION,
       DW_CURRFLAG)
      WITH SOURCE AS
       (SELECT UPPER(I.SETTING_ID || C_DELIMITER || I.DIMENSION) SOURCE_BUSKEY,
               I.DIMENSION,
               I.HIERARCHY,
               I.CONTENT
          FROM (SELECT O.SETTING_ID,
                       O.DIM_NAME DIMENSION,
                       O.HIERARCHY_NAME HIERARCHY,
                       CAST(COLLECT(O.ATTR_NAME || C_DELIMITER ||
                                    O.ATTR_VALUE ORDER BY O.CRITERIA_ATTR_SEQ,
                                    O.FILTER_COLUMN_SEQ,
                                    O.ATTR_VALUE) AS NNT_STRS) CONTENT
                  FROM (SELECT T.*, A.ATTR_NAME, A.DIM_NAME,A.HIERARCHY_NAME
                          FROM ALLOCATE_SETTING@MYLINKAPP S
                         INNER JOIN ALLOCATE_SETTING_CRITERIA@MYLINKAPP T
                            ON S.SETTING_ID = T.SETTING_ID
                         INNER JOIN COMPANY_CRITERIA@MYLINKAPP C
                            ON C.CRITERIA_TYPE = S.CRITERIA_TYPE
                         INNER JOIN META_DIM_HIER_LEVEL_ATTRS A
                            ON UPPER(CASE T.CRITERIA_ATTR_SEQ
                                       WHEN 1 THEN
                                        C.ATTR_NAME1
                                       WHEN 2 THEN
                                        C.ATTR_NAME2
                                       WHEN 3 THEN
                                        C.ATTR_NAME3
                                       WHEN 4 THEN
                                        C.ATTR_NAME4
                                       WHEN 5 THEN
                                        C.ATTR_NAME5
                                       WHEN 6 THEN
                                        C.ATTR_NAME6
                                       WHEN 7 THEN
                                        C.ATTR_NAME7
                                       WHEN 8 THEN
                                        C.ATTR_NAME8
                                       WHEN 9 THEN
                                        C.ATTR_NAME9
                                       WHEN 10 THEN
                                        C.ATTR_NAME10
                                     END) = A.BUSINESS_DESC
                         WHERE (A.DIM_NAME,A.HIERARCHY_NAME) IN
                                 (
                                  (C_STYLE_DIM,C_STYLE_PRIMARY_SIZE_HIER),
                                  (C_STORE_DIM,C_STORE_PRIMARY_DETAIL_HIER),
                                  (C_YEARSEASON_DIM,C_YEARSEASON_PRIMARY_SIZE_HIER)
                                  )
                         ) O
                 GROUP BY O.DIM_NAME, O.HIERARCHY_NAME,O.SETTING_ID) I),
      TARGET AS
       (SELECT G.SOURCE_BUSKEY,
               G.DIMENSION,
               G.HIERARCHY,
               G.DW_VERSION,
               CAST(COLLECT(I.NAME || C_DELIMITER || I.VALUE ORDER BY I.SEQ,
                            I.VALUE) AS NNT_STRS) CONTENT
          FROM (
          SELECT SOURCE_BUSKEY,
                 DIMENSION,
                 HIERARCHY,
                 MAX(DW_VERSION) DW_VERSION,
                 MAX(CRITERIA_GROUP_ID) KEEP(DENSE_RANK LAST ORDER BY DW_VERSION) CRITERIA_GROUP_ID
          FROM DIM_CRITERIA_GROUP
          GROUP BY SOURCE_BUSKEY, DIMENSION,HIERARCHY
          ) G
         INNER JOIN DIM_CRITERIA_ITEM I
            ON G.CRITERIA_GROUP_ID = I.CRITERIA_GROUP_ID
         GROUP BY G.SOURCE_BUSKEY, G.DIMENSION, G.HIERARCHY, G.DW_VERSION)
      SELECT SEQ_CRITERIA_GROUP.NEXTVAL,
             S.SOURCE_BUSKEY,
             S.DIMENSION,
             S.HIERARCHY,
             (CASE
               WHEN T.SOURCE_BUSKEY IS NULL THEN
                TO_DATE('19000101', 'YYYYMMDD')
               ELSE
                L_DATE + 1 / 24 / 3600
             END),
             TO_DATE('99991231', 'YYYYMMDD'),
             (CASE
               WHEN T.SOURCE_BUSKEY IS NULL THEN
                1
               ELSE
                T.DW_VERSION + 1
             END),
             'Y'
        FROM SOURCE S
        LEFT JOIN TARGET T
          ON S.SOURCE_BUSKEY = T.SOURCE_BUSKEY
       WHERE T.SOURCE_BUSKEY IS NULL
          OR S.CONTENT <> T.CONTENT;


    INSERT INTO DIM_CRITERIA_ITEM
      (CRITERIA_ITEM_ID,
       SOURCE_BUSKEY,
       CRITERIA_GROUP_ID,
       NAME,
       VALUE,
       SEQ)
      WITH SOURCE AS
       (SELECT UPPER(I.SETTING_ID || C_DELIMITER || I.DIMENSION) SOURCE_BUSKEY,
               I.DIMENSION,
               I.HIERARCHY,
               I.CONTENT
          FROM (SELECT O.SETTING_ID,
                       O.DIM_NAME DIMENSION,
                       O.HIERARCHY_NAME HIERARCHY,
                       CAST(COLLECT(O.ATTR_NAME || C_DELIMITER ||
                                    O.ATTR_VALUE ORDER BY O.CRITERIA_ATTR_SEQ,
                                    O.FILTER_COLUMN_SEQ,
                                    O.ATTR_VALUE) AS NNT_STRS) CONTENT
                  FROM (SELECT T.*, A.ATTR_NAME, A.DIM_NAME, A.HIERARCHY_NAME
                          FROM ALLOCATE_SETTING@MYLINKAPP S
                         INNER JOIN ALLOCATE_SETTING_CRITERIA@MYLINKAPP T
                            ON S.SETTING_ID = T.SETTING_ID
                         INNER JOIN COMPANY_CRITERIA@MYLINKAPP C
                            ON C.CRITERIA_TYPE = S.CRITERIA_TYPE
                         INNER JOIN META_DIM_HIER_LEVEL_ATTRS A
                            ON UPPER(CASE T.CRITERIA_ATTR_SEQ
                                       WHEN 1 THEN
                                        C.ATTR_NAME1
                                       WHEN 2 THEN
                                        C.ATTR_NAME2
                                       WHEN 3 THEN
                                        C.ATTR_NAME3
                                       WHEN 4 THEN
                                        C.ATTR_NAME4
                                       WHEN 5 THEN
                                        C.ATTR_NAME5
                                       WHEN 6 THEN
                                        C.ATTR_NAME6
                                       WHEN 7 THEN
                                        C.ATTR_NAME7
                                       WHEN 8 THEN
                                        C.ATTR_NAME8
                                       WHEN 9 THEN
                                        C.ATTR_NAME9
                                       WHEN 10 THEN
                                        C.ATTR_NAME10
                                     END) = A.BUSINESS_DESC
                         WHERE (A.DIM_NAME,A.HIERARCHY_NAME) IN
                                 (
                                  (C_STYLE_DIM,C_STYLE_PRIMARY_SIZE_HIER),
                                  (C_STORE_DIM,C_STORE_PRIMARY_DETAIL_HIER),
                                  (C_YEARSEASON_DIM,C_YEARSEASON_PRIMARY_SIZE_HIER)
                                  )
                         ) O
                 GROUP BY O.DIM_NAME, O.HIERARCHY_NAME,O.SETTING_ID) I),
      TARGET AS
       (SELECT G.SOURCE_BUSKEY,
               G.DIMENSION,
               G.HIERARCHY,
               G.DW_VERSION,
               CAST(COLLECT(I.NAME || C_DELIMITER || I.VALUE ORDER BY I.SEQ,
                            I.VALUE) AS NNT_STRS) CONTENT
          FROM DIM_CRITERIA_GROUP G
         INNER JOIN DIM_CRITERIA_ITEM I
            ON G.CRITERIA_GROUP_ID = I.CRITERIA_GROUP_ID
         WHERE G.DW_CURRFLAG = 'Y'
         GROUP BY G.SOURCE_BUSKEY, G.DIMENSION, G.HIERARCHY,G.DW_VERSION),

      ITEM_SOURCE AS
       (SELECT UPPER(O.SETTING_ID || C_DELIMITER || O.DIMENSION) GROUP_SOURCE_BUSKEY,
               TO_CHAR(O.SETTING_CRITERIA_ID) SOURCE_BUSKEY,
               O.ATTR_NAME NAME,
               O.ATTR_VALUE VALUE,
               O.FILTER_COLUMN_SEQ SEQ
          FROM (SELECT T.*, A.ATTR_NAME, A.DIM_NAME DIMENSION,A.HIERARCHY_NAME HIERARCHY
                  FROM ALLOCATE_SETTING@MYLINKAPP S
                 INNER JOIN ALLOCATE_SETTING_CRITERIA@MYLINKAPP T
                    ON S.SETTING_ID = T.SETTING_ID
                 INNER JOIN COMPANY_CRITERIA@MYLINKAPP C
                    ON C.CRITERIA_TYPE = S.CRITERIA_TYPE
                 INNER JOIN META_DIM_HIER_LEVEL_ATTRS A
                    ON UPPER(CASE T.CRITERIA_ATTR_SEQ
                               WHEN 1 THEN
                                C.ATTR_NAME1
                               WHEN 2 THEN
                                C.ATTR_NAME2
                               WHEN 3 THEN
                                C.ATTR_NAME3
                               WHEN 4 THEN
                                C.ATTR_NAME4
                               WHEN 5 THEN
                                C.ATTR_NAME5
                               WHEN 6 THEN
                                C.ATTR_NAME6
                               WHEN 7 THEN
                                C.ATTR_NAME7
                               WHEN 8 THEN
                                C.ATTR_NAME8
                               WHEN 9 THEN
                                C.ATTR_NAME9
                               WHEN 10 THEN
                                C.ATTR_NAME10
                             END) = A.BUSINESS_DESC
                         WHERE (A.DIM_NAME,A.HIERARCHY_NAME) IN
                                 (
                                  (C_STYLE_DIM,C_STYLE_PRIMARY_SIZE_HIER),
                                  (C_STORE_DIM,C_STORE_PRIMARY_DETAIL_HIER),
                                  (C_YEARSEASON_DIM,C_YEARSEASON_PRIMARY_SIZE_HIER)
                                  )
                             ) O)
      SELECT SEQ_CRITERIA_ITEM.NEXTVAL,
             I.SOURCE_BUSKEY,
             G.CRITERIA_GROUP_ID,
             I.NAME,
             I.VALUE,
             I.SEQ
        FROM ITEM_SOURCE I
       INNER JOIN SOURCE S
          ON I.GROUP_SOURCE_BUSKEY = S.SOURCE_BUSKEY
       INNER JOIN DIM_CRITERIA_GROUP G
          ON S.SOURCE_BUSKEY = G.SOURCE_BUSKEY
         AND G.DW_CURRFLAG = 'Y'
        LEFT JOIN TARGET T
          ON S.SOURCE_BUSKEY = T.SOURCE_BUSKEY
       WHERE T.SOURCE_BUSKEY IS NULL
          OR S.CONTENT <> T.CONTENT;

    --generating criteria group for transfer subrules
    --POPULATE FOR STYLE EXCEPTION
    FOR CR IN (WITH SOURCE1 AS
                  (SELECT S.SETTING_ID,
                         SRS.TRANSFER_SUBRULE_ID,
                         C_STYLE_DIM DIM_NAME,
                         C_STYLE_PRIMARY_SIZE_HIER HIER_NAME,
                         'S_ORI_STYLE_ID' ATTR_NAME,
                         TO_CHAR(STYLE_ID) ATTR_VALUE,
                         999 SEQ
                    FROM ALLOCATE_TRANSFER_SR_STYLE@MYLINKAPP SRS
                   INNER JOIN ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
                      ON SRS.TRANSFER_SUBRULE_ID = SR.TRANSFER_SUBRULE_ID
                   INNER JOIN ALLOCATE_TRANSFER_RULE@MYLINKAPP R
                      ON SR.TRANSFER_RULE_ID = R.TRANSFER_RULE_ID
                   INNER JOIN ALLOCATE_SETTING@MYLINKAPP S
                      ON R.SETTING_VALUE_ID = S.SETTING_VALUE_ID
                  UNION
                  SELECT E.SETTING_ID,
                         SR.TRANSFER_SUBRULE_ID,
                         A.DIM_NAME,
                         A.HIERARCHY_NAME HIER_NAME,
                         A.ATTR_NAME,
                         T.ATTR_VALUE,
                         T.FILTER_COLUMN_SEQ SEQ
                    FROM ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
                   INNER JOIN ALLOCATE_TRANSFER_RULE@MYLINKAPP R
                      ON SR.TRANSFER_RULE_ID = R.TRANSFER_RULE_ID
                   INNER JOIN ALLOCATE_SETTING@MYLINKAPP E
                      ON R.SETTING_VALUE_ID = E.SETTING_VALUE_ID
                   INNER JOIN ALLOCATE_SETTING_CRITERIA@MYLINKAPP T
                      ON E.SETTING_ID = T.SETTING_ID
                   INNER JOIN COMPANY_CRITERIA@MYLINKAPP C
                      ON C.CRITERIA_TYPE = E.CRITERIA_TYPE
                   INNER JOIN META_DIM_HIER_LEVEL_ATTRS A
                      ON UPPER(CASE T.CRITERIA_ATTR_SEQ
                                 WHEN 1 THEN
                                  C.ATTR_NAME1
                                 WHEN 2 THEN
                                  C.ATTR_NAME2
                                 WHEN 3 THEN
                                  C.ATTR_NAME3
                                 WHEN 4 THEN
                                  C.ATTR_NAME4
                                 WHEN 5 THEN
                                  C.ATTR_NAME5
                                 WHEN 6 THEN
                                  C.ATTR_NAME6
                                 WHEN 7 THEN
                                  C.ATTR_NAME7
                                 WHEN 8 THEN
                                  C.ATTR_NAME8
                                 WHEN 9 THEN
                                  C.ATTR_NAME9
                                 WHEN 10 THEN
                                  C.ATTR_NAME10
                               END) = A.BUSINESS_DESC
                   WHERE A.DIM_NAME = C_STYLE_DIM
                     AND A.HIERARCHY_NAME = C_STYLE_PRIMARY_SIZE_HIER),
                 SOURCE AS
                  (SELECT TO_CHAR(SETTING_ID) || C_DELIMITER || DIM_NAME ||
                         C_DELIMITER || TO_CHAR(TRANSFER_SUBRULE_ID) SOURCE_BUSKEY,
                         DIM_NAME DIMENSION,
                         HIER_NAME HIERARCHY,
                         CAST(COLLECT(ATTR_NAME || C_DELIMITER || ATTR_VALUE ||
                                      C_DELIMITER || SEQ ORDER BY SEQ,
                                      ATTR_VALUE) AS NNT_STRS) ATTR_VALUES
                    FROM SOURCE1
                   GROUP BY TO_CHAR(SETTING_ID) || C_DELIMITER || DIM_NAME ||
                            C_DELIMITER || TO_CHAR(TRANSFER_SUBRULE_ID),
                            DIM_NAME,
                            HIER_NAME),
                 TARGET AS
                  (SELECT G.SOURCE_BUSKEY,
                         G.DIMENSION,
                         G.HIERARCHY,
                         CAST(COLLECT(I.NAME || C_DELIMITER || I.VALUE ||
                                      C_DELIMITER || I.SEQ ORDER BY I.SEQ,
                                      I.VALUE) AS NNT_STRS) ATTR_VALUES
                    FROM DIM_CRITERIA_GROUP G
                   INNER JOIN DIM_CRITERIA_ITEM I
                      ON G.CRITERIA_GROUP_ID = I.CRITERIA_GROUP_ID
                   WHERE G.DW_CURRFLAG = 'Y'
                   GROUP BY G.SOURCE_BUSKEY, G.DIMENSION , G.HIERARCHY)
                 SELECT X.SOURCE_BUSKEY X_SOURCE_BUSKEY,
                        X.ATTR_VALUES   X_ATTR_VALUES,
                        X.DIMENSION     X_DIMENSION,
                        X.HIERARCHY     X_HIERARCHY,
                        Y.SOURCE_BUSKEY Y_SOURCE_BUSKEY,
                        Y.ATTR_VALUES   Y_ATTR_VALUES
                   FROM SOURCE X
                   LEFT JOIN TARGET Y
                     ON X.SOURCE_BUSKEY = Y.SOURCE_BUSKEY
                  WHERE Y.SOURCE_BUSKEY IS NULL
                     OR X.ATTR_VALUES <> Y.ATTR_VALUES) LOOP
      IF CR.Y_SOURCE_BUSKEY IS NULL THEN

        INSERT INTO DIM_CRITERIA_GROUP
          (CRITERIA_GROUP_ID,
           SOURCE_BUSKEY,
           DIMENSION,
           HIERARCHY,
           DW_START_DATE,
           DW_END_DATE,
           DW_VERSION,
           DW_CURRFLAG)
        VALUES
          (SEQ_CRITERIA_GROUP.NEXTVAL,
           CR.X_SOURCE_BUSKEY,
           CR.X_DIMENSION,
           CR.X_HIERARCHY,
           TO_DATE('19000101', 'YYYYMMDD'),
           TO_DATE('99991231', 'YYYYMMDD'),
           1,
           'Y')
        RETURNING CRITERIA_GROUP_ID INTO L_CRITERIA_GROUP_ID;

        INSERT INTO DIM_CRITERIA_ITEM
          (CRITERIA_ITEM_ID,
           SOURCE_BUSKEY,
           CRITERIA_GROUP_ID,
           NAME,
           VALUE,
           SEQ)
          SELECT SEQ_CRITERIA_ITEM.NEXTVAL,
                 X_SOURCE_BUSKEY || C_DELIMITER || ROWNUM SOURCE_BUSKEY,
                 L_CRITERIA_GROUP_ID,
                 NAME,
                 VALUE,
                 SEQ
            FROM (SELECT CR.X_SOURCE_BUSKEY,
                         SUBSTR(O.COLUMN_VALUE,
                                1,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1) - 1) NAME,
                         SUBSTR(O.COLUMN_VALUE,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 1) + 1,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2) -
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 1) - 1) VALUE,
                         SUBSTR(O.COLUMN_VALUE,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2) + 1,
                                LENGTH(O.COLUMN_VALUE) -
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2)) SEQ
                    FROM TABLE(CR.X_ATTR_VALUES) O);

      ELSE
        UPDATE DIM_CRITERIA_GROUP
           SET DW_END_DATE = L_DATE, DW_CURRFLAG = 'N'
         WHERE SOURCE_BUSKEY = CR.X_SOURCE_BUSKEY
           AND DW_CURRFLAG = 'Y'
        RETURNING DW_VERSION INTO L_DW_VERSION;

        INSERT INTO DIM_CRITERIA_GROUP
          (CRITERIA_GROUP_ID,
           SOURCE_BUSKEY,
           DIMENSION,
           HIERARCHY,
           DW_START_DATE,
           DW_END_DATE,
           DW_VERSION,
           DW_CURRFLAG)
        VALUES
          (SEQ_CRITERIA_GROUP.NEXTVAL,
           CR.X_SOURCE_BUSKEY,
           CR.X_DIMENSION,
           CR.X_HIERARCHY,
           L_DATE + 1 / 24 / 3600,
           TO_DATE('99991231', 'YYYYMMDD'),
           L_DW_VERSION + 1,
           'Y')
        RETURNING CRITERIA_GROUP_ID INTO L_CRITERIA_GROUP_ID;

        INSERT INTO DIM_CRITERIA_ITEM
          (CRITERIA_ITEM_ID,
           SOURCE_BUSKEY,
           CRITERIA_GROUP_ID,
           NAME,
           VALUE,
           SEQ)
          SELECT SEQ_CRITERIA_ITEM.NEXTVAL,
                 X_SOURCE_BUSKEY || C_DELIMITER || ROWNUM SOURCE_BUSKEY,
                 L_CRITERIA_GROUP_ID,
                 NAME,
                 VALUE,
                 SEQ
            FROM (SELECT CR.X_SOURCE_BUSKEY,
                         SUBSTR(O.COLUMN_VALUE,
                                1,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1) - 1) NAME,
                         SUBSTR(O.COLUMN_VALUE,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 1) + 1,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2) -
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 1) - 1) VALUE,
                         SUBSTR(O.COLUMN_VALUE,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2) + 1,
                                LENGTH(O.COLUMN_VALUE) -
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2)) SEQ
                    FROM TABLE(CR.X_ATTR_VALUES) O);

      END IF;

    END LOOP;

    --POPULATE FOR DOOR EXCEPTION
    FOR CR IN (WITH SOURCE1 AS
                  (SELECT S.SETTING_ID,
                         SRS.TRANSFER_SUBRULE_ID,
                         C_STORE_DIM DIM_NAME,
                         C_STORE_PRIMARY_DETAIL_HIER HIER_NAME,
                         'ORI_COMPANY_DOOR_ID' ATTR_NAME,
                         TO_CHAR(COMPANY_DOOR_ID) ATTR_VALUE,
                         999 SEQ
                    FROM ALLOCATE_TRANSFER_SR_DOOR@MYLINKAPP SRS
                   INNER JOIN ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
                      ON SRS.TRANSFER_SUBRULE_ID = SR.TRANSFER_SUBRULE_ID
                   INNER JOIN ALLOCATE_TRANSFER_RULE@MYLINKAPP R
                      ON SR.TRANSFER_RULE_ID = R.TRANSFER_RULE_ID
                   INNER JOIN ALLOCATE_SETTING@MYLINKAPP S
                      ON R.SETTING_VALUE_ID = S.SETTING_VALUE_ID
                  UNION
                  SELECT E.SETTING_ID,
                         SR.TRANSFER_SUBRULE_ID,
                         A.DIM_NAME,
                         A.HIERARCHY_NAME HIER_NAME,
                         A.ATTR_NAME,
                         T.ATTR_VALUE,
                         T.FILTER_COLUMN_SEQ SEQ
                    FROM ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
                   INNER JOIN ALLOCATE_TRANSFER_RULE@MYLINKAPP R
                      ON SR.TRANSFER_RULE_ID = R.TRANSFER_RULE_ID
                   INNER JOIN ALLOCATE_SETTING@MYLINKAPP E
                      ON R.SETTING_VALUE_ID = E.SETTING_VALUE_ID
                   INNER JOIN ALLOCATE_SETTING_CRITERIA@MYLINKAPP T
                      ON E.SETTING_ID = T.SETTING_ID
                   INNER JOIN COMPANY_CRITERIA@MYLINKAPP C
                      ON C.CRITERIA_TYPE = E.CRITERIA_TYPE
                   INNER JOIN META_DIM_HIER_LEVEL_ATTRS A
                      ON UPPER(CASE T.CRITERIA_ATTR_SEQ
                                 WHEN 1 THEN
                                  C.ATTR_NAME1
                                 WHEN 2 THEN
                                  C.ATTR_NAME2
                                 WHEN 3 THEN
                                  C.ATTR_NAME3
                                 WHEN 4 THEN
                                  C.ATTR_NAME4
                                 WHEN 5 THEN
                                  C.ATTR_NAME5
                                 WHEN 6 THEN
                                  C.ATTR_NAME6
                                 WHEN 7 THEN
                                  C.ATTR_NAME7
                                 WHEN 8 THEN
                                  C.ATTR_NAME8
                                 WHEN 9 THEN
                                  C.ATTR_NAME9
                                 WHEN 10 THEN
                                  C.ATTR_NAME10
                               END) = A.BUSINESS_DESC
                   WHERE A.DIM_NAME = C_STORE_DIM
                     AND A.HIERARCHY_NAME = C_STORE_PRIMARY_DETAIL_HIER
                     ),
                 SOURCE AS
                  (SELECT TO_CHAR(SETTING_ID) || C_DELIMITER || DIM_NAME ||
                         C_DELIMITER || TO_CHAR(TRANSFER_SUBRULE_ID) SOURCE_BUSKEY,
                         DIM_NAME DIMENSION,
                         HIER_NAME HIERARCHY,
                         CAST(COLLECT(ATTR_NAME || C_DELIMITER || ATTR_VALUE ||
                                      C_DELIMITER || SEQ ORDER BY SEQ,
                                      ATTR_VALUE) AS NNT_STRS) ATTR_VALUES
                    FROM SOURCE1
                   GROUP BY TO_CHAR(SETTING_ID) || C_DELIMITER || DIM_NAME ||
                            C_DELIMITER || TO_CHAR(TRANSFER_SUBRULE_ID),
                            DIM_NAME,
                            HIER_NAME),
                 TARGET AS
                  (SELECT G.SOURCE_BUSKEY,
                         G.DIMENSION,
                         G.HIERARCHY,
                         CAST(COLLECT(I.NAME || C_DELIMITER || I.VALUE ||
                                      C_DELIMITER || I.SEQ ORDER BY I.SEQ,
                                      I.VALUE) AS NNT_STRS) ATTR_VALUES
                    FROM DIM_CRITERIA_GROUP G
                   INNER JOIN DIM_CRITERIA_ITEM I
                      ON G.CRITERIA_GROUP_ID = I.CRITERIA_GROUP_ID
                   WHERE G.DW_CURRFLAG = 'Y'
                   GROUP BY G.SOURCE_BUSKEY, G.DIMENSION ,G.HIERARCHY)
                 SELECT X.SOURCE_BUSKEY X_SOURCE_BUSKEY,
                        X.ATTR_VALUES   X_ATTR_VALUES,
                        X.DIMENSION     X_DIMENSION,
                        X.HIERARCHY     X_HIERARCHY,
                        Y.SOURCE_BUSKEY Y_SOURCE_BUSKEY,
                        Y.ATTR_VALUES   Y_ATTR_VALUES
                   FROM SOURCE X
                   LEFT JOIN TARGET Y
                     ON X.SOURCE_BUSKEY = Y.SOURCE_BUSKEY
                  WHERE Y.SOURCE_BUSKEY IS NULL
                     OR X.ATTR_VALUES <> Y.ATTR_VALUES) LOOP
      IF CR.Y_SOURCE_BUSKEY IS NULL THEN

        INSERT INTO DIM_CRITERIA_GROUP
          (CRITERIA_GROUP_ID,
           SOURCE_BUSKEY,
           DIMENSION,
           HIERARCHY,
           DW_START_DATE,
           DW_END_DATE,
           DW_VERSION,
           DW_CURRFLAG)
        VALUES
          (SEQ_CRITERIA_GROUP.NEXTVAL,
           CR.X_SOURCE_BUSKEY,
           CR.X_DIMENSION,
           CR.X_HIERARCHY,
           TO_DATE('19000101', 'YYYYMMDD'),
           TO_DATE('99991231', 'YYYYMMDD'),
           1,
           'Y')
        RETURNING CRITERIA_GROUP_ID INTO L_CRITERIA_GROUP_ID;

        INSERT INTO DIM_CRITERIA_ITEM
          (CRITERIA_ITEM_ID,
           SOURCE_BUSKEY,
           CRITERIA_GROUP_ID,
           NAME,
           VALUE,
           SEQ)
          SELECT SEQ_CRITERIA_ITEM.NEXTVAL,
                 X_SOURCE_BUSKEY || C_DELIMITER || ROWNUM SOURCE_BUSKEY,
                 L_CRITERIA_GROUP_ID,
                 NAME,
                 VALUE,
                 SEQ
            FROM (SELECT CR.X_SOURCE_BUSKEY,
                         SUBSTR(O.COLUMN_VALUE,
                                1,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1) - 1) NAME,
                         SUBSTR(O.COLUMN_VALUE,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 1) + 1,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2) -
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 1) - 1) VALUE,
                         SUBSTR(O.COLUMN_VALUE,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2) + 1,
                                LENGTH(O.COLUMN_VALUE) -
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2)) SEQ
                    FROM TABLE(CR.X_ATTR_VALUES) O);

      ELSE
        UPDATE DIM_CRITERIA_GROUP
           SET DW_END_DATE = L_DATE, DW_CURRFLAG = 'N'
         WHERE SOURCE_BUSKEY = CR.X_SOURCE_BUSKEY
           AND DW_CURRFLAG = 'Y'
        RETURNING DW_VERSION INTO L_DW_VERSION;

        INSERT INTO DIM_CRITERIA_GROUP
          (CRITERIA_GROUP_ID,
           SOURCE_BUSKEY,
           DIMENSION,
           HIERARCHY,
           DW_START_DATE,
           DW_END_DATE,
           DW_VERSION,
           DW_CURRFLAG)
        VALUES
          (SEQ_CRITERIA_GROUP.NEXTVAL,
           CR.X_SOURCE_BUSKEY,
           CR.X_DIMENSION,
           CR.X_HIERARCHY,
           L_DATE + 1 / 24 / 3600,
           TO_DATE('99991231', 'YYYYMMDD'),
           L_DW_VERSION + 1,
           'Y')
        RETURNING CRITERIA_GROUP_ID INTO L_CRITERIA_GROUP_ID;

        INSERT INTO DIM_CRITERIA_ITEM
          (CRITERIA_ITEM_ID,
           SOURCE_BUSKEY,
           CRITERIA_GROUP_ID,
           NAME,
           VALUE,
           SEQ)
          SELECT SEQ_CRITERIA_ITEM.NEXTVAL,
                 X_SOURCE_BUSKEY || C_DELIMITER || ROWNUM SOURCE_BUSKEY,
                 L_CRITERIA_GROUP_ID,
                 NAME,
                 VALUE,
                 SEQ
            FROM (SELECT CR.X_SOURCE_BUSKEY,
                         SUBSTR(O.COLUMN_VALUE,
                                1,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1) - 1) NAME,
                         SUBSTR(O.COLUMN_VALUE,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 1) + 1,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2) -
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 1) - 1) VALUE,
                         SUBSTR(O.COLUMN_VALUE,
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2) + 1,
                                LENGTH(O.COLUMN_VALUE) -
                                INSTR(O.COLUMN_VALUE, C_DELIMITER, 1, 2)) SEQ
                    FROM TABLE(CR.X_ATTR_VALUES) O);

      END IF;

    END LOOP;

    COMMIT;

  END POP_DIM_CRITERIA_GROUP;

  PROCEDURE POP_DIM_STORE(P_IS_INITIAL BOOLEAN DEFAULT TRUE) IS
    L_MERGECLAUSE   VARCHAR2(1000);
    L_UPDATECLAUSE  VARCHAR2(2000);
    L_INSERTCLAUSE1 VARCHAR2(1000);
    L_INSERTCLAUSE2 VARCHAR2(1000);
    L_FIELD         VARCHAR2(100);
    I               NUMBER(3);

    L_SQL1       VARCHAR2(2000);
    L_SQL2       VARCHAR2(1000);
    L_SQL3       VARCHAR2(2000);
    L_SQL4       VARCHAR2(1000);
    L_SQL5       VARCHAR2(2000);
    L_ETL_SOURCE VARCHAR2(30);
    C_PRIMARY_STORE_HIER      CONSTANT VARCHAR2(20) := 'PRIMARY_STORE';

    L_SQL6       VARCHAR2(4000);
    L_SQL7       VARCHAR2(4000);

    L_STORE_DETAIL_SK DIM_STORE_STORE.SOURCE_BUSKEY%TYPE := ' ';
    L_STORE_DETAIL_TK DIM_STORE_STORE.TARGET_BUSKEY%TYPE := ' ';
    L_STORE_TK        DIM_STORE_LOC.SOURCE_BUSKEY%TYPE := ' ';

  BEGIN

    --NO MATTER WHAT CHANGED IN COMPANY_DOOR, WE SHOULD ALWAYS TO RE-POPULATE DIM_STORE_LOC_REL TO REPRESENT THE LATEST RELATIONSHIP
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_STORE_LOC_REL';

    IF P_IS_INITIAL THEN

      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_STORE_LOC';
      --      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_STORE_LOC_REL';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_STORE_STORE';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_STORE_LOC');
      RESET_SEQUENCE('SEQ_STORE');

      INSERT INTO DIM_STORE_LOC
        (STORE_LOC_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         LOC_DESC,
         LOC_TYPE,
         LOC_ATTR1,
         LOC_ATTR2,
         LOC_ATTR3,
         LOC_ATTR4,
         LOC_ATTR5,
         LOC_ATTR6,
         LOC_ATTR7,
         LOC_ATTR8,
         LOC_ATTR9,
         LOC_ATTR10)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY);

      INSERT INTO DIM_STORE_STORE
        (STORE_ID,
         SOURCE_BUSKEY,
         TARGET_BUSKEY,
         STORE_LOC_ID,
         DOOR_NUM,
         DOOR_NAME,
         REGION,
         DEMOGRAPHIC,
         DOOR_TYPE,
         ETHNICITY,
         GEOGRAPHY,
         CLIMATE,
         STORE_GROUP,
         PRICING_ZONE,
         LOC_ATTR1,
         LOC_ATTR2,
         LOC_ATTR3,
         LOC_ATTR4,
         LOC_ATTR5,
         LOC_ATTR6,
         DISTANCE,
         LOC_ATTR7,
         ORI_COMPANY_DOOR_ID,
         STORE_CATEGORY,
         SEQUENCE,
         ORI_SISTER_DOOR_ID,
         SISTER_STORE_ID,
         TOTAL_SQ_FT,
         COMP_INDICATOR,
         AVAILABLE,
         TURN_DATE,
         SOFT_DATE,
         GO_DATE,
         CLOSE_DATE,
         TRANSFER_DOOR_ID,
         DISPLAY_CAPACITY,
         INVENTORY_CAPACITY,
         REMODEL_TURN_DATE,
         REMODEL_START_DATE,
         REMODEL_END_DATE,
         COMMENTS,
         COUNTRY,
         DC,
         STORE_TYPE,
         ORI_STORE_TYPE_ID,
         STOCK_CATEGORY)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         0,
         C_DUMMY,
         0,
         C_DUMMY,
         0,
         0,
         0,
         0,
         0,
         0,
         TO_DATE('19000101', 'YYYYMMDD'),
         TO_DATE('19000101', 'YYYYMMDD'),
         TO_DATE('19000101', 'YYYYMMDD'),
         TO_DATE('19000101', 'YYYYMMDD'),
         0,
         0,
         0,
         TO_DATE('19000101', 'YYYYMMDD'),
         TO_DATE('19000101', 'YYYYMMDD'),
         TO_DATE('19000101', 'YYYYMMDD'),
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         0,
         C_DUMMY);

    END IF;

    L_SQL2 := 'SELECT/*+ORDERED*/ ';
    L_SQL3 := 'SELECT DISTINCT ';
    L_SQL4 := ') S';

    FOR L IN (SELECT DL.DIM_NAME,
                     DL.LEVEL_NAME,
                     DL.DB_TAB_NAME,
                     DL.DB_KEY_COL_NAME,
                     DL.ETL_SOURCE,
                     DHL.LEVEL_ID
                FROM META_DIM_LEVELS DL
               INNER JOIN META_DIM_HIER_LEVELS DHL
                  ON DL.DIM_NAME = DHL.DIM_NAME
                 AND DL.LEVEL_NAME = DHL.LEVEL_NAME
               WHERE DHL.DIM_NAME = C_STORE_DIM
               AND DHL.HIERARCHY_NAME = C_PRIMARY_STORE_HIER
               ORDER BY DHL.LEVEL_ID) LOOP
      --    DBMS_OUTPUT.PUT_LINE(L.LEVEL_NAME);

      L_MERGECLAUSE := 'MERGE INTO ' || L.DB_TAB_NAME || ' T' || CHR(10) ||
                       'USING(SELECT DISTINCT ' || CHR(10);

      I               := 0;
      L_UPDATECLAUSE  := ' WHEN MATCHED THEN UPDATE SET ';
      L_INSERTCLAUSE1 := ' WHEN NOT MATCHED THEN INSERT(';
      L_INSERTCLAUSE2 := ' VALUES(';

      FOR C IN (SELECT U.COLUMN_NAME, M.ATTR_NAME
                  FROM USER_TAB_COLS U
                  LEFT JOIN META_DIM_LEVEL_ATTRS M
                    ON M.DIM_NAME = L.DIM_NAME
                   AND M.LEVEL_NAME = L.LEVEL_NAME
                   AND M.ATTR_NAME = U.COLUMN_NAME
                 WHERE U.TABLE_NAME = L.DB_TAB_NAME) LOOP
        I := I + 1;

        L_INSERTCLAUSE1 := L_INSERTCLAUSE1 || CHR(10) || CASE
                             WHEN I = 1 THEN
                              ' '
                             ELSE
                              ' ,'
                           END || C.COLUMN_NAME;
        L_INSERTCLAUSE2 := L_INSERTCLAUSE2 || CHR(10) || CASE
                             WHEN I = 1 THEN
                              ' '
                             ELSE
                              ' ,'
                           END;

        IF C.COLUMN_NAME = L.DB_KEY_COL_NAME THEN
          L_FIELD         := NULL;
          L_INSERTCLAUSE2 := L_INSERTCLAUSE2 ||
                             REPLACE('DIM_POPULATE_PACK.GET_SEQ_NEXTVALUE(''SEQ_' || C.COLUMN_NAME || ''')',
                                     '_ID',
                                     '');

        ELSE
          IF C.COLUMN_NAME = 'LOC_TYPE' THEN
            L_FIELD         := '''' || L.LEVEL_NAME || '''';
            L_UPDATECLAUSE  := L_UPDATECLAUSE || 'T.' || C.COLUMN_NAME ||
                               ' = S.' || C.COLUMN_NAME || ',' || CHR(10);
            L_INSERTCLAUSE2 := L_INSERTCLAUSE2 || 'S.' || C.COLUMN_NAME;

          ELSE
            L_FIELD := ' ';
            IF C.COLUMN_NAME <> 'TARGET_BUSKEY' THEN
              L_UPDATECLAUSE := L_UPDATECLAUSE || 'T.' || C.COLUMN_NAME ||
                                ' = S.' || C.COLUMN_NAME || ',' || CHR(10);
            END IF;
            L_INSERTCLAUSE2 := L_INSERTCLAUSE2 || 'S.' || C.COLUMN_NAME;
            FOR M IN (SELECT *
                        FROM META_DIM_LEVEL_ATTR_MAPPING
                       WHERE DIM_NAME = C_STORE_DIM
                         AND LEVEL_NAME = L.LEVEL_NAME
                         AND ATTR_NAME = C.ATTR_NAME
                       ORDER BY FIELD_SEQ) LOOP
              L_FIELD := L_FIELD || CASE
                           WHEN M.FIELD_SEQ = 1 THEN
                            ' '
                           ELSE
                            '||''' || C_DELIMITER || '''||'
                         END || 'UPPER(' || CASE
                           WHEN M.SOURCE_FIELD = C_DUMMY THEN
                            '''' || C_DUMMY || ''''
                           ELSE
                            M.SOURCE_FIELD
                         END || ')';

            END LOOP;

          END IF;

          L_FIELD := L_FIELD || ' ' || C.COLUMN_NAME;

          L_MERGECLAUSE := L_MERGECLAUSE || L_FIELD || ',' || CHR(10);
        END IF;

      END LOOP;

      L_UPDATECLAUSE := SUBSTR(L_UPDATECLAUSE,
                               1,
                               LENGTH(L_UPDATECLAUSE) - 2) || CHR(10);
      L_MERGECLAUSE  := SUBSTR(L_MERGECLAUSE, 1, LENGTH(L_MERGECLAUSE) - 2) ||
                        CHR(10);

      L_MERGECLAUSE   := L_MERGECLAUSE || ' FROM ' || L.ETL_SOURCE ||
                         ') S ON (T.TARGET_BUSKEY=S.TARGET_BUSKEY)' ||
                         CHR(10);
      L_INSERTCLAUSE1 := L_INSERTCLAUSE1 || ')';
      L_INSERTCLAUSE2 := L_INSERTCLAUSE2 || ')';

      L_SQL1 := L_MERGECLAUSE || L_UPDATECLAUSE || CHR(10) ||
                L_INSERTCLAUSE1 || CHR(10) || L_INSERTCLAUSE2 || CHR(10);

--      DBMS_OUTPUT.PUT_LINE(L_SQL1);
      EXECUTE IMMEDIATE L_SQL1;
    END LOOP;

    I := 0;
    FOR L IN (SELECT DL.DIM_NAME,
                     DL.LEVEL_NAME,
                     DL.DB_TAB_NAME,
                     DL.DB_KEY_COL_NAME,
                     DL.ETL_SOURCE,
                     DHL.LEVEL_ID,
                     MAX(DHL.LEVEL_ID) OVER() MAX_LEVEL
                FROM META_DIM_LEVELS DL
               INNER JOIN META_DIM_HIER_LEVELS DHL
                  ON DL.DIM_NAME = DHL.DIM_NAME
                 AND DL.LEVEL_NAME = DHL.LEVEL_NAME
               WHERE DHL.DIM_NAME = C_STORE_DIM
                 AND DHL.HIERARCHY_NAME = C_PRIMARY_STORE_HIER
               ORDER BY DHL.LEVEL_ID) LOOP

      L_ETL_SOURCE := L.ETL_SOURCE;
      I            := I + 1;
      L_SQL2 := L_SQL2 || 'T' || TO_CHAR(I) || '.STORE_LOC_ID STORE_LOC_ID_' ||
                TO_CHAR(I) || ',T' || TO_CHAR(I) || '.LOC_TYPE LEVEL_NAME' ||
                TO_CHAR(I) || CASE
                  WHEN I = L.MAX_LEVEL THEN
                   ' FROM ( '
                  ELSE
                   ','
                END || CHR(10);

      L_SQL3 := L_SQL3 || CASE
                  WHEN I = 1 THEN
                   ' '
                  ELSE
                   ','
                END;
      L_SQL4 := L_SQL4 || CHR(10) || 'INNER JOIN DIM_STORE_LOC T' ||
                TO_CHAR(L.LEVEL_ID) || CHR(10) || 'ON T' ||
                TO_CHAR(L.LEVEL_ID) || '.SOURCE_BUSKEY=S.SOURCE_BUSKEY_L' ||
                TO_CHAR(L.LEVEL_ID);

      FOR C IN (SELECT *
                  FROM META_DIM_LEVEL_ATTR_MAPPING
                 WHERE DIM_NAME = L.DIM_NAME
                   AND LEVEL_NAME = L.LEVEL_NAME
                   AND ATTR_NAME = 'SOURCE_BUSKEY'
                 ORDER BY FIELD_SEQ) LOOP

        L_SQL3 := L_SQL3 || CASE
                    WHEN C.FIELD_SEQ = 1 THEN
                     ' '
                    ELSE
                     '||''' || C_DELIMITER || '''||'
                  END || 'UPPER(' || C.SOURCE_FIELD || ')';

      END LOOP;

      L_SQL3 := L_SQL3 || ' SOURCE_BUSKEY_L' || TO_CHAR(L.LEVEL_ID) ||
                CHR(10);

    END LOOP;

    L_SQL3 := L_SQL3 || ' FROM ' || L_ETL_SOURCE;

    --  DBMS_OUTPUT.PUT_LINE(L_SQL2 || L_SQL3 || L_SQL4);

    FOR I IN (SELECT LEVEL_ID, MAX(LEVEL_ID) OVER() MAX_LEVEL
                FROM META_DIM_HIER_LEVELS
               WHERE DIM_NAME = C_STORE_DIM
               AND HIERARCHY_NAME = C_PRIMARY_STORE_HIER
               ORDER BY LEVEL_ID) LOOP

      FOR J IN I.LEVEL_ID .. I.MAX_LEVEL LOOP
        L_SQL5 := 'MERGE INTO DIM_STORE_LOC_REL T' || CHR(10) || 'USING(' ||
                  CHR(10) || 'SELECT DISTINCT ' || CHR(10) ||
                  'STORE_LOC_ID_' || TO_CHAR(I.LEVEL_ID) ||
                  ' PARENT_STORE_LOC_ID,' || CHR(10) || 'LEVEL_NAME' ||
                  TO_CHAR(I.LEVEL_ID) || ' PARENT_LEVEL_NAME,';

        L_SQL5 := L_SQL5 || CHR(10) || 'STORE_LOC_ID_' || TO_CHAR(J) ||
                  ' SUBSIDIARY_STORE_LOC_ID,' || CHR(10) ||
                  TO_CHAR(J - I.LEVEL_ID) || ' LEVEL_FROM_PARENT,' || CHR(10) ||
                  'LEVEL_NAME' || TO_CHAR(J) || ' SUBSIDIARY_LEVEL_NAME,' ||
                  CHR(10) || CASE
                    WHEN J = I.MAX_LEVEL THEN
                     '''Y'''
                    ELSE
                     '''N'''
                  END || ' BOTTOM_FLAG,' || CHR(10) || CASE
                    WHEN J = I.LEVEL_ID THEN
                     '''Y'''
                    ELSE
                     '''N'''
                  END || ' TOP_FLAG' || CHR(10) || 'FROM (' || CHR(10) || L_SQL2 ||
                  L_SQL3 || L_SQL4 || CHR(10) || ') O' || CHR(10) || ')S' ||
                  CHR(10) ||
                  'ON (T.PARENT_STORE_LOC_ID = S.PARENT_STORE_LOC_ID AND T.SUBSIDIARY_STORE_LOC_ID = S.SUBSIDIARY_STORE_LOC_ID)' ||
                  CHR(10) || 'WHEN MATCHED THEN
  UPDATE
     SET T.LEVEL_FROM_PARENT        = S.LEVEL_FROM_PARENT,
         T.SUBSIDIARY_LEVEL_NAME    = S.SUBSIDIARY_LEVEL_NAME,
         T.BOTTOM_FLAG              = S.BOTTOM_FLAG,
         T.TOP_FLAG                 = S.TOP_FLAG,
         T.PARENT_LEVEL_NAME        = S.PARENT_LEVEL_NAME
WHEN NOT MATCHED THEN
  INSERT
    (PARENT_STORE_LOC_ID,
     SUBSIDIARY_STORE_LOC_ID,
     LEVEL_FROM_PARENT,
     SUBSIDIARY_LEVEL_NAME,
     PARENT_LEVEL_NAME,
     BOTTOM_FLAG,
     TOP_FLAG)
  VALUES
    (S.PARENT_STORE_LOC_ID,
     S.SUBSIDIARY_STORE_LOC_ID,
     S.LEVEL_FROM_PARENT,
     S.SUBSIDIARY_LEVEL_NAME,
     S.PARENT_LEVEL_NAME,
     S.BOTTOM_FLAG,
     S.TOP_FLAG)' || CHR(10);

--        DBMS_OUTPUT.PUT_LINE(L_SQL5);
        EXECUTE IMMEDIATE L_SQL5;
      END LOOP;

    END LOOP;


    L_SQL6:='
MERGE INTO DIM_STORE_STORE T
USING (SELECT <STORE_DETAIL_SK> SOURCE_BUSKEY,
              <STORE_DETAIL_TK> TARGET_BUSKEY,
              NVL(B.STORE_LOC_ID, 0) STORE_LOC_ID,
              NVL(A.DOOR_NUM, ''' || C_DUMMY ||''') DOOR_NUM,
              NVL(A.DOOR_NAME, ''' || C_DUMMY ||''') DOOR_NAME,
              NVL(A.REGION, ''' || C_DUMMY ||''') REGION,
              NVL(A.DEMOGRAPHIC, ''' || C_DUMMY ||''') DEMOGRAPHIC,
              NVL(A.DOOR_TYPE, 0) DOOR_TYPE,
              NVL(A.ETHNICITY, ''' || C_DUMMY ||''') ETHNICITY,
              NVL(A.GEOGRAPHY, ''' || C_DUMMY ||''') GEOGRAPHY,
              NVL(A.CLIMATE, ''' || C_DUMMY ||''') CLIMATE,
              NVL(A.STORE_GROUP, ''' || C_DUMMY ||''') STORE_GROUP,
              NVL(A.PRICING_ZONE, ''' || C_DUMMY ||''') PRICING_ZONE,
              NVL(A.LOC_ATTR1, ''' || C_DUMMY ||''') LOC_ATTR1,
              NVL(A.LOC_ATTR2, ''' || C_DUMMY ||''') LOC_ATTR2,
              NVL(A.LOC_ATTR3, ''' || C_DUMMY ||''') LOC_ATTR3,
              NVL(A.LOC_ATTR4, ''' || C_DUMMY ||''') LOC_ATTR4,
              NVL(A.LOC_ATTR5, ''' || C_DUMMY ||''') LOC_ATTR5,
              NVL(A.LOC_ATTR6, ''' || C_DUMMY ||''') LOC_ATTR6,
              NVL(A.DISTANCE, 0) DISTANCE,
              NVL(A.LOC_ATTR7, ''' || C_DUMMY ||''') LOC_ATTR7,
              A.COMPANY_DOOR_ID ORI_COMPANY_DOOR_ID,
              NVL(A.STORE_CATEGORY, ''' || C_DUMMY || ''') STORE_CATEGORY,
              NVL(A.SEQUENCE, 0) SEQUENCE,
              NVL(A.SISTER_DOOR_ID, 0) ORI_SISTER_DOOR_ID,
              0 SISTER_STORE_ID,
              NVL(A.TOTAL_SQ_FT, 0) TOTAL_SQ_FT,
              NVL(A.COMP_INDICATOR, 0) COMP_INDICATOR,
              NVL(A.AVAILABLE, 0) AVAILABLE,
              NVL(A.TURN_DATE, TO_DATE(''19000101'', ''YYYYMMDD'')) TURN_DATE,
              NVL(A.SOFT_DATE, TO_DATE(''19000101'', ''YYYYMMDD'')) SOFT_DATE,
              NVL(A.GO_DATE, TO_DATE(''19000101'', ''YYYYMMDD'')) GO_DATE,
              NVL(A.CLOSE_DATE, TO_DATE(''19000101'', ''YYYYMMDD'')) CLOSE_DATE,
              NVL(A.TRANSFER_DOOR_ID, 0) TRANSFER_DOOR_ID,
              NVL(A.DISPLAY_CAPACITY, 0) DISPLAY_CAPACITY,
              NVL(A.INVENTORY_CAPACITY, 0) INVENTORY_CAPACITY,
              NVL(A.REMODEL_TURN_DATE, TO_DATE(''19000101'', ''YYYYMMDD'')) REMODEL_TURN_DATE,
              NVL(A.REMODEL_START_DATE, TO_DATE(''19000101'', ''YYYYMMDD'')) REMODEL_START_DATE,
              NVL(A.REMODEL_END_DATE, TO_DATE(''19000101'', ''YYYYMMDD'')) REMODEL_END_DATE,
              NVL(A.COMMENTS, ''' || C_DUMMY ||''') COMMENTS,
              NVL(A.COUNTRY, ''' || C_DUMMY ||''') COUNTRY,
              NVL(A.DC, ''' || C_DUMMY ||''') DC,
              NVL(C.STORE_TYPE_CODE, ''' || C_DUMMY ||''') STORE_TYPE,
              NVL(A.STOCK_CATEGORY, ''' || C_DUMMY || ''') STOCK_CATEGORY,
              NVL(C.STORE_TYPE_ID, 0) ORI_STORE_TYPE_ID
         FROM COMPANY_DOOR@MYLINKAPP A
        INNER JOIN STORE_TYPE@MYLINKAPP C
           ON A.STORE_TYPE_ID = C.STORE_TYPE_ID
        INNER JOIN (SELECT <STORE_TK> STORE_LEVEL_TK,
                                   <STORE_DETAIL_TK> STORE_DETAIL_TK
                     FROM COMPANY_DOOR@MYLINKAPP) L
           ON <STORE_DETAIL_TK> = L.STORE_DETAIL_TK
         LEFT JOIN DIM_STORE_LOC B
           ON L.STORE_LEVEL_TK = B.TARGET_BUSKEY) S';

     L_SQL7:=
     'ON (T.TARGET_BUSKEY = S.TARGET_BUSKEY)
WHEN MATCHED THEN
  UPDATE
     SET T.STORE_LOC_ID        = S.STORE_LOC_ID,
         T.DOOR_NUM            = S.DOOR_NUM,
         T.DOOR_NAME           = S.DOOR_NAME,
         T.REGION              = S.REGION,
         T.DEMOGRAPHIC         = S.DEMOGRAPHIC,
         T.DOOR_TYPE           = S.DOOR_TYPE,
         T.ETHNICITY           = S.ETHNICITY,
         T.GEOGRAPHY           = S.GEOGRAPHY,
         T.CLIMATE             = S.CLIMATE,
         T.STORE_GROUP         = S.STORE_GROUP,
         T.PRICING_ZONE        = S.PRICING_ZONE,
         T.LOC_ATTR1           = S.LOC_ATTR1,
         T.LOC_ATTR2           = S.LOC_ATTR2,
         T.LOC_ATTR3           = S.LOC_ATTR3,
         T.LOC_ATTR4           = S.LOC_ATTR4,
         T.LOC_ATTR5           = S.LOC_ATTR5,
         T.LOC_ATTR6           = S.LOC_ATTR6,
         T.DISTANCE            = S.DISTANCE,
         T.LOC_ATTR7           = S.LOC_ATTR7,
         T.ORI_COMPANY_DOOR_ID = S.ORI_COMPANY_DOOR_ID,
         T.STORE_CATEGORY      = S.STORE_CATEGORY,
         T.SEQUENCE            = S.SEQUENCE,
         T.ORI_SISTER_DOOR_ID  = S.ORI_SISTER_DOOR_ID,
         T.SISTER_STORE_ID     = S.SISTER_STORE_ID,
         T.TOTAL_SQ_FT         = S.TOTAL_SQ_FT,
         T.COMP_INDICATOR      = S.COMP_INDICATOR,
         T.AVAILABLE           = S.AVAILABLE,
         T.TURN_DATE           = S.TURN_DATE,
         T.SOFT_DATE           = S.SOFT_DATE,
         T.GO_DATE             = S.GO_DATE,
         T.CLOSE_DATE          = S.CLOSE_DATE,
         T.TRANSFER_DOOR_ID    = S.TRANSFER_DOOR_ID,
         T.DISPLAY_CAPACITY    = S.DISPLAY_CAPACITY,
         T.INVENTORY_CAPACITY  = S.INVENTORY_CAPACITY,
         T.REMODEL_TURN_DATE   = S.REMODEL_TURN_DATE,
         T.REMODEL_START_DATE  = S.REMODEL_START_DATE,
         T.REMODEL_END_DATE    = S.REMODEL_END_DATE,
         T.COMMENTS            = S.COMMENTS,
         T.COUNTRY             = S.COUNTRY,
         T.DC                  = S.DC,
         T.STORE_TYPE          = S.STORE_TYPE,
         T.ORI_STORE_TYPE_ID   = S.ORI_STORE_TYPE_ID,
         T.STOCK_CATEGORY      = S.STOCK_CATEGORY
WHEN NOT MATCHED THEN
  INSERT
    (STORE_ID,
     SOURCE_BUSKEY,
     TARGET_BUSKEY,
     STORE_LOC_ID,
     DOOR_NUM,
     DOOR_NAME,
     REGION,
     DEMOGRAPHIC,
     DOOR_TYPE,
     ETHNICITY,
     GEOGRAPHY,
     CLIMATE,
     STORE_GROUP,
     PRICING_ZONE,
     LOC_ATTR1,
     LOC_ATTR2,
     LOC_ATTR3,
     LOC_ATTR4,
     LOC_ATTR5,
     LOC_ATTR6,
     DISTANCE,
     LOC_ATTR7,
     ORI_COMPANY_DOOR_ID,
     STORE_CATEGORY,
     SEQUENCE,
     ORI_SISTER_DOOR_ID,
     SISTER_STORE_ID,
     TOTAL_SQ_FT,
     COMP_INDICATOR,
     AVAILABLE,
     TURN_DATE,
     SOFT_DATE,
     GO_DATE,
     CLOSE_DATE,
     TRANSFER_DOOR_ID,
     DISPLAY_CAPACITY,
     INVENTORY_CAPACITY,
     REMODEL_TURN_DATE,
     REMODEL_START_DATE,
     REMODEL_END_DATE,
     COMMENTS,
     COUNTRY,
     DC,
     STORE_TYPE,
     ORI_STORE_TYPE_ID,
     STOCK_CATEGORY)
  VALUES
    (DIM_POPULATE_PACK.GET_SEQ_NEXTVALUE(''SEQ_STORE''),
     S.SOURCE_BUSKEY,
     S.TARGET_BUSKEY,
     S.STORE_LOC_ID,
     S.DOOR_NUM,
     S.DOOR_NAME,
     S.REGION,
     S.DEMOGRAPHIC,
     S.DOOR_TYPE,
     S.ETHNICITY,
     S.GEOGRAPHY,
     S.CLIMATE,
     S.STORE_GROUP,
     S.PRICING_ZONE,
     S.LOC_ATTR1,
     S.LOC_ATTR2,
     S.LOC_ATTR3,
     S.LOC_ATTR4,
     S.LOC_ATTR5,
     S.LOC_ATTR6,
     S.DISTANCE,
     S.LOC_ATTR7,
     S.ORI_COMPANY_DOOR_ID,
     S.STORE_CATEGORY,
     S.SEQUENCE,
     S.ORI_SISTER_DOOR_ID,
     S.SISTER_STORE_ID,
     S.TOTAL_SQ_FT,
     S.COMP_INDICATOR,
     S.AVAILABLE,
     S.TURN_DATE,
     S.SOFT_DATE,
     S.GO_DATE,
     S.CLOSE_DATE,
     S.TRANSFER_DOOR_ID,
     S.DISPLAY_CAPACITY,
     S.INVENTORY_CAPACITY,
     S.REMODEL_TURN_DATE,
     S.REMODEL_START_DATE,
     S.REMODEL_END_DATE,
     S.COMMENTS,
     S.COUNTRY,
     S.DC,
     S.STORE_TYPE,
     S.ORI_STORE_TYPE_ID,
     S.STOCK_CATEGORY)';

     FOR ITEM IN (SELECT SOURCE_FIELD, FIELD_SEQ
                     FROM META_DIM_LEVEL_ATTR_MAPPING
                    WHERE DIM_NAME = 'STORE'
                      AND LEVEL_NAME = 'STORE'
                      AND ATTR_NAME = 'TARGET_BUSKEY'
                    ORDER BY FIELD_SEQ) LOOP
        L_STORE_TK := L_STORE_TK || CASE ITEM.FIELD_SEQ
                         WHEN 1 THEN
                          'UPPER(' || ITEM.SOURCE_FIELD || ') '
                         ELSE
                          '||''' || C_DELIMITER || '''||UPPER(' ||
                          ITEM.SOURCE_FIELD || ')'
                       END;

      END LOOP;

      FOR ITEM IN (SELECT SOURCE_FIELD, FIELD_SEQ
                       FROM META_DIM_LEVEL_ATTR_MAPPING
                      WHERE DIM_NAME = 'STORE'
                        AND LEVEL_NAME = 'STORE_DETAIL'
                        AND ATTR_NAME = 'SOURCE_BUSKEY'
                      ORDER BY FIELD_SEQ) LOOP
          L_STORE_DETAIL_SK := L_STORE_DETAIL_SK || CASE ITEM.FIELD_SEQ
                           WHEN 1 THEN
                            'UPPER(' || ITEM.SOURCE_FIELD || ') '
                           ELSE
                            '||''' || C_DELIMITER || '''||UPPER(' ||
                            ITEM.SOURCE_FIELD || ')'
                         END;

        END LOOP;

        FOR ITEM IN (SELECT SOURCE_FIELD, FIELD_SEQ
                     FROM META_DIM_LEVEL_ATTR_MAPPING
                    WHERE DIM_NAME = 'STORE'
                      AND LEVEL_NAME = 'STORE_DETAIL'
                      AND ATTR_NAME = 'TARGET_BUSKEY'
                    ORDER BY FIELD_SEQ) LOOP
        L_STORE_DETAIL_TK := L_STORE_DETAIL_TK || CASE ITEM.FIELD_SEQ
                         WHEN 1 THEN
                          'UPPER(' || ITEM.SOURCE_FIELD || ') '
                         ELSE
                          '||''' || C_DELIMITER || '''||UPPER(' ||
                          ITEM.SOURCE_FIELD || ')'
                       END;

      END LOOP;

        L_SQL6:=REPLACE(REPLACE(REPLACE(L_SQL6,'<STORE_TK>',L_STORE_TK),'<STORE_DETAIL_SK>',L_STORE_DETAIL_SK),'<STORE_DETAIL_TK>',L_STORE_DETAIL_TK);
        DBMS_OUTPUT.PUT_LINE(L_SQL7);

        EXECUTE IMMEDIATE L_SQL6 ||CHR(10)||L_SQL7;

        UPDATE DIM_STORE_STORE T
         SET T.SISTER_STORE_ID =
             (SELECT S.STORE_ID
                FROM DIM_STORE_STORE S
               WHERE UPPER(T.ORI_SISTER_DOOR_ID) = S.TARGET_BUSKEY)
        WHERE EXISTS(SELECT 1
              FROM DIM_STORE_STORE X
              WHERE UPPER(T.ORI_SISTER_DOOR_ID)=X.TARGET_BUSKEY
              AND T.SISTER_STORE_ID<>X.STORE_ID
        );

    COMMIT;

  END POP_DIM_STORE;

  PROCEDURE POP_DIM_RULE(P_IS_INITIAL BOOLEAN DEFAULT TRUE) IS
    L_RULE_ID DIM_RULE.RULE_ID%TYPE;

    TYPE NNT_CACHE IS TABLE OF NUMBER(8) INDEX BY VARCHAR2(60);
    L_CACHE_CRITERIA_GROUP NNT_CACHE;

    TYPE TEMP_REC IS RECORD(
      ID            NUMBER(8),
      SOURCE_BUSKEY VARCHAR2(60));
    TYPE TEMP_CACHE IS TABLE OF TEMP_REC;
    L_TEMP_CACHE TEMP_CACHE;

    L_DATE       DATE := SYSDATE;
    L_DW_VERSION DIM_RULE.DW_VERSION%TYPE;

  BEGIN
    IF P_IS_INITIAL THEN
      DISABLE_ALL_CONS;
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_RULE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_RULE_DISABLED';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_TRANSFER_PRIORITY';
      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_RULE');
      RESET_SEQUENCE('SEQ_TRANSFER_PRIORITY');

      INSERT INTO DIM_TRANSFER_PRIORITY
        (TRANSFER_PRIORITY_ID,
         SOURCE_BUSKEY,
         NAME,
         PRIORITY1,
         PRIORITY2,
         PRIORITY3,
         PRIORITY4,
         PRIORITY5,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID,
         PRIORITY_TYPE,
         DW_START_DATE,
         DW_END_DATE,
         DW_VERSION,
         DW_CURRFLAG)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         0,
         0,
         0,
         C_DUMMY,
         TO_DATE('19000101', 'YYYYMMDD'),
         TO_DATE('99991231', 'YYYYMMDD'),
         1,
         'Y');

      INSERT INTO DIM_RULE
        (RULE_ID,
         SOURCE_BUSKEY,
         PARENT_SOURCE_BUSKEY,
         NAME,
         RULE_TYPE,
         START_DATE,
         END_DATE,
         WEEKS_NOT_ALLOWED_OUT,
         WEEKS_TO_BE_MAINTAINED,
         WEEKS_OF_PREV_SALES,
         WEEKS_PRIOR_CURR_DATE,
         SUPPLY_PERCENT,
         WEEKS_NOT_SOLD,
         IS_CHECK_RECEIPT_CUMULATIVE,
         WEEKS_AFTER_FIRST_RECEIPT,
         CUMULATIVE_PERCENT,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID,
         DW_START_DATE,
         DW_END_DATE,
         DW_VERSION,
         DW_CURRFLAG)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         C_DUMMY,
         TO_DATE('19000101', 'YYYYMMDD'),
         TO_DATE('99991231', 'YYYYMMDD'),
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         0,
         TO_DATE('19000101', 'YYYYMMDD'),
         TO_DATE('99991231', 'YYYYMMDD'),
         1,
         'Y');

    END IF;

    SELECT SS.CRITERIA_GROUP_ID ID, SS.SOURCE_BUSKEY
      BULK COLLECT
      INTO L_TEMP_CACHE
      FROM DIM_CRITERIA_GROUP SS
     WHERE DW_CURRFLAG = 'Y';

    FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
      L_CACHE_CRITERIA_GROUP(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
    END LOOP;

    FOR MR IN (WITH SOURCE1 AS
                  (SELECT R.*,
                         E.IS_DEFAULT,
                         E.SETTING_ID,
                         A.DIM_NAME,
                         A.ATTR_NAME,
                         T.ATTR_VALUE,
                         T.FILTER_COLUMN_SEQ SEQ
                    FROM ALLOCATE_TRANSFER_RULE@MYLINKAPP R
                   INNER JOIN ALLOCATE_SETTING@MYLINKAPP E
                      ON R.SETTING_VALUE_ID = E.SETTING_VALUE_ID
                    LEFT JOIN ALLOCATE_SETTING_CRITERIA@MYLINKAPP T
                      ON E.SETTING_ID = T.SETTING_ID
                    LEFT JOIN COMPANY_CRITERIA@MYLINKAPP C
                      ON C.CRITERIA_TYPE = E.CRITERIA_TYPE
                    LEFT JOIN META_DIM_HIER_LEVEL_ATTRS A
                      ON UPPER(CASE T.CRITERIA_ATTR_SEQ
                                 WHEN 1 THEN
                                  C.ATTR_NAME1
                                 WHEN 2 THEN
                                  C.ATTR_NAME2
                                 WHEN 3 THEN
                                  C.ATTR_NAME3
                                 WHEN 4 THEN
                                  C.ATTR_NAME4
                                 WHEN 5 THEN
                                  C.ATTR_NAME5
                                 WHEN 6 THEN
                                  C.ATTR_NAME6
                                 WHEN 7 THEN
                                  C.ATTR_NAME7
                                 WHEN 8 THEN
                                  C.ATTR_NAME8
                                 WHEN 9 THEN
                                  C.ATTR_NAME9
                                 WHEN 10 THEN
                                  C.ATTR_NAME10
                               END) = A.BUSINESS_DESC
                      AND (A.DIM_NAME,A.HIERARCHY_NAME) IN
                           (
                            (C_STYLE_DIM,C_STYLE_PRIMARY_SIZE_HIER),
                            (C_STORE_DIM,C_STORE_PRIMARY_DETAIL_HIER),
                            (C_YEARSEASON_DIM,C_YEARSEASON_PRIMARY_SIZE_HIER)
                            )
                         ),
                 SOURCE2 AS
                  (SELECT TRANSFER_RULE_ID,
                         C_DUMMY PARENT_SOURCE_BUSKEY,
                         NAME,
                         IS_DEFAULT,
                         TO_DATE('19000101', 'YYYYMMDD') START_DATE,
                         TO_DATE('99991231', 'YYYYMMDD') END_DATE,
                         WEEKS_NOT_ALLOWED_OUT,
                         WEEKS_TO_BE_MAINTAINED,
                         WEEKS_OF_PREV_SALES,
                         WEEKS_PRIOR_CURR_DATE,
                         SUPPLY_PERCENT,
                         WEEKS_NOT_SOLD,
                         IS_CHECK_RECEIPT_CUMULATIVE,
                         WEEKS_AFTER_FIRST_RECEIPT,
                         CUMULATIVE_PERCENT,
                         MAX(CASE
                               WHEN DIM_NAME = C_STYLE_DIM THEN
                                SETTING_ID || C_DELIMITER || DIM_NAME
                               ELSE
                                NULL
                             END) PROD_CRITERIA_GROUP_BK,
                         MAX(CASE
                               WHEN DIM_NAME = C_STORE_DIM THEN
                                SETTING_ID || C_DELIMITER || DIM_NAME
                               ELSE
                                NULL
                             END) LOC_CRITERIA_GROUP_BK,
                         MAX(CASE
                               WHEN DIM_NAME = C_YEARSEASON_DIM THEN
                                SETTING_ID || C_DELIMITER || DIM_NAME
                               ELSE
                                NULL
                             END) YEARSEASON_CRITERIA_GROUP_BK,
                         SET(CAST(COLLECT(CASE
                                            WHEN DIM_NAME = C_STYLE_DIM THEN
                                             ATTR_NAME || C_DELIMITER || ATTR_VALUE
                                            ELSE
                                             C_DUMMY
                                          END ORDER BY SEQ,
                                          ATTR_VALUE) AS NNT_STRS)) PROD_CRITERIA_ITEMS,
                         SET(CAST(COLLECT(CASE
                                            WHEN DIM_NAME = C_STORE_DIM THEN
                                             ATTR_NAME || C_DELIMITER || ATTR_VALUE
                                            ELSE
                                             C_DUMMY
                                          END ORDER BY SEQ,
                                          ATTR_VALUE) AS NNT_STRS)) LOC_CRITERIA_ITEMS,
                         SET(CAST(COLLECT(CASE
                                            WHEN DIM_NAME = C_YEARSEASON_DIM THEN
                                             ATTR_NAME || C_DELIMITER || ATTR_VALUE
                                            ELSE
                                             C_DUMMY
                                          END ORDER BY SEQ,
                                          ATTR_VALUE) AS NNT_STRS)) YEARSEASON_CRITERIA_ITEMS
                    FROM SOURCE1
                   GROUP BY TRANSFER_RULE_ID,
                            NAME,
                            IS_DEFAULT,
                            WEEKS_NOT_ALLOWED_OUT,
                            WEEKS_TO_BE_MAINTAINED,
                            WEEKS_OF_PREV_SALES,
                            WEEKS_PRIOR_CURR_DATE,
                            SUPPLY_PERCENT,
                            WEEKS_NOT_SOLD,
                            IS_CHECK_RECEIPT_CUMULATIVE,
                            WEEKS_AFTER_FIRST_RECEIPT,
                            CUMULATIVE_PERCENT),
                 SOURCE AS
                  (SELECT TO_CHAR(O.TRANSFER_RULE_ID) SOURCE_BUSKEY,
                         C_DUMMY PARENT_SOURCE_BUSKEY,
                         UPPER(O.NAME) NAME,
                         (CASE
                           WHEN O.IS_DEFAULT = 1 THEN
                            'DEFAULT'
                           ELSE
                            'MAIN'
                         END) RULE_TYPE,
                         TO_DATE('19000101', 'YYYYMMDD') START_DATE,
                         TO_DATE('99991231', 'YYYYMMDD') END_DATE,
                         O.WEEKS_NOT_ALLOWED_OUT,
                         O.WEEKS_TO_BE_MAINTAINED,
                         O.WEEKS_OF_PREV_SALES,
                         O.WEEKS_PRIOR_CURR_DATE,
                         O.SUPPLY_PERCENT,
                         O.WEEKS_NOT_SOLD,
                         O.IS_CHECK_RECEIPT_CUMULATIVE,
                         O.WEEKS_AFTER_FIRST_RECEIPT,
                         O.CUMULATIVE_PERCENT,
                         NVL(O.PROD_CRITERIA_GROUP_BK, C_DUMMY) PROD_CRITERIA_GROUP_BK,
                         NVL(O.LOC_CRITERIA_GROUP_BK, C_DUMMY) LOC_CRITERIA_GROUP_BK,
                         NVL(O.YEARSEASON_CRITERIA_GROUP_BK, C_DUMMY) YEARSEASON_CRITERIA_GROUP_BK,
                         RD.DISABLED_DOORS,
                         O.PROD_CRITERIA_ITEMS MULTISET EXCEPT NNT_STRS(C_DUMMY) PROD_CRITERIA_ITEMS,
                         O.LOC_CRITERIA_ITEMS MULTISET EXCEPT NNT_STRS(C_DUMMY) LOC_CRITERIA_ITEMS,
                         O.YEARSEASON_CRITERIA_ITEMS MULTISET EXCEPT NNT_STRS(C_DUMMY) YEARSEASON_CRITERIA_ITEMS
                    FROM SOURCE2 O
                    LEFT JOIN (SELECT D.TRANSFER_RULE_ID,
                                     CAST(COLLECT(D.IN_OUT_TYPE ||
                                                  C_DELIMITER ||
                                                  D.COMPANY_DOOR_ID ORDER BY
                                                  D.IN_OUT_TYPE,
                                                  D.COMPANY_DOOR_ID) AS
                                          NNT_STRS) DISABLED_DOORS
                                FROM ALLOCATE_TRANSFER_RULE_DIS@MYLINKAPP D
                               GROUP BY D.TRANSFER_RULE_ID) RD
                      ON O.TRANSFER_RULE_ID = RD.TRANSFER_RULE_ID),
                 TARGET AS
                  (SELECT R.SOURCE_BUSKEY,
                         R.PARENT_SOURCE_BUSKEY,
                         UPPER(R.NAME) NAME,
                         R.RULE_TYPE,
                         R.START_DATE,
                         R.END_DATE,
                         R.WEEKS_NOT_ALLOWED_OUT,
                         R.WEEKS_TO_BE_MAINTAINED,
                         R.WEEKS_OF_PREV_SALES,
                         R.WEEKS_PRIOR_CURR_DATE,
                         R.SUPPLY_PERCENT,
                         R.WEEKS_NOT_SOLD,
                         R.IS_CHECK_RECEIPT_CUMULATIVE,
                         R.WEEKS_AFTER_FIRST_RECEIPT,
                         R.CUMULATIVE_PERCENT,
                         RD.DISABLED_DOORS,
                         PB.CRITERIA_ITEMS MULTISET EXCEPT NNT_STRS(C_DUMMY || C_DELIMITER || C_DUMMY) PROD_CRITERIA_ITEMS,
                         LB.CRITERIA_ITEMS MULTISET EXCEPT NNT_STRS(C_DUMMY || C_DELIMITER || C_DUMMY) LOC_CRITERIA_ITEMS,
                         YB.CRITERIA_ITEMS MULTISET EXCEPT NNT_STRS(C_DUMMY || C_DELIMITER || C_DUMMY) YEARSEASON_CRITERIA_ITEMS,
                         R.DW_START_DATE,
                         R.DW_END_DATE,
                         R.DW_VERSION,
                         R.DW_CURRFLAG
                    FROM DIM_RULE R
                    LEFT JOIN (SELECT I.CRITERIA_GROUP_ID,
                                     CAST(COLLECT(I.NAME || C_DELIMITER ||
                                                  I.VALUE ORDER BY I.SEQ,
                                                  I.VALUE) AS NNT_STRS) CRITERIA_ITEMS
                                FROM DIM_CRITERIA_ITEM I
                               GROUP BY I.CRITERIA_GROUP_ID) PB
                      ON R.PROD_CRITERIA_GROUP_ID = PB.CRITERIA_GROUP_ID
                    LEFT JOIN (SELECT I.CRITERIA_GROUP_ID,
                                     CAST(COLLECT(I.NAME || C_DELIMITER ||
                                                  I.VALUE ORDER BY I.SEQ,
                                                  I.VALUE) AS NNT_STRS) CRITERIA_ITEMS
                                FROM DIM_CRITERIA_ITEM I
                               GROUP BY I.CRITERIA_GROUP_ID) LB
                      ON R.LOC_CRITERIA_GROUP_ID = LB.CRITERIA_GROUP_ID
                    LEFT JOIN (SELECT I.CRITERIA_GROUP_ID,
                                     CAST(COLLECT(I.NAME || C_DELIMITER ||
                                                  I.VALUE ORDER BY I.SEQ,
                                                  I.VALUE) AS NNT_STRS) CRITERIA_ITEMS
                                FROM DIM_CRITERIA_ITEM I
                               GROUP BY I.CRITERIA_GROUP_ID) YB
                      ON R.YEARSEASON_CRITERIA_GROUP_ID =
                         YB.CRITERIA_GROUP_ID
                    LEFT JOIN (SELECT A.RULE_ID,
                                     CAST(COLLECT(A.IN_OUT_TYPE ||
                                                  C_DELIMITER ||
                                                  B.ORI_COMPANY_DOOR_ID
                                                  ORDER BY A.IN_OUT_TYPE,
                                                  B.ORI_COMPANY_DOOR_ID) AS
                                          NNT_STRS) DISABLED_DOORS
                                FROM DIM_RULE_DISABLED A
                               INNER JOIN DIM_STORE_STORE B
                                  ON A.STORE_ID = B.STORE_ID
                               GROUP BY A.RULE_ID) RD
                      ON R.RULE_ID = RD.RULE_ID
                   WHERE R.DW_CURRFLAG = 'Y'
                     AND R.RULE_TYPE IN ('MAIN', 'DEFAULT'))
                 --1,TO BE INSERTED
                 SELECT X.SOURCE_BUSKEY                X_SOURCE_BUSKEY,
                        X.PARENT_SOURCE_BUSKEY         X_PARENT_SOURCE_BUSKEY,
                        X.NAME                         X_NAME,
                        X.RULE_TYPE                    X_RULE_TYPE,
                        X.START_DATE                   X_START_DATE,
                        X.END_DATE                     X_END_DATE,
                        X.WEEKS_NOT_ALLOWED_OUT        X_WEEKS_NOT_ALLOWED_OUT,
                        X.WEEKS_TO_BE_MAINTAINED       X_WEEKS_TO_BE_MAINTAINED,
                        X.WEEKS_OF_PREV_SALES          X_WEEKS_OF_PREV_SALES,
                        X.WEEKS_PRIOR_CURR_DATE        X_WEEKS_PRIOR_CURR_DATE,
                        X.SUPPLY_PERCENT               X_SUPPLY_PERCENT,
                        X.WEEKS_NOT_SOLD               X_WEEKS_NOT_SOLD,
                        X.IS_CHECK_RECEIPT_CUMULATIVE  X_IS_CHECK_RECEIPT_CUMULATIVE,
                        X.WEEKS_AFTER_FIRST_RECEIPT    X_WEEKS_AFTER_FIRST_RECEIPT,
                        X.CUMULATIVE_PERCENT           X_CUMULATIVE_PERCENT,
                        X.PROD_CRITERIA_GROUP_BK       X_PROD_CRITERIA_GROUP_BK,
                        X.LOC_CRITERIA_GROUP_BK        X_LOC_CRITERIA_GROUP_BK,
                        X.YEARSEASON_CRITERIA_GROUP_BK X_YEARSEASON_CRITERIA_GROUP_BK,
                        X.PROD_CRITERIA_ITEMS          X_PROD_CRITERIA_ITEMS,
                        X.LOC_CRITERIA_ITEMS           X_LOC_CRITERIA_ITEMS,
                        X.YEARSEASON_CRITERIA_ITEMS    X_YEARSEASON_CRITERIA_ITEMS,
                        X.DISABLED_DOORS               X_DISABLED_DOORS,

                        Y.SOURCE_BUSKEY               Y_SOURCE_BUSKEY,
                        Y.PARENT_SOURCE_BUSKEY        Y_PARENT_SOURCE_BUSKEY,
                        Y.NAME                        Y_NAME,
                        Y.RULE_TYPE                   Y_RULE_TYPE,
                        Y.START_DATE                  Y_START_DATE,
                        Y.END_DATE                    Y_END_DATE,
                        Y.WEEKS_NOT_ALLOWED_OUT       Y_WEEKS_NOT_ALLOWED_OUT,
                        Y.WEEKS_TO_BE_MAINTAINED      Y_WEEKS_TO_BE_MAINTAINED,
                        Y.WEEKS_OF_PREV_SALES         Y_WEEKS_OF_PREV_SALES,
                        Y.WEEKS_PRIOR_CURR_DATE       Y_WEEKS_PRIOR_CURR_DATE,
                        Y.SUPPLY_PERCENT              Y_SUPPLY_PERCENT,
                        Y.WEEKS_NOT_SOLD              Y_WEEKS_NOT_SOLD,
                        Y.IS_CHECK_RECEIPT_CUMULATIVE Y_IS_CHECK_RECEIPT_CUMULATIVE,
                        Y.WEEKS_AFTER_FIRST_RECEIPT   Y_WEEKS_AFTER_FIRST_RECEIPT,
                        Y.CUMULATIVE_PERCENT          Y_CUMULATIVE_PERCENT,
                        --  Y.PROD_CRITERIA_GROUP_BK           Y_PROD_CRITERIA_GROUP_BK           ,
                        --  Y.LOC_CRITERIA_GROUP_BK            Y_LOC_CRITERIA_GROUP_BK            ,
                        --  Y.YEARSEASON_CRITERIA_GROUP_BK     Y_YEARSEASON_CRITERIA_GROUP_BK     ,
                        Y.PROD_CRITERIA_ITEMS       Y_PROD_CRITERIA_ITEMS,
                        Y.LOC_CRITERIA_ITEMS        Y_LOC_CRITERIA_ITEMS,
                        Y.YEARSEASON_CRITERIA_ITEMS Y_YEARSEASON_CRITERIA_ITEMS,
                        Y.DISABLED_DOORS            Y_DISABLED_DOORS
                   FROM SOURCE X
                   FULL JOIN TARGET Y
                     ON X.SOURCE_BUSKEY = Y.SOURCE_BUSKEY
                  WHERE Y.SOURCE_BUSKEY IS NULL
                     OR X.SOURCE_BUSKEY IS NULL
                     OR X.NAME <> Y.NAME
                     OR X.RULE_TYPE <> Y.RULE_TYPE
                     OR X.START_DATE <> Y.START_DATE
                     OR X.END_DATE <> Y.END_DATE
                     OR X.WEEKS_NOT_ALLOWED_OUT <> Y.WEEKS_NOT_ALLOWED_OUT
                     OR X.WEEKS_TO_BE_MAINTAINED <> Y.WEEKS_TO_BE_MAINTAINED
                     OR X.WEEKS_OF_PREV_SALES <> Y.WEEKS_OF_PREV_SALES
                     OR X.WEEKS_PRIOR_CURR_DATE <> Y.WEEKS_PRIOR_CURR_DATE
                     OR X.SUPPLY_PERCENT <> Y.SUPPLY_PERCENT
                     OR X.WEEKS_NOT_SOLD <> Y.WEEKS_NOT_SOLD
                     OR X.IS_CHECK_RECEIPT_CUMULATIVE <>
                        Y.IS_CHECK_RECEIPT_CUMULATIVE
                     OR X.WEEKS_AFTER_FIRST_RECEIPT <>
                        Y.WEEKS_AFTER_FIRST_RECEIPT
                     OR X.CUMULATIVE_PERCENT <> Y.CUMULATIVE_PERCENT
                     OR X.DISABLED_DOORS <> Y.DISABLED_DOORS
                     OR X.PROD_CRITERIA_ITEMS <> Y.PROD_CRITERIA_ITEMS
                     OR X.LOC_CRITERIA_ITEMS <> Y.LOC_CRITERIA_ITEMS
                     OR X.YEARSEASON_CRITERIA_ITEMS <>
                        Y.YEARSEASON_CRITERIA_ITEMS) LOOP

      IF MR.Y_SOURCE_BUSKEY IS NULL THEN
        INSERT INTO DIM_RULE
          (RULE_ID,
           SOURCE_BUSKEY,
           PARENT_SOURCE_BUSKEY,
           NAME,
           RULE_TYPE,
           START_DATE,
           END_DATE,
           WEEKS_NOT_ALLOWED_OUT,
           WEEKS_TO_BE_MAINTAINED,
           WEEKS_OF_PREV_SALES,
           WEEKS_PRIOR_CURR_DATE,
           SUPPLY_PERCENT,
           WEEKS_NOT_SOLD,
           IS_CHECK_RECEIPT_CUMULATIVE,
           WEEKS_AFTER_FIRST_RECEIPT,
           CUMULATIVE_PERCENT,
           PROD_CRITERIA_GROUP_ID,
           LOC_CRITERIA_GROUP_ID,
           YEARSEASON_CRITERIA_GROUP_ID,
           DW_START_DATE,
           DW_END_DATE,
           DW_VERSION,
           DW_CURRFLAG)
        VALUES
          (SEQ_RULE.NEXTVAL,
           MR.X_SOURCE_BUSKEY,
           MR.X_PARENT_SOURCE_BUSKEY,
           MR.X_NAME,
           MR.X_RULE_TYPE,
           MR.X_START_DATE,
           MR.X_END_DATE,
           MR.X_WEEKS_NOT_ALLOWED_OUT,
           MR.X_WEEKS_TO_BE_MAINTAINED,
           MR.X_WEEKS_OF_PREV_SALES,
           MR.X_WEEKS_PRIOR_CURR_DATE,
           MR.X_SUPPLY_PERCENT,
           MR.X_WEEKS_NOT_SOLD,
           MR.X_IS_CHECK_RECEIPT_CUMULATIVE,
           MR.X_WEEKS_AFTER_FIRST_RECEIPT,
           MR.X_CUMULATIVE_PERCENT,
           L_CACHE_CRITERIA_GROUP(MR.X_PROD_CRITERIA_GROUP_BK),
           L_CACHE_CRITERIA_GROUP(MR.X_LOC_CRITERIA_GROUP_BK),
           L_CACHE_CRITERIA_GROUP(MR.X_YEARSEASON_CRITERIA_GROUP_BK),
           TO_DATE('19000101', 'YYYYMMDD'),
           TO_DATE('99991231', 'YYYYMMDD'),
           1,
           'Y')
        RETURNING RULE_ID INTO L_RULE_ID;

        IF MR.X_DISABLED_DOORS IS NOT EMPTY THEN

          INSERT INTO DIM_RULE_DISABLED
            (RULE_ID, IN_OUT_TYPE, STORE_ID)
            SELECT L_RULE_ID, A.IN_OUT_TYPE, B.STORE_ID
              FROM TABLE(MR.X_DISABLED_DOORS) S,
                   (SELECT LEVEL - 1 IN_OUT_TYPE
                      FROM DUAL
                    CONNECT BY LEVEL < 3) A,
                   (SELECT ORI_COMPANY_DOOR_ID, STORE_ID
                      FROM DIM_STORE_STORE) B
             WHERE S.COLUMN_VALUE =
                   TO_CHAR(A.IN_OUT_TYPE || C_DELIMITER ||
                           B.ORI_COMPANY_DOOR_ID);

        END IF;

        INSERT INTO DIM_RULE
          (RULE_ID,
           SOURCE_BUSKEY,
           PARENT_SOURCE_BUSKEY,
           NAME,
           RULE_TYPE,
           START_DATE,
           END_DATE,
           WEEKS_NOT_ALLOWED_OUT,
           WEEKS_TO_BE_MAINTAINED,
           WEEKS_OF_PREV_SALES,
           WEEKS_PRIOR_CURR_DATE,
           SUPPLY_PERCENT,
           WEEKS_NOT_SOLD,
           IS_CHECK_RECEIPT_CUMULATIVE,
           WEEKS_AFTER_FIRST_RECEIPT,
           CUMULATIVE_PERCENT,
           PROD_CRITERIA_GROUP_ID,
           LOC_CRITERIA_GROUP_ID,
           YEARSEASON_CRITERIA_GROUP_ID,
           DW_START_DATE,
           DW_END_DATE,
           DW_VERSION,
           DW_CURRFLAG)
          SELECT SEQ_RULE.NEXTVAL,
                 TO_CHAR(SR.TRANSFER_RULE_ID) || C_DELIMITER ||
                 TO_CHAR(SR.TRANSFER_SUBRULE_ID) SOURCE_BUSKEY,
                 TO_CHAR(SR.TRANSFER_RULE_ID) PARENT_SOURCE_BUSKEY,
                 UPPER(SR.NAME) NAME,
                 'SUB' RULE_TYPE,
                 SR.START_DATE,
                 SR.END_DATE,
                 SR.WEEKS_NOT_ALLOWED_OUT,
                 SR.WEEKS_TO_BE_MAINTAINED,
                 SR.WEEKS_OF_PREV_SALES,
                 SR.WEEKS_PRIOR_CURR_DATE,
                 SR.SUPPLY_PERCENT,
                 SR.WEEKS_NOT_SOLD,
                 SR.IS_CHECK_RECEIPT_CUMULATIVE,
                 SR.WEEKS_AFTER_FIRST_RECEIPT,
                 SR.CUMULATIVE_PERCENT,
                 NVL(PG.CRITERIA_GROUP_ID, 0) PROD_CRITERIA_GROUP_ID,
                 NVL(LG.CRITERIA_GROUP_ID, 0) LOC_CRITERIA_GROUP_ID,
                 NVL(YG.CRITERIA_GROUP_ID, 0) YEARSEASON_CRITERIA_GROUP_ID,
                 TO_DATE('19000101', 'YYYYMMDD') DW_START_DATE,
                 TO_DATE('99991231', 'YYYYMMDD') DW_END_DATE,
                 1,
                 'Y'
            FROM ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
           INNER JOIN ALLOCATE_TRANSFER_RULE@MYLINKAPP R
              ON SR.TRANSFER_RULE_ID = R.TRANSFER_RULE_ID
           INNER JOIN ALLOCATE_SETTING@MYLINKAPP E
              ON R.SETTING_VALUE_ID = E.SETTING_VALUE_ID
           INNER JOIN COMPANY_CRITERIA@MYLINKAPP C
              ON C.CRITERIA_TYPE = E.CRITERIA_TYPE
            LEFT JOIN DIM_CRITERIA_GROUP PG
              ON TO_CHAR(E.SETTING_ID) || C_DELIMITER || C_STYLE_DIM ||
                 C_DELIMITER || TO_CHAR(SR.TRANSFER_SUBRULE_ID) =
                 PG.SOURCE_BUSKEY
             AND PG.DW_CURRFLAG = 'Y'
            LEFT JOIN DIM_CRITERIA_GROUP LG
              ON TO_CHAR(E.SETTING_ID) || C_DELIMITER || C_STORE_DIM ||
                 C_DELIMITER || TO_CHAR(SR.TRANSFER_SUBRULE_ID) =
                 LG.SOURCE_BUSKEY
             AND LG.DW_CURRFLAG = 'Y'
            LEFT JOIN DIM_CRITERIA_GROUP YG
              ON TO_CHAR(E.SETTING_ID) || C_DELIMITER || C_YEARSEASON_DIM ||
                 C_DELIMITER || TO_CHAR(SR.TRANSFER_SUBRULE_ID) =
                 YG.SOURCE_BUSKEY
             AND YG.DW_CURRFLAG = 'Y'
           WHERE TO_CHAR(SR.TRANSFER_RULE_ID) = MR.X_SOURCE_BUSKEY;

        INSERT INTO DIM_RULE_DISABLED
          (RULE_ID, IN_OUT_TYPE, STORE_ID)
          SELECT R.RULE_ID, IN_OUT_TYPE, D.STORE_ID
            FROM ALLOCATE_TRANSFER_SUBRULE_DIS@MYLINKAPP SRD
           INNER JOIN ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
              ON SRD.TRANSFER_SUBRULE_ID = SR.TRANSFER_SUBRULE_ID
           INNER JOIN DIM_RULE R
              ON TO_CHAR(SR.TRANSFER_RULE_ID) || C_DELIMITER ||
                 TO_CHAR(SR.TRANSFER_SUBRULE_ID) = R.SOURCE_BUSKEY
             AND R.DW_CURRFLAG = 'Y'
           INNER JOIN DIM_STORE_STORE D
              ON SRD.COMPANY_DOOR_ID = D.ORI_COMPANY_DOOR_ID
           WHERE TO_CHAR(SR.TRANSFER_RULE_ID) = MR.X_SOURCE_BUSKEY;

      ELSIF MR.X_SOURCE_BUSKEY IS NULL THEN
        --to handle the deleted rules
         UPDATE DIM_RULE
           SET DW_END_DATE = L_DATE, DW_CURRFLAG = 'N'
         WHERE SOURCE_BUSKEY = MR.Y_SOURCE_BUSKEY
           AND DW_CURRFLAG = 'Y';

      ELSE
        --ATTRIBUTE CHANGED
        UPDATE DIM_RULE
           SET DW_END_DATE = L_DATE, DW_CURRFLAG = 'N'
         WHERE SOURCE_BUSKEY = MR.Y_SOURCE_BUSKEY
           AND DW_CURRFLAG = 'Y'
        RETURNING DW_VERSION INTO L_DW_VERSION;

        --HERE NEED TO GENERATE NEW VERSION FOR SUBRULE!!!

        --GENERATE A NEW VERSION FOR THIS RULE
        INSERT INTO DIM_RULE
          (RULE_ID,
           SOURCE_BUSKEY,
           PARENT_SOURCE_BUSKEY,
           NAME,
           RULE_TYPE,
           START_DATE,
           END_DATE,
           WEEKS_NOT_ALLOWED_OUT,
           WEEKS_TO_BE_MAINTAINED,
           WEEKS_OF_PREV_SALES,
           WEEKS_PRIOR_CURR_DATE,
           SUPPLY_PERCENT,
           WEEKS_NOT_SOLD,
           IS_CHECK_RECEIPT_CUMULATIVE,
           WEEKS_AFTER_FIRST_RECEIPT,
           CUMULATIVE_PERCENT,
           PROD_CRITERIA_GROUP_ID,
           LOC_CRITERIA_GROUP_ID,
           YEARSEASON_CRITERIA_GROUP_ID,
           DW_START_DATE,
           DW_END_DATE,
           DW_VERSION,
           DW_CURRFLAG)
        VALUES
          (SEQ_RULE.NEXTVAL,
           MR.X_SOURCE_BUSKEY,
           MR.X_PARENT_SOURCE_BUSKEY,
           MR.X_NAME,
           MR.X_RULE_TYPE,
           MR.X_START_DATE,
           MR.X_END_DATE,
           MR.X_WEEKS_NOT_ALLOWED_OUT,
           MR.X_WEEKS_TO_BE_MAINTAINED,
           MR.X_WEEKS_OF_PREV_SALES,
           MR.X_WEEKS_PRIOR_CURR_DATE,
           MR.X_SUPPLY_PERCENT,
           MR.X_WEEKS_NOT_SOLD,
           MR.X_IS_CHECK_RECEIPT_CUMULATIVE,
           MR.X_WEEKS_AFTER_FIRST_RECEIPT,
           MR.X_CUMULATIVE_PERCENT,
           L_CACHE_CRITERIA_GROUP(MR.X_PROD_CRITERIA_GROUP_BK),
           L_CACHE_CRITERIA_GROUP(MR.X_LOC_CRITERIA_GROUP_BK),
           L_CACHE_CRITERIA_GROUP(MR.X_YEARSEASON_CRITERIA_GROUP_BK),
           L_DATE + 1 / 24 / 3600,
           TO_DATE('99991231', 'YYYYMMDD'),
           L_DW_VERSION + 1,
           'Y')
        RETURNING RULE_ID INTO L_RULE_ID;

        IF MR.X_DISABLED_DOORS IS NOT EMPTY THEN
          INSERT INTO DIM_RULE_DISABLED
            (RULE_ID, IN_OUT_TYPE, STORE_ID)
            SELECT L_RULE_ID, A.IN_OUT_TYPE, B.STORE_ID
              FROM TABLE(MR.X_DISABLED_DOORS) S,
                   (SELECT LEVEL - 1 IN_OUT_TYPE
                      FROM DUAL
                    CONNECT BY LEVEL < 3) A,
                   (SELECT ORI_COMPANY_DOOR_ID, STORE_ID
                      FROM DIM_STORE_STORE) B
             WHERE S.COLUMN_VALUE =
                   TO_CHAR(A.IN_OUT_TYPE || C_DELIMITER ||
                           B.ORI_COMPANY_DOOR_ID);
        END IF;

        --INSERT THE CORRESPONDING SUBRULE FOR THIS UPDATED RULE
        UPDATE DIM_RULE
           SET DW_END_DATE = L_DATE, DW_CURRFLAG = 'N'
         WHERE PARENT_SOURCE_BUSKEY = MR.X_SOURCE_BUSKEY
           AND DW_CURRFLAG = 'Y';

        INSERT INTO DIM_RULE
          (RULE_ID,
           SOURCE_BUSKEY,
           PARENT_SOURCE_BUSKEY,
           NAME,
           RULE_TYPE,
           START_DATE,
           END_DATE,
           WEEKS_NOT_ALLOWED_OUT,
           WEEKS_TO_BE_MAINTAINED,
           WEEKS_OF_PREV_SALES,
           WEEKS_PRIOR_CURR_DATE,
           SUPPLY_PERCENT,
           WEEKS_NOT_SOLD,
           IS_CHECK_RECEIPT_CUMULATIVE,
           WEEKS_AFTER_FIRST_RECEIPT,
           CUMULATIVE_PERCENT,
           PROD_CRITERIA_GROUP_ID,
           LOC_CRITERIA_GROUP_ID,
           YEARSEASON_CRITERIA_GROUP_ID,
           DW_START_DATE,
           DW_END_DATE,
           DW_VERSION,
           DW_CURRFLAG)
          SELECT SEQ_RULE.NEXTVAL,
                 TO_CHAR(SR.TRANSFER_RULE_ID) || C_DELIMITER ||
                 TO_CHAR(SR.TRANSFER_SUBRULE_ID) SOURCE_BUSKEY,
                 TO_CHAR(SR.TRANSFER_RULE_ID) PARENT_SOURCE_BUSKEY,
                 UPPER(SR.NAME) NAME,
                 'SUB' RULE_TYPE,
                 SR.START_DATE,
                 SR.END_DATE,
                 SR.WEEKS_NOT_ALLOWED_OUT,
                 SR.WEEKS_TO_BE_MAINTAINED,
                 SR.WEEKS_OF_PREV_SALES,
                 SR.WEEKS_PRIOR_CURR_DATE,
                 SR.SUPPLY_PERCENT,
                 SR.WEEKS_NOT_SOLD,
                 SR.IS_CHECK_RECEIPT_CUMULATIVE,
                 SR.WEEKS_AFTER_FIRST_RECEIPT,
                 SR.CUMULATIVE_PERCENT,
                 NVL(PG.CRITERIA_GROUP_ID, 0) PROD_CRITERIA_GROUP_ID,
                 NVL(LG.CRITERIA_GROUP_ID, 0) LOC_CRITERIA_GROUP_ID,
                 NVL(YG.CRITERIA_GROUP_ID, 0) YEARSEASON_CRITERIA_GROUP_ID,
                 L_DATE + 1 / 24 / 3600 DW_START_DATE,
                 TO_DATE('99991231', 'YYYYMMDD') DW_END_DATE,
                 MV.MAX_DW_VERSION + 1,
                 'Y'
            FROM ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
           INNER JOIN ALLOCATE_TRANSFER_RULE@MYLINKAPP R
              ON SR.TRANSFER_RULE_ID = R.TRANSFER_RULE_ID
           INNER JOIN ALLOCATE_SETTING@MYLINKAPP E
              ON R.SETTING_VALUE_ID = E.SETTING_VALUE_ID
           INNER JOIN COMPANY_CRITERIA@MYLINKAPP C
              ON C.CRITERIA_TYPE = E.CRITERIA_TYPE
           INNER JOIN (SELECT SOURCE_BUSKEY, MAX(DW_VERSION) MAX_DW_VERSION
                         FROM DIM_RULE
                        GROUP BY SOURCE_BUSKEY) MV
              ON TO_CHAR(SR.TRANSFER_RULE_ID) || C_DELIMITER ||
                 TO_CHAR(SR.TRANSFER_SUBRULE_ID) = MV.SOURCE_BUSKEY
            LEFT JOIN DIM_CRITERIA_GROUP PG
              ON TO_CHAR(E.SETTING_ID) || C_DELIMITER || C_STYLE_DIM ||
                 C_DELIMITER || TO_CHAR(SR.TRANSFER_SUBRULE_ID) =
                 PG.SOURCE_BUSKEY
             AND PG.DW_CURRFLAG = 'Y'
            LEFT JOIN DIM_CRITERIA_GROUP LG
              ON TO_CHAR(E.SETTING_ID) || C_DELIMITER || C_STORE_DIM ||
                 C_DELIMITER || TO_CHAR(SR.TRANSFER_SUBRULE_ID) =
                 LG.SOURCE_BUSKEY
             AND LG.DW_CURRFLAG = 'Y'
            LEFT JOIN DIM_CRITERIA_GROUP YG
              ON TO_CHAR(E.SETTING_ID) || C_DELIMITER || C_YEARSEASON_DIM ||
                 C_DELIMITER || TO_CHAR(SR.TRANSFER_SUBRULE_ID) =
                 YG.SOURCE_BUSKEY
             AND YG.DW_CURRFLAG = 'Y'
           WHERE TO_CHAR(SR.TRANSFER_RULE_ID) = MR.X_SOURCE_BUSKEY;

        INSERT INTO DIM_RULE_DISABLED
          (RULE_ID, IN_OUT_TYPE, STORE_ID)
          SELECT R.RULE_ID, IN_OUT_TYPE, D.STORE_ID
            FROM ALLOCATE_TRANSFER_SUBRULE_DIS@MYLINKAPP SRD
           INNER JOIN ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
              ON SRD.TRANSFER_SUBRULE_ID = SR.TRANSFER_SUBRULE_ID
           INNER JOIN DIM_RULE R
              ON TO_CHAR(SR.TRANSFER_RULE_ID) || C_DELIMITER ||
                 TO_CHAR(SR.TRANSFER_SUBRULE_ID) = R.SOURCE_BUSKEY
             AND R.DW_CURRFLAG = 'Y'
           INNER JOIN DIM_STORE_STORE D
              ON SRD.COMPANY_DOOR_ID = D.ORI_COMPANY_DOOR_ID
           WHERE TO_CHAR(SR.TRANSFER_RULE_ID) = MR.X_SOURCE_BUSKEY;

      END IF;

    END LOOP;

    --DEDICATED FOR SUBRULE
    FOR SR IN (WITH SOURCE1 AS
                  (SELECT SR.*,
                         E.IS_DEFAULT,
                         E.SETTING_ID,
                         A.DIM_NAME,
                         A.ATTR_NAME,
                         T.ATTR_VALUE,
                         T.FILTER_COLUMN_SEQ SEQ
                    FROM ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
                   INNER JOIN ALLOCATE_TRANSFER_RULE@MYLINKAPP R
                      ON SR.TRANSFER_RULE_ID = R.TRANSFER_RULE_ID
                   INNER JOIN ALLOCATE_SETTING@MYLINKAPP E
                      ON R.SETTING_VALUE_ID = E.SETTING_VALUE_ID
                    LEFT JOIN ALLOCATE_SETTING_CRITERIA@MYLINKAPP T
                      ON E.SETTING_ID = T.SETTING_ID
                    LEFT JOIN COMPANY_CRITERIA@MYLINKAPP C
                      ON C.CRITERIA_TYPE = E.CRITERIA_TYPE
                    LEFT JOIN META_DIM_HIER_LEVEL_ATTRS A
                      ON UPPER(CASE T.CRITERIA_ATTR_SEQ
                                 WHEN 1 THEN
                                  C.ATTR_NAME1
                                 WHEN 2 THEN
                                  C.ATTR_NAME2
                                 WHEN 3 THEN
                                  C.ATTR_NAME3
                                 WHEN 4 THEN
                                  C.ATTR_NAME4
                                 WHEN 5 THEN
                                  C.ATTR_NAME5
                                 WHEN 6 THEN
                                  C.ATTR_NAME6
                                 WHEN 7 THEN
                                  C.ATTR_NAME7
                                 WHEN 8 THEN
                                  C.ATTR_NAME8
                                 WHEN 9 THEN
                                  C.ATTR_NAME9
                                 WHEN 10 THEN
                                  C.ATTR_NAME10
                               END) = A.BUSINESS_DESC
                      AND (A.DIM_NAME,A.HIERARCHY_NAME) IN
                           (
                            (C_STYLE_DIM,C_STYLE_PRIMARY_SIZE_HIER),
                            (C_STORE_DIM,C_STORE_PRIMARY_DETAIL_HIER),
                            (C_YEARSEASON_DIM,C_YEARSEASON_PRIMARY_SIZE_HIER)
                            )
                  UNION
                  SELECT SR.*,
                         S.IS_DEFAULT,
                         S.SETTING_ID,
                         C_STYLE_DIM DIM_NAME,
                         'S_ORI_STYLE_ID' ATTR_NAME,
                         TO_CHAR(STYLE_ID) ATTR_VALUE,
                         999 SEQ
                    FROM ALLOCATE_TRANSFER_SR_STYLE@MYLINKAPP SRS
                   INNER JOIN ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
                      ON SRS.TRANSFER_SUBRULE_ID = SR.TRANSFER_SUBRULE_ID
                   INNER JOIN ALLOCATE_TRANSFER_RULE@MYLINKAPP R
                      ON SR.TRANSFER_RULE_ID = R.TRANSFER_RULE_ID
                   INNER JOIN ALLOCATE_SETTING@MYLINKAPP S
                      ON R.SETTING_VALUE_ID = S.SETTING_VALUE_ID
                  UNION
                  SELECT SR.*,
                         S.IS_DEFAULT,
                         S.SETTING_ID,
                         C_STORE_DIM DIM_NAME,
                         'ORI_COMPANY_DOOR_ID' ATTR_NAME,
                         TO_CHAR(COMPANY_DOOR_ID) ATTR_VALUE,
                         999 SEQ
                    FROM ALLOCATE_TRANSFER_SR_DOOR@MYLINKAPP SRS
                   INNER JOIN ALLOCATE_TRANSFER_SUBRULE@MYLINKAPP SR
                      ON SRS.TRANSFER_SUBRULE_ID = SR.TRANSFER_SUBRULE_ID
                   INNER JOIN ALLOCATE_TRANSFER_RULE@MYLINKAPP R
                      ON SR.TRANSFER_RULE_ID = R.TRANSFER_RULE_ID
                   INNER JOIN ALLOCATE_SETTING@MYLINKAPP S
                      ON R.SETTING_VALUE_ID = S.SETTING_VALUE_ID),
                 SOURCE2 AS
                  (SELECT TRANSFER_SUBRULE_ID,
                         TO_CHAR(TRANSFER_RULE_ID) PARENT_SOURCE_BUSKEY,
                         UPPER(NAME) NAME,
                         IS_DEFAULT,
                         START_DATE,
                         END_DATE,
                         WEEKS_NOT_ALLOWED_OUT,
                         WEEKS_TO_BE_MAINTAINED,
                         WEEKS_OF_PREV_SALES,
                         WEEKS_PRIOR_CURR_DATE,
                         SUPPLY_PERCENT,
                         WEEKS_NOT_SOLD,
                         IS_CHECK_RECEIPT_CUMULATIVE,
                         WEEKS_AFTER_FIRST_RECEIPT,
                         CUMULATIVE_PERCENT,
                         MAX(CASE
                               WHEN DIM_NAME = C_STYLE_DIM THEN
                                SETTING_ID || C_DELIMITER || DIM_NAME ||
                                C_DELIMITER || TO_CHAR(TRANSFER_SUBRULE_ID)
                               ELSE
                                NULL
                             END) PROD_CRITERIA_GROUP_BK,
                         MAX(CASE
                               WHEN DIM_NAME = C_STORE_DIM THEN
                                SETTING_ID || C_DELIMITER || DIM_NAME ||
                                C_DELIMITER || TO_CHAR(TRANSFER_SUBRULE_ID)
                               ELSE
                                NULL
                             END) LOC_CRITERIA_GROUP_BK,
                         MAX(CASE
                               WHEN DIM_NAME = C_YEARSEASON_DIM THEN
                                SETTING_ID || C_DELIMITER || DIM_NAME
                               ELSE
                                NULL
                             END) YEARSEASON_CRITERIA_GROUP_BK,
                         SET(CAST(COLLECT(CASE
                                            WHEN DIM_NAME = C_STYLE_DIM THEN
                                             ATTR_NAME || C_DELIMITER || ATTR_VALUE
                                            ELSE
                                             C_DUMMY
                                          END ORDER BY SEQ,
                                          ATTR_VALUE) AS NNT_STRS)) PROD_CRITERIA_ITEMS,
                         SET(CAST(COLLECT(CASE
                                            WHEN DIM_NAME = C_STORE_DIM THEN
                                             ATTR_NAME || C_DELIMITER || ATTR_VALUE
                                            ELSE
                                             C_DUMMY
                                          END ORDER BY SEQ,
                                          ATTR_VALUE) AS NNT_STRS)) LOC_CRITERIA_ITEMS,
                         SET(CAST(COLLECT(CASE
                                            WHEN DIM_NAME = C_YEARSEASON_DIM THEN
                                             ATTR_NAME || C_DELIMITER || ATTR_VALUE
                                            ELSE
                                             C_DUMMY
                                          END ORDER BY SEQ,
                                          ATTR_VALUE) AS NNT_STRS)) YEARSEASON_CRITERIA_ITEMS
                    FROM SOURCE1
                   GROUP BY TRANSFER_SUBRULE_ID,
                            TO_CHAR(TRANSFER_RULE_ID),
                            UPPER(NAME),
                            IS_DEFAULT,
                            START_DATE,
                            END_DATE,
                            WEEKS_NOT_ALLOWED_OUT,
                            WEEKS_TO_BE_MAINTAINED,
                            WEEKS_OF_PREV_SALES,
                            WEEKS_PRIOR_CURR_DATE,
                            SUPPLY_PERCENT,
                            WEEKS_NOT_SOLD,
                            IS_CHECK_RECEIPT_CUMULATIVE,
                            WEEKS_AFTER_FIRST_RECEIPT,
                            CUMULATIVE_PERCENT),
                 SOURCE AS
                  (SELECT O.PARENT_SOURCE_BUSKEY || C_DELIMITER ||
                         TO_CHAR(O.TRANSFER_SUBRULE_ID) SOURCE_BUSKEY,
                         O.PARENT_SOURCE_BUSKEY,
                         O.NAME,
                         'SUB' RULE_TYPE,
                         O.START_DATE,
                         O.END_DATE,
                         O.WEEKS_NOT_ALLOWED_OUT,
                         O.WEEKS_TO_BE_MAINTAINED,
                         O.WEEKS_OF_PREV_SALES,
                         O.WEEKS_PRIOR_CURR_DATE,
                         O.SUPPLY_PERCENT,
                         O.WEEKS_NOT_SOLD,
                         O.IS_CHECK_RECEIPT_CUMULATIVE,
                         O.WEEKS_AFTER_FIRST_RECEIPT,
                         O.CUMULATIVE_PERCENT,
                         NVL(O.PROD_CRITERIA_GROUP_BK, C_DUMMY) PROD_CRITERIA_GROUP_BK,
                         NVL(O.LOC_CRITERIA_GROUP_BK, C_DUMMY) LOC_CRITERIA_GROUP_BK,
                         NVL(O.YEARSEASON_CRITERIA_GROUP_BK, C_DUMMY) YEARSEASON_CRITERIA_GROUP_BK,
                         RD.DISABLED_DOORS,
                         O.PROD_CRITERIA_ITEMS MULTISET EXCEPT NNT_STRS(C_DUMMY) PROD_CRITERIA_ITEMS,
                         O.LOC_CRITERIA_ITEMS MULTISET EXCEPT NNT_STRS(C_DUMMY) LOC_CRITERIA_ITEMS,
                         O.YEARSEASON_CRITERIA_ITEMS MULTISET EXCEPT NNT_STRS(C_DUMMY) YEARSEASON_CRITERIA_ITEMS
                    FROM SOURCE2 O
                    LEFT JOIN (SELECT D.TRANSFER_SUBRULE_ID,
                                     CAST(COLLECT(D.IN_OUT_TYPE ||
                                                  C_DELIMITER ||
                                                  D.COMPANY_DOOR_ID ORDER BY
                                                  D.IN_OUT_TYPE,
                                                  D.COMPANY_DOOR_ID) AS
                                          NNT_STRS) DISABLED_DOORS
                                FROM ALLOCATE_TRANSFER_SUBRULE_DIS@MYLINKAPP D
                               GROUP BY D.TRANSFER_SUBRULE_ID) RD
                      ON O.TRANSFER_SUBRULE_ID = RD.TRANSFER_SUBRULE_ID),
                 TARGET AS
                  (SELECT R.SOURCE_BUSKEY,
                         R.PARENT_SOURCE_BUSKEY,
                         R.NAME,
                         R.RULE_TYPE,
                         R.START_DATE,
                         R.END_DATE,
                         R.WEEKS_NOT_ALLOWED_OUT,
                         R.WEEKS_TO_BE_MAINTAINED,
                         R.WEEKS_OF_PREV_SALES,
                         R.WEEKS_PRIOR_CURR_DATE,
                         R.SUPPLY_PERCENT,
                         R.WEEKS_NOT_SOLD,
                         R.IS_CHECK_RECEIPT_CUMULATIVE,
                         R.WEEKS_AFTER_FIRST_RECEIPT,
                         R.CUMULATIVE_PERCENT,
                         RD.DISABLED_DOORS,
                         PB.CRITERIA_ITEMS             MULTISET EXCEPT NNT_STRS(C_DUMMY || C_DELIMITER || C_DUMMY) PROD_CRITERIA_ITEMS,
                         LB.CRITERIA_ITEMS             MULTISET EXCEPT NNT_STRS(C_DUMMY || C_DELIMITER || C_DUMMY) LOC_CRITERIA_ITEMS,
                         YB.CRITERIA_ITEMS             MULTISET EXCEPT NNT_STRS(C_DUMMY || C_DELIMITER || C_DUMMY) YEARSEASON_CRITERIA_ITEMS,
                         R.DW_START_DATE,
                         R.DW_END_DATE,
                         R.DW_VERSION,
                         R.DW_CURRFLAG
                    FROM DIM_RULE R
                    LEFT JOIN (SELECT I.CRITERIA_GROUP_ID,
                                     CAST(COLLECT(I.NAME || C_DELIMITER ||
                                                  I.VALUE ORDER BY I.SEQ,
                                                  I.VALUE) AS NNT_STRS) CRITERIA_ITEMS
                                FROM DIM_CRITERIA_ITEM I
                               GROUP BY I.CRITERIA_GROUP_ID) PB
                      ON R.PROD_CRITERIA_GROUP_ID = PB.CRITERIA_GROUP_ID
                    LEFT JOIN (SELECT I.CRITERIA_GROUP_ID,
                                     CAST(COLLECT(I.NAME || C_DELIMITER ||
                                                  I.VALUE ORDER BY I.SEQ,
                                                  I.VALUE) AS NNT_STRS) CRITERIA_ITEMS
                                FROM DIM_CRITERIA_ITEM I
                               GROUP BY I.CRITERIA_GROUP_ID) LB
                      ON R.LOC_CRITERIA_GROUP_ID = LB.CRITERIA_GROUP_ID
                    LEFT JOIN (SELECT I.CRITERIA_GROUP_ID,
                                     CAST(COLLECT(I.NAME || C_DELIMITER ||
                                                  I.VALUE ORDER BY I.SEQ,
                                                  I.VALUE) AS NNT_STRS) CRITERIA_ITEMS
                                FROM DIM_CRITERIA_ITEM I
                               GROUP BY I.CRITERIA_GROUP_ID) YB
                      ON R.YEARSEASON_CRITERIA_GROUP_ID =
                         YB.CRITERIA_GROUP_ID
                    LEFT JOIN (SELECT A.RULE_ID,
                                     CAST(COLLECT(A.IN_OUT_TYPE ||
                                                  C_DELIMITER ||
                                                  B.ORI_COMPANY_DOOR_ID
                                                  ORDER BY A.IN_OUT_TYPE,
                                                  B.ORI_COMPANY_DOOR_ID) AS
                                          NNT_STRS) DISABLED_DOORS
                                FROM DIM_RULE_DISABLED A
                               INNER JOIN DIM_STORE_STORE B
                                  ON A.STORE_ID = B.STORE_ID
                               GROUP BY A.RULE_ID) RD
                      ON R.RULE_ID = RD.RULE_ID
                   WHERE R.DW_CURRFLAG = 'Y'
                     AND R.RULE_TYPE IN ('SUB'))
                 --1,TO BE INSERTED
                 SELECT X.SOURCE_BUSKEY                X_SOURCE_BUSKEY,
                        X.PARENT_SOURCE_BUSKEY         X_PARENT_SOURCE_BUSKEY,
                        X.NAME                         X_NAME,
                        X.RULE_TYPE                    X_RULE_TYPE,
                        X.START_DATE                   X_START_DATE,
                        X.END_DATE                     X_END_DATE,
                        X.WEEKS_NOT_ALLOWED_OUT        X_WEEKS_NOT_ALLOWED_OUT,
                        X.WEEKS_TO_BE_MAINTAINED       X_WEEKS_TO_BE_MAINTAINED,
                        X.WEEKS_OF_PREV_SALES          X_WEEKS_OF_PREV_SALES,
                        X.WEEKS_PRIOR_CURR_DATE        X_WEEKS_PRIOR_CURR_DATE,
                        X.SUPPLY_PERCENT               X_SUPPLY_PERCENT,
                        X.WEEKS_NOT_SOLD               X_WEEKS_NOT_SOLD,
                        X.IS_CHECK_RECEIPT_CUMULATIVE  X_IS_CHECK_RECEIPT_CUMULATIVE,
                        X.WEEKS_AFTER_FIRST_RECEIPT    X_WEEKS_AFTER_FIRST_RECEIPT,
                        X.CUMULATIVE_PERCENT           X_CUMULATIVE_PERCENT,
                        X.PROD_CRITERIA_GROUP_BK       X_PROD_CRITERIA_GROUP_BK,
                        X.LOC_CRITERIA_GROUP_BK        X_LOC_CRITERIA_GROUP_BK,
                        X.YEARSEASON_CRITERIA_GROUP_BK X_YEARSEASON_CRITERIA_GROUP_BK,
                        X.PROD_CRITERIA_ITEMS          X_PROD_CRITERIA_ITEMS,
                        X.LOC_CRITERIA_ITEMS           X_LOC_CRITERIA_ITEMS,
                        X.YEARSEASON_CRITERIA_ITEMS    X_YEARSEASON_CRITERIA_ITEMS,
                        X.DISABLED_DOORS               X_DISABLED_DOORS,

                        Y.SOURCE_BUSKEY               Y_SOURCE_BUSKEY,
                        Y.PARENT_SOURCE_BUSKEY        Y_PARENT_SOURCE_BUSKEY,
                        Y.NAME                        Y_NAME,
                        Y.RULE_TYPE                   Y_RULE_TYPE,
                        Y.START_DATE                  Y_START_DATE,
                        Y.END_DATE                    Y_END_DATE,
                        Y.WEEKS_NOT_ALLOWED_OUT       Y_WEEKS_NOT_ALLOWED_OUT,
                        Y.WEEKS_TO_BE_MAINTAINED      Y_WEEKS_TO_BE_MAINTAINED,
                        Y.WEEKS_OF_PREV_SALES         Y_WEEKS_OF_PREV_SALES,
                        Y.WEEKS_PRIOR_CURR_DATE       Y_WEEKS_PRIOR_CURR_DATE,
                        Y.SUPPLY_PERCENT              Y_SUPPLY_PERCENT,
                        Y.WEEKS_NOT_SOLD              Y_WEEKS_NOT_SOLD,
                        Y.IS_CHECK_RECEIPT_CUMULATIVE Y_IS_CHECK_RECEIPT_CUMULATIVE,
                        Y.WEEKS_AFTER_FIRST_RECEIPT   Y_WEEKS_AFTER_FIRST_RECEIPT,
                        Y.CUMULATIVE_PERCENT          Y_CUMULATIVE_PERCENT,
                        --  Y.PROD_CRITERIA_GROUP_BK           Y_PROD_CRITERIA_GROUP_BK           ,
                        --  Y.LOC_CRITERIA_GROUP_BK            Y_LOC_CRITERIA_GROUP_BK            ,
                        --  Y.YEARSEASON_CRITERIA_GROUP_BK     Y_YEARSEASON_CRITERIA_GROUP_BK     ,
                        Y.PROD_CRITERIA_ITEMS       Y_PROD_CRITERIA_ITEMS,
                        Y.LOC_CRITERIA_ITEMS        Y_LOC_CRITERIA_ITEMS,
                        Y.YEARSEASON_CRITERIA_ITEMS Y_YEARSEASON_CRITERIA_ITEMS,
                        Y.DISABLED_DOORS            Y_DISABLED_DOORS
                   FROM SOURCE X
                   FULL JOIN TARGET Y
                     ON X.SOURCE_BUSKEY = Y.SOURCE_BUSKEY
                  WHERE Y.SOURCE_BUSKEY IS NULL
                     OR X.SOURCE_BUSKEY IS NULL
                     OR X.NAME <> Y.NAME
                     OR X.RULE_TYPE <> Y.RULE_TYPE
                     OR X.START_DATE <> Y.START_DATE
                     OR X.END_DATE <> Y.END_DATE
                     OR X.WEEKS_NOT_ALLOWED_OUT <> Y.WEEKS_NOT_ALLOWED_OUT
                     OR X.WEEKS_TO_BE_MAINTAINED <> Y.WEEKS_TO_BE_MAINTAINED
                     OR X.WEEKS_OF_PREV_SALES <> Y.WEEKS_OF_PREV_SALES
                     OR X.WEEKS_PRIOR_CURR_DATE <> Y.WEEKS_PRIOR_CURR_DATE
                     OR X.SUPPLY_PERCENT <> Y.SUPPLY_PERCENT
                     OR X.WEEKS_NOT_SOLD <> Y.WEEKS_NOT_SOLD
                     OR X.IS_CHECK_RECEIPT_CUMULATIVE <>
                        Y.IS_CHECK_RECEIPT_CUMULATIVE
                     OR X.WEEKS_AFTER_FIRST_RECEIPT <>
                        Y.WEEKS_AFTER_FIRST_RECEIPT
                     OR X.CUMULATIVE_PERCENT <> Y.CUMULATIVE_PERCENT
                     OR X.DISABLED_DOORS <> Y.DISABLED_DOORS
                     OR X.PROD_CRITERIA_ITEMS <> Y.PROD_CRITERIA_ITEMS
                     OR X.LOC_CRITERIA_ITEMS <> Y.LOC_CRITERIA_ITEMS
                     OR X.YEARSEASON_CRITERIA_ITEMS <>
                        Y.YEARSEASON_CRITERIA_ITEMS) LOOP

      IF SR.Y_SOURCE_BUSKEY IS NULL THEN
        INSERT INTO DIM_RULE
          (RULE_ID,
           SOURCE_BUSKEY,
           PARENT_SOURCE_BUSKEY,
           NAME,
           RULE_TYPE,
           START_DATE,
           END_DATE,
           WEEKS_NOT_ALLOWED_OUT,
           WEEKS_TO_BE_MAINTAINED,
           WEEKS_OF_PREV_SALES,
           WEEKS_PRIOR_CURR_DATE,
           SUPPLY_PERCENT,
           WEEKS_NOT_SOLD,
           IS_CHECK_RECEIPT_CUMULATIVE,
           WEEKS_AFTER_FIRST_RECEIPT,
           CUMULATIVE_PERCENT,
           PROD_CRITERIA_GROUP_ID,
           LOC_CRITERIA_GROUP_ID,
           YEARSEASON_CRITERIA_GROUP_ID,
           DW_START_DATE,
           DW_END_DATE,
           DW_VERSION,
           DW_CURRFLAG)
        VALUES
          (SEQ_RULE.NEXTVAL,
           SR.X_SOURCE_BUSKEY,
           SR.X_PARENT_SOURCE_BUSKEY,
           SR.X_NAME,
           SR.X_RULE_TYPE,
           SR.X_START_DATE,
           SR.X_END_DATE,
           SR.X_WEEKS_NOT_ALLOWED_OUT,
           SR.X_WEEKS_TO_BE_MAINTAINED,
           SR.X_WEEKS_OF_PREV_SALES,
           SR.X_WEEKS_PRIOR_CURR_DATE,
           SR.X_SUPPLY_PERCENT,
           SR.X_WEEKS_NOT_SOLD,
           SR.X_IS_CHECK_RECEIPT_CUMULATIVE,
           SR.X_WEEKS_AFTER_FIRST_RECEIPT,
           SR.X_CUMULATIVE_PERCENT,
           L_CACHE_CRITERIA_GROUP(SR.X_PROD_CRITERIA_GROUP_BK),
           L_CACHE_CRITERIA_GROUP(SR.X_LOC_CRITERIA_GROUP_BK),
           L_CACHE_CRITERIA_GROUP(SR.X_YEARSEASON_CRITERIA_GROUP_BK),
           TO_DATE('19000101', 'YYYYMMDD'),
           TO_DATE('99991231', 'YYYYMMDD'),
           1,
           'Y')
        RETURNING RULE_ID INTO L_RULE_ID;

        IF SR.X_DISABLED_DOORS IS NOT EMPTY THEN

          INSERT INTO DIM_RULE_DISABLED
            (RULE_ID, IN_OUT_TYPE, STORE_ID)
            SELECT L_RULE_ID, A.IN_OUT_TYPE, B.STORE_ID
              FROM TABLE(SR.X_DISABLED_DOORS) S,
                   (SELECT LEVEL - 1 IN_OUT_TYPE
                      FROM DUAL
                    CONNECT BY LEVEL < 3) A,
                   (SELECT ORI_COMPANY_DOOR_ID, STORE_ID
                      FROM DIM_STORE_STORE) B
             WHERE S.COLUMN_VALUE =
                   TO_CHAR(A.IN_OUT_TYPE || C_DELIMITER ||
                           B.ORI_COMPANY_DOOR_ID);

        END IF;

      ELSIF SR.X_SOURCE_BUSKEY IS NULL THEN
        --to handle the deleted sub rules
         UPDATE DIM_RULE
           SET DW_END_DATE = L_DATE, DW_CURRFLAG = 'N'
         WHERE SOURCE_BUSKEY = SR.Y_SOURCE_BUSKEY
           AND DW_CURRFLAG = 'Y';
      ELSE
        UPDATE DIM_RULE
           SET DW_END_DATE = L_DATE, DW_CURRFLAG = 'N'
         WHERE SOURCE_BUSKEY = SR.Y_SOURCE_BUSKEY
           AND DW_CURRFLAG = 'Y'
        RETURNING DW_VERSION INTO L_DW_VERSION;

        INSERT INTO DIM_RULE
          (RULE_ID,
           SOURCE_BUSKEY,
           PARENT_SOURCE_BUSKEY,
           NAME,
           RULE_TYPE,
           START_DATE,
           END_DATE,
           WEEKS_NOT_ALLOWED_OUT,
           WEEKS_TO_BE_MAINTAINED,
           WEEKS_OF_PREV_SALES,
           WEEKS_PRIOR_CURR_DATE,
           SUPPLY_PERCENT,
           WEEKS_NOT_SOLD,
           IS_CHECK_RECEIPT_CUMULATIVE,
           WEEKS_AFTER_FIRST_RECEIPT,
           CUMULATIVE_PERCENT,
           PROD_CRITERIA_GROUP_ID,
           LOC_CRITERIA_GROUP_ID,
           YEARSEASON_CRITERIA_GROUP_ID,
           DW_START_DATE,
           DW_END_DATE,
           DW_VERSION,
           DW_CURRFLAG)
        VALUES
          (SEQ_RULE.NEXTVAL,
           SR.X_SOURCE_BUSKEY,
           SR.X_PARENT_SOURCE_BUSKEY,
           SR.X_NAME,
           SR.X_RULE_TYPE,
           SR.X_START_DATE,
           SR.X_END_DATE,
           SR.X_WEEKS_NOT_ALLOWED_OUT,
           SR.X_WEEKS_TO_BE_MAINTAINED,
           SR.X_WEEKS_OF_PREV_SALES,
           SR.X_WEEKS_PRIOR_CURR_DATE,
           SR.X_SUPPLY_PERCENT,
           SR.X_WEEKS_NOT_SOLD,
           SR.X_IS_CHECK_RECEIPT_CUMULATIVE,
           SR.X_WEEKS_AFTER_FIRST_RECEIPT,
           SR.X_CUMULATIVE_PERCENT,
           L_CACHE_CRITERIA_GROUP(SR.X_PROD_CRITERIA_GROUP_BK),
           L_CACHE_CRITERIA_GROUP(SR.X_LOC_CRITERIA_GROUP_BK),
           L_CACHE_CRITERIA_GROUP(SR.X_YEARSEASON_CRITERIA_GROUP_BK),
           L_DATE + 1 / 24 / 3600,
           TO_DATE('99991231', 'YYYYMMDD'),
           L_DW_VERSION + 1,
           'Y')
        RETURNING RULE_ID INTO L_RULE_ID;

        IF SR.X_DISABLED_DOORS IS NOT EMPTY THEN
          INSERT INTO DIM_RULE_DISABLED
            (RULE_ID, IN_OUT_TYPE, STORE_ID)
            SELECT L_RULE_ID, A.IN_OUT_TYPE, B.STORE_ID
              FROM TABLE(SR.X_DISABLED_DOORS) S,
                   (SELECT LEVEL - 1 IN_OUT_TYPE
                      FROM DUAL
                    CONNECT BY LEVEL < 3) A,
                   (SELECT ORI_COMPANY_DOOR_ID, STORE_ID
                      FROM DIM_STORE_STORE) B
             WHERE S.COLUMN_VALUE =
                   TO_CHAR(A.IN_OUT_TYPE || C_DELIMITER ||
                           B.ORI_COMPANY_DOOR_ID);
        END IF;

      END IF;
    END LOOP;

    COMMIT;
  END POP_DIM_RULE;

  PROCEDURE POP_DIM_CLUSTER_SEQUENCE(P_IS_INITIAL BOOLEAN DEFAULT TRUE)
    IS
    BEGIN

      IF P_IS_INITIAL THEN
        DISABLE_ALL_CONS;

        EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_CLUSTER_SEQUENCE';

        RELY_ALL_CONS;

        RESET_SEQUENCE('SEQ_CLUSTER_SEQUENCE');

        INSERT INTO DIM_CLUSTER_SEQUENCE
          (CLUSTER_SEQUENCE_ID, SOURCE_BUSKEY, CLUSTER_NAME, SEQUENCE)
        VALUES
          (0, C_DUMMY, C_DUMMY, 0);
      END IF;

      MERGE INTO DIM_CLUSTER_SEQUENCE T
      USING(
            SELECT TO_CHAR(CMM_CLUSTER_SEQUENCE_ITEM_ID) SOURCE_BUSKEY,
                   UPPER(CLUSTER_NAME) CLUSTER_NAME,
                   SEQUENCE
            FROM CMM_CLUSTER_SEQUENCE_ITEM@MYLINKAPP
      ) S
      ON (T.SOURCE_BUSKEY=S.SOURCE_BUSKEY)
      WHEN MATCHED THEN UPDATE
        SET T.CLUSTER_NAME = S.CLUSTER_NAME,
            T.SEQUENCE     = S.SEQUENCE
      WHEN NOT MATCHED THEN INSERT(
        CLUSTER_SEQUENCE_ID,
        SOURCE_BUSKEY,
        CLUSTER_NAME,
        SEQUENCE)VALUES(
        GET_SEQ_NEXTVALUE('SEQ_CLUSTER_SEQUENCE'),
        S.SOURCE_BUSKEY,
        S.CLUSTER_NAME,
        S.SEQUENCE);

    COMMIT;

  END POP_DIM_CLUSTER_SEQUENCE;


  PROCEDURE POP_DIM_TRANSFER IS
  BEGIN
    DISABLE_ALL_CONS;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_TRANSFER_FORECAST';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_TRANSFER_TRANSFER';
    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_TRANSFER_RELEASE';

    RELY_ALL_CONS;

    RESET_SEQUENCE('SEQ_TRANSFER_FORECAST');
    RESET_SEQUENCE('SEQ_TRANSFER_TRANSFER');
    RESET_SEQUENCE('SEQ_TRANSFER_RELEASE');

    INSERT INTO DIM_TRANSFER_FORECAST
      (TRANSFER_FORECAST_ID,
       SOURCE_BUSKEY,
       FORECAST_DATE,
       FORECAST_DT,
       FORECAST_NAME,
       PROD_CRITERIA_GROUP_ID,
       LOC_CRITERIA_GROUP_ID)
    VALUES
      (0,
       C_DUMMY,
       TO_DATE('19000101', 'YYYYMMDD'),
       19000101,
       C_DUMMY,
       0,
       0);

    INSERT INTO DIM_TRANSFER_TRANSFER
      (TRANSFER_TRANSFER_ID,
       SOURCE_BUSKEY,
       TRANSFER_DATE,
       TRANSFER_DT,
       PROD_CRITERIA_GROUP_ID,
       LOC_CRITERIA_GROUP_ID,
       TRANSFER_NAME)
    VALUES
      (0,
       C_DUMMY,
       TO_DATE('19000101', 'YYYYMMDD'),
       19000101,
       0,
       0,
       C_DUMMY);

    INSERT INTO DIM_TRANSFER_RELEASE
      (TRANSFER_RELEASE_ID,
       SOURCE_BUSKEY,
       TRANSFER_TRANSFER_ID,
       RELEASE_DATE,
       RELEASE_DT,
       PROD_CRITERIA_GROUP_ID,
       LOC_CRITERIA_GROUP_ID,
       RELEASE_NAME)
    VALUES
      (0,
       C_DUMMY,
       0,
       TO_DATE('19000101', 'YYYYMMDD'),
       19000101,
       0,
       0,
       C_DUMMY);

    COMMIT;

  END POP_DIM_TRANSFER;

  PROCEDURE POP_DIM_AUDIT IS
  BEGIN
    DISABLE_ALL_CONS;

    EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_AUDIT';

    RELY_ALL_CONS;

    RESET_SEQUENCE('SEQ_AUDIT');

    INSERT INTO DIM_AUDIT
      (AUDIT_ID,
       DW_SOURCE,
       DW_UPDATE_USER,
       DW_UPDATE_DATE,
       DW_NUM_REC_LOADED,
       DW_NUM_REC_REJECTED)
    VALUES
      (0, C_DUMMY, C_DUMMY, SYSDATE, 0, 0);

    COMMIT;
  END POP_DIM_AUDIT;

  PROCEDURE POP_DIM_ALLOCATION_REFERENCE IS
    BEGIN

      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_ALLOCATION_REFERENCE';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_ALLOCATION_REFERENCE');

      INSERT INTO DIM_ALLOCATION_REFERENCE
        (ALLOCATION_REFERENCE_ID,
         SOURCE_BUSKEY,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID,
         ALLOCATION_SETTING_BK)
      VALUES
        (0,
         C_DUMMY,
         0,
         0,
         0,
         0);
      COMMIT;

    END POP_DIM_ALLOCATION_REFERENCE;

  PROCEDURE POP_DIM_TRANSFER_MATRIX IS
    BEGIN
      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_TRANSFER_MATRIX';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_TRANSFER_MATRIX');

      INSERT INTO DIM_TRANSFER_MATRIX
        (TRANSFER_MATRIX_ID,
         SOURCE_BUSKEY,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID,
         BASE_UNITS_BK)
      VALUES
        (0,
         C_DUMMY,
         0,
         0,
         0,
         0);

      COMMIT;

  END POP_DIM_TRANSFER_MATRIX;

  PROCEDURE POP_DIM_BOXSTYLE IS
    BEGIN

      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_BOXSTYLE';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_BOXSTYLE');

      INSERT INTO DIM_BOXSTYLE
        (BOXSTYLE_ID,
         SOURCE_BUSKEY,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID,
         BASE_UNITS_BK)
      VALUES
        (0,
         C_DUMMY,
         0,
         0,
         0,
         0);

      COMMIT;

  END POP_DIM_BOXSTYLE;

  PROCEDURE POP_DIM_ALLOCATE IS
    BEGIN
      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_PO_BD';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_PO_BD_RELEASE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_PO_ALLOCATE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_PO_RELEASE';


      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_ASN_BD';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_ASN_BD_RELEASE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_ASN_ALLOCATE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_ASN_RELEASE';


      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_RECEIVER_BD';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_RECEIVER_BD_RELEASE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_RECEIVER_ALLOCATE';
      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_RECEIVER_RELEASE';


      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_PO_BD');
      RESET_SEQUENCE('SEQ_PO_BD_RELEASE');
      RESET_SEQUENCE('SEQ_PO_ALLOCATE');
      RESET_SEQUENCE('SEQ_PO_RELEASE');

      RESET_SEQUENCE('SEQ_ASN_BD');
      RESET_SEQUENCE('SEQ_ASN_BD_RELEASE');
      RESET_SEQUENCE('SEQ_ASN_ALLOCATE');
      RESET_SEQUENCE('SEQ_ASN_RELEASE');

      RESET_SEQUENCE('SEQ_RECEIVER_BD');
      RESET_SEQUENCE('SEQ_RECEIVER_BD_RELEASE');
      RESET_SEQUENCE('SEQ_RECEIVER_ALLOCATE');
      RESET_SEQUENCE('SEQ_RECEIVER_RELEASE');

      RESET_SEQUENCE('SEQ_TRANS_PO');
      RESET_SEQUENCE('SEQ_TRANS_PO_BD');
      RESET_SEQUENCE('SEQ_TRANS_PO_BD_RELEASE');
      RESET_SEQUENCE('SEQ_TRANS_PO_ALLOCATE');
      RESET_SEQUENCE('SEQ_TRANS_PO_RELEASE');

      RESET_SEQUENCE('SEQ_TRANS_ASN');
      RESET_SEQUENCE('SEQ_TRANS_ASN_BD');
      RESET_SEQUENCE('SEQ_TRANS_ASN_BD_RELEASE');
      RESET_SEQUENCE('SEQ_TRANS_ASN_ALLOCATE');
      RESET_SEQUENCE('SEQ_TRANS_ASN_RELEASE');

      RESET_SEQUENCE('SEQ_TRANS_RECEIVER');
      RESET_SEQUENCE('SEQ_TRANS_RECEIVER_BD');
      RESET_SEQUENCE('SEQ_TRANS_RECEIVER_BD_RELEASE');
      RESET_SEQUENCE('SEQ_TRANS_RECEIVER_ALLOCATE');
      RESET_SEQUENCE('SEQ_TRANS_RECEIVER_RELEASE');

      INSERT INTO DIM_PO_BD
        (PO_BD_ID,
         SOURCE_BUSKEY,
         PO_NUMBER,
         PO_BD_DATE,
         PO_BD_NAME,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         TO_DATE('19000101','YYYYMMDD'),
         C_DUMMY,
         0,
         0,
         0);


      INSERT INTO DIM_PO_BD_RELEASE
        (PO_BD_RELEASE_ID,
         SOURCE_BUSKEY,
         PO_BD_ID,
         PO_BD_RELEASE_DATE,
         PO_BD_RELEASE_NAME,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID)
      VALUES
        (0,
         C_DUMMY,
         0,
         TO_DATE('19000101','YYYYMMDD'),
         C_DUMMY,
         0,
         0,
         0);

      INSERT INTO DIM_PO_ALLOCATE
        (PO_ALLOCATE_ID,
         SOURCE_BUSKEY,
         PO_BD_RELEASE_ID,
         PO_ALLOCATE_DATE,
         PO_ALLOCATE_NAME,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID)
      VALUES
        (0,
         C_DUMMY,
         0,
         TO_DATE('19000101','YYYYMMDD'),
         C_DUMMY,
         0,
         0,
         0);


      INSERT INTO DIM_PO_RELEASE
        (PO_RELEASE_ID,
         SOURCE_BUSKEY,
         PO_ALLOCATE_ID,
         PO_RELEASE_DATE,
         PO_RELEASE_NAME,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID)
      VALUES
        (0,
         C_DUMMY,
         0,
         TO_DATE('19000101','YYYYMMDD'),
         C_DUMMY,
         0,
         0,
         0);


      INSERT INTO DIM_ASN_BD
        (ASN_BD_ID,
         SOURCE_BUSKEY,
         ASN_NUMBER,
         ASN_BD_DATE,
         ASN_BD_NAME,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID)
      VALUES
        (0,
         C_DUMMY,
         C_DUMMY,
         TO_DATE('19000101','YYYYMMDD'),
         C_DUMMY,
         0,
         0,
         0);


      INSERT INTO DIM_ASN_BD_RELEASE
        (ASN_BD_RELEASE_ID,
         SOURCE_BUSKEY,
         ASN_BD_ID,
         ASN_BD_RELEASE_DATE,
         ASN_BD_RELEASE_NAME,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID)
      VALUES
        (0,
         C_DUMMY,
         0,
         TO_DATE('19000101','YYYYMMDD'),
         C_DUMMY,
         0,
         0,
         0);

      INSERT INTO DIM_ASN_ALLOCATE
        (ASN_ALLOCATE_ID,
         SOURCE_BUSKEY,
         ASN_BD_RELEASE_ID,
         ASN_ALLOCATE_DATE,
         ASN_ALLOCATE_NAME,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID)
      VALUES
        (0,
         C_DUMMY,
         0,
         TO_DATE('19000101','YYYYMMDD'),
         C_DUMMY,
         0,
         0,
         0);

      INSERT INTO DIM_ASN_RELEASE
        (ASN_RELEASE_ID,
         SOURCE_BUSKEY,
         ASN_ALLOCATE_ID,
         ASN_RELEASE_DATE,
         ASN_RELEASE_NAME,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID)
      VALUES
        (0,
         C_DUMMY,
         0,
         TO_DATE('19000101','YYYYMMDD'),
         C_DUMMY,
         0,
         0,
         0);


    INSERT INTO DIM_RECEIVER_BD
      (RECEIVER_BD_ID,
       SOURCE_BUSKEY,
       RECEIVER_NUMBER,
       RECEIVER_BD_DATE,
       RECEIVER_BD_NAME,
       PROD_CRITERIA_GROUP_ID,
       LOC_CRITERIA_GROUP_ID,
       YEARSEASON_CRITERIA_GROUP_ID)
    VALUES
      (0,
       C_DUMMY,
       C_DUMMY,
       TO_DATE('19000101','YYYYMMDD'),
       C_DUMMY,
       0,
       0,
       0);

    INSERT INTO DIM_RECEIVER_BD_RELEASE
      (RECEIVER_BD_RELEASE_ID,
       SOURCE_BUSKEY,
       RECEIVER_BD_ID,
       RECEIVER_BD_RELEASE_DATE,
       RECEIVER_BD_RELEASE_NAME,
       PROD_CRITERIA_GROUP_ID,
       LOC_CRITERIA_GROUP_ID,
       YEARSEASON_CRITERIA_GROUP_ID)
    VALUES
      (0,
       C_DUMMY,
       0,
       TO_DATE('19000101','YYYYMMDD'),
       C_DUMMY,
       0,
       0,
       0);


    INSERT INTO DIM_RECEIVER_ALLOCATE
      (RECEIVER_ALLOCATE_ID,
       SOURCE_BUSKEY,
       RECEIVER_BD_RELEASE_ID,
       RECEIVER_ALLOCATE_DATE,
       RECEIVER_ALLOCATE_NAME,
       PROD_CRITERIA_GROUP_ID,
       LOC_CRITERIA_GROUP_ID,
       YEARSEASON_CRITERIA_GROUP_ID)
    VALUES
      (0,
       C_DUMMY,
       0,
       TO_DATE('19000101','YYYYMMDD'),
       C_DUMMY,
       0,
       0,
       0);

    INSERT INTO DIM_RECEIVER_RELEASE
      (RECEIVER_RELEASE_ID,
       SOURCE_BUSKEY,
       RECEIVER_ALLOCATE_ID,
       RECEIVER_RELEASE_DATE,
       RECEIVER_RELEASE_NAME,
       PROD_CRITERIA_GROUP_ID,
       LOC_CRITERIA_GROUP_ID,
       YEARSEASON_CRITERIA_GROUP_ID)
    VALUES
      (0,
       C_DUMMY,
       0,
       TO_DATE('19000101','YYYYMMDD'),
       C_DUMMY,
       0,
       0,
       0);

      COMMIT;

  END POP_DIM_ALLOCATE;

  PROCEDURE POP_DIM_CORE_SIZE IS
    BEGIN

      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_CORE_SIZE';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_CORE_SIZE');

      INSERT INTO DIM_CORE_SIZE
        (CORE_SIZE_ID,
         SOURCE_BUSKEY,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID,
         BASE_UNITS_BK)
      VALUES
        (0,
         C_DUMMY,
         0,
         0,
         0,
         0);

      COMMIT;

  END POP_DIM_CORE_SIZE;

  PROCEDURE POP_DIM_MIN_MAX IS
    BEGIN

      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_MIN_MAX';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_MIN_MAX');

      INSERT INTO DIM_MIN_MAX
        (MIN_MAX_ID,
         SOURCE_BUSKEY,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID,
         BASE_UNITS_BK)
      VALUES
        (0,
         C_DUMMY,
         0,
         0,
         0,
         0);

      COMMIT;

  END POP_DIM_MIN_MAX;


  PROCEDURE POP_DIM_PROMOTION_SCOPE IS
    BEGIN

      DISABLE_ALL_CONS;

      EXECUTE IMMEDIATE 'TRUNCATE TABLE DIM_PROMOTION_SCOPE';

      RELY_ALL_CONS;

      RESET_SEQUENCE('SEQ_PROMOTION_SCOPE');

      INSERT INTO DIM_PROMOTION_SCOPE
        (PROMOTION_SCOPE_ID,
         SOURCE_BUSKEY,
         PROD_CRITERIA_GROUP_ID,
         LOC_CRITERIA_GROUP_ID,
         YEARSEASON_CRITERIA_GROUP_ID,
         SETTING_VALUE_BK)
      VALUES
        (0,
         'DUMMY',
         0,
         0,
         0,
         0);
      COMMIT;

  END POP_DIM_PROMOTION_SCOPE;


  PROCEDURE POP_DIM_CRITERIA_GROUP_REL(P_CRITERIA_GROUP_ID DIM_CRITERIA_GROUP.CRITERIA_GROUP_ID%TYPE)
    IS
    L_SQL VARCHAR2(32767);
    L_DIMENSION DIM_CRITERIA_GROUP.DIMENSION%TYPE;
    L_SOURCE_SQL VARCHAR2(32767);
  BEGIN
        SELECT 'SELECT ' || CG.CRITERIA_GROUP_ID ||
                          ' CRITERIA_GROUP_ID,O.' || MDHL.DB_KEY_COL_NAME ||
                          CHR(10) || 'FROM ' || MDH.DB_TAB_NAME || ' O' ||
                          CHR(10) || 'WHERE  1=1 ' || CHR(10) ||
                          CI.TOTAL_CRITERIA_STR,CG.DIMENSION INTO L_SOURCE_SQL, L_DIMENSION
         FROM DIM_CRITERIA_GROUP CG
        INNER JOIN (SELECT CRITERIA_GROUP_ID,
                          LISTAGG('AND ' || O.CRITERIA_STR, CHR(10)) WITHIN GROUP(ORDER BY O.CRITERIA_STR) TOTAL_CRITERIA_STR
                     FROM (SELECT CRITERIA_GROUP_ID,
                                  'UPPER(O.' || NAME || ') IN (' ||
                                  LISTAGG('''' || VALUE || '''', ',') WITHIN GROUP(ORDER BY SEQ) || ')' CRITERIA_STR
                             FROM DIM_CRITERIA_ITEM
                            GROUP BY CRITERIA_GROUP_ID, NAME) O
                    GROUP BY CRITERIA_GROUP_ID) CI
           ON CG.CRITERIA_GROUP_ID = CI.CRITERIA_GROUP_ID
        INNER JOIN META_DIM_HIERARCHIES MDH
           ON CG.DIMENSION = MDH.DIM_NAME
          AND CG.HIERARCHY = MDH.HIERARCHY_NAME
        INNER JOIN META_DIM_HIER_LEVELS MDHL
           ON MDH.DIM_NAME = MDHL.DIM_NAME
          AND MDH.HIERARCHY_NAME = MDHL.HIERARCHY_NAME
          AND MDHL.BOTTOM = 'Y'
        WHERE CG.CRITERIA_GROUP_ID=P_CRITERIA_GROUP_ID;

        CASE L_DIMENSION
          WHEN C_STORE_DIM THEN
            L_SQL :='MERGE INTO DIM_CRITERIA_GROUP_LOC_REL T'||CHR(10)||
                    'USING ('||L_SOURCE_SQL||') S'||CHR(10)||
                    'ON (T.STORE_ID=S.STORE_ID AND T.CRITERIA_GROUP_ID=S.CRITERIA_GROUP_ID)'||CHR(10)||
                    'WHEN NOT MATCHED THEN INSERT(STORE_ID,CRITERIA_GROUP_ID)'||CHR(10)||
                    'VALUES(S.STORE_ID,S.CRITERIA_GROUP_ID)';
          WHEN C_STYLE_DIM THEN
            L_SQL :='MERGE INTO DIM_CRITERIA_GROUP_PROD_REL T'||CHR(10)||
                    'USING ('||L_SOURCE_SQL||') S'||CHR(10)||
                    'ON (T.STYLE_COLOR_SIZE_ID=S.STYLE_COLOR_SIZE_ID AND T.CRITERIA_GROUP_ID=S.CRITERIA_GROUP_ID)'||CHR(10)||
                    'WHEN NOT MATCHED THEN INSERT(STYLE_COLOR_SIZE_ID,CRITERIA_GROUP_ID)'||CHR(10)||
                    'VALUES(S.STYLE_COLOR_SIZE_ID,S.CRITERIA_GROUP_ID)';
          WHEN C_YEARSEASON_DIM THEN
            L_SQL :='MERGE INTO DIM_CRITERIA_GROUP_YS_REL T'||CHR(10)||
                    'USING ('||L_SOURCE_SQL||') S'||CHR(10)||
                    'ON (T.STYLE_YEAR_SEASON_ID=S.STYLE_YEAR_SEASON_ID AND T.CRITERIA_GROUP_ID=S.CRITERIA_GROUP_ID)'||CHR(10)||
                    'WHEN NOT MATCHED THEN INSERT(STYLE_COLOR_SIZE_ID,CRITERIA_GROUP_ID)'||CHR(10)||
                    'VALUES(S.STYLE_YEAR_SEASON_ID,S.CRITERIA_GROUP_ID)';
        END CASE;

        DBMS_OUTPUT.PUT_LINE(L_SQL||CHR(10));

        EXECUTE IMMEDIATE L_SQL;

        COMMIT;

  END POP_DIM_CRITERIA_GROUP_REL;

  PROCEDURE GATHER_TAB_STATS(P_TABLE_NAME USER_TABLES.TABLE_NAME%TYPE)
    IS
    L_OWNER VARCHAR2(30):=SYS_CONTEXT('USERENV','CURRENT_SCHEMA');
    BEGIN
      DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => L_OWNER,TABNAME => P_TABLE_NAME);
    END GATHER_TAB_STATS;

  --Please populate style,year_season, loc and loc_attr in advance.
  PROCEDURE POP_FACT_STYLE_BUYER_DETAIL(P_IS_INITIAL BOOLEAN DEFAULT TRUE) IS
  BEGIN
    IF P_IS_INITIAL THEN
      EXECUTE IMMEDIATE 'TRUNCATE TABLE FACT_STYLE_BUYER_DETAIL';
    END IF;

    MERGE INTO FACT_STYLE_BUYER_DETAIL T
    USING (SELECT SC.STYLE_COLOR_ID,
                  NVL(YS.YEAR_SEASON_ID, 0) YEAR_SEASON_ID,
                  NVL(LAV.LOC_ATTR_VALUE_ID, 0) LOC_ATTR_VALUE_ID,
                  NVL(SCBS.UNIT_PRICE, 0) UNIT_PRICE,
                  NVL(SCBS.SUGGESTED_RETAIL_PRICE, 0) SUGGESTED_RETAIL_PRICE,
                  NVL(SCBS.OWNED_RETAIL, 0) OWNED_RETAIL,
                  NVL(SCBS.OWNED_COST, 0) OWNED_COST,
                  0 POS_OWNED_RETAIL,
                  NVL(SCBS.POS_OWNED_COST, 0) POS_OWNED_COST,
                  TO_DATE('19000101', 'YYYYMMDD') SITE_ACTIVATION_DATE,
                  TO_DATE('99991231', 'YYYYMMDD') SITE_DEACTIVATION_DATE,
                  NVL(SCBS.MINIMUM_1, 0) MINIMUM_1,
                  NVL(SCBS.MINIMUM_2, 0) MINIMUM_2
             FROM STYLE_COLOR_BUYER_SEASON@MYLINKAPP SCBS
            INNER JOIN DIM_STYLE_COLOR SC
               ON SCBS.STYLE_COLOR_ID = SC.ORI_STYLE_COLOR_ID
             LEFT JOIN DIM_YEAR_SEASON YS
               ON YS.STYLE_YEAR = SCBS.YEAR
              AND YS.ORI_SEASON_ID = SCBS.SEASON_ID
             LEFT JOIN DIM_LOC_ATTR_VALUE LAV
               ON NVL(SCBS.ATTR_VALUE1, C_DUMMY) = LAV.LOC_ATTR_VALUE1
              AND NVL(SCBS.ATTR_VALUE2, C_DUMMY) = LAV.LOC_ATTR_VALUE2
              AND NVL(SCBS.ATTR_VALUE3, C_DUMMY) = LAV.LOC_ATTR_VALUE3
              AND NVL(SCBS.ATTR_VALUE4, C_DUMMY) = LAV.LOC_ATTR_VALUE4
              AND NVL(SCBS.ATTR_VALUE5, C_DUMMY) = LAV.LOC_ATTR_VALUE5) S
    ON (T.STYLE_COLOR_ID = S.STYLE_COLOR_ID AND T.YEAR_SEASON_ID = S.YEAR_SEASON_ID AND T.LOC_ATTR_VALUE_ID = S.LOC_ATTR_VALUE_ID)
    WHEN MATCHED THEN
      UPDATE
         SET T.UNIT_PRICE             = S.UNIT_PRICE,
             T.SUGGESTED_RETAIL_PRICE = S.SUGGESTED_RETAIL_PRICE,
             T.POS_OWNED_RETAIL       = S.POS_OWNED_RETAIL,
             T.POS_OWNED_COST         = S.POS_OWNED_COST,
             T.OWNED_RETAIL           = S.OWNED_RETAIL,
             T.OWNED_COST             = S.OWNED_COST,
             T.SITE_ACTIVATION_DATE   = S.SITE_ACTIVATION_DATE,
             T.SITE_DEACTIVATION_DATE = S.SITE_DEACTIVATION_DATE,
             T.MINIMUM_1              = S.MINIMUM_1,
             T.MINIMUM_2              = S.MINIMUM_2
    WHEN NOT MATCHED THEN
      INSERT
        (STYLE_COLOR_ID,
         YEAR_SEASON_ID,
         LOC_ATTR_VALUE_ID,
         UNIT_PRICE,
         SUGGESTED_RETAIL_PRICE,
         POS_OWNED_RETAIL,
         POS_OWNED_COST,
         OWNED_RETAIL,
         OWNED_COST,
         SITE_ACTIVATION_DATE,
         SITE_DEACTIVATION_DATE,
         MINIMUM_1,
         MINIMUM_2)
      VALUES
        (S.STYLE_COLOR_ID,
         S.YEAR_SEASON_ID,
         S.LOC_ATTR_VALUE_ID,
         S.UNIT_PRICE,
         S.SUGGESTED_RETAIL_PRICE,
         S.POS_OWNED_RETAIL,
         S.POS_OWNED_COST,
         S.OWNED_RETAIL,
         S.OWNED_COST,
         S.SITE_ACTIVATION_DATE,
         S.SITE_DEACTIVATION_DATE,
         S.MINIMUM_1,
         S.MINIMUM_2);

    MERGE INTO FACT_STYLE_BUYER_DETAIL T
    USING (SELECT SC.STYLE_COLOR_ID,
                  NVL(YS.YEAR_SEASON_ID, 0) YEAR_SEASON_ID,
                  NVL(LAV.LOC_ATTR_VALUE_ID, 0) LOC_ATTR_VALUE_ID,
                  0 UNIT_PRICE,
                  0 SUGGESTED_RETAIL_PRICE,
                  NVL(SCBS.OWNED_RETAIL, 0) OWNED_RETAIL,
                  0 OWNED_COST,
                  NVL(SCBS.POS_OWNED_RETAIL, 0) POS_OWNED_RETAIL,
                  0 POS_OWNED_COST,
                  NVL(SCBS.SITE_ACTIVATION_DATE,
                      TO_DATE('19000101', 'YYYYMMDD')) SITE_ACTIVATION_DATE,
                  NVL(SCBS.SITE_DEACTIVATION_DATE,
                      TO_DATE('99991231', 'YYYYMMDD')) SITE_DEACTIVATION_DATE,
                  0 MINIMUM_1,
                  0 MINIMUM_2
             FROM STYLE_COLOR_BUYER_ATTR_CHILD@MYLINKAPP SCBS
            INNER JOIN DIM_STYLE_COLOR SC
               ON SCBS.STYLE_COLOR_ID = SC.ORI_STYLE_COLOR_ID
             LEFT JOIN DIM_YEAR_SEASON YS
               ON YS.STYLE_YEAR = SCBS.YEAR
              AND YS.ORI_SEASON_ID = SCBS.SEASON_ID
             LEFT JOIN DIM_LOC_ATTR_VALUE LAV
               ON NVL(SCBS.ATTR_VALUE1, C_DUMMY) = LAV.LOC_ATTR_VALUE1
              AND NVL(SCBS.ATTR_VALUE2, C_DUMMY) = LAV.LOC_ATTR_VALUE2
              AND NVL(SCBS.ATTR_VALUE3, C_DUMMY) = LAV.LOC_ATTR_VALUE3
              AND NVL(SCBS.ATTR_VALUE4, C_DUMMY) = LAV.LOC_ATTR_VALUE4
              AND NVL(SCBS.ATTR_VALUE5, C_DUMMY) = LAV.LOC_ATTR_VALUE5) S
    ON (T.STYLE_COLOR_ID = S.STYLE_COLOR_ID AND T.YEAR_SEASON_ID = S.YEAR_SEASON_ID AND T.LOC_ATTR_VALUE_ID = S.LOC_ATTR_VALUE_ID)
    WHEN MATCHED THEN
      UPDATE
         SET T.UNIT_PRICE             = S.UNIT_PRICE,
             T.SUGGESTED_RETAIL_PRICE = S.SUGGESTED_RETAIL_PRICE,
             T.POS_OWNED_RETAIL       = S.POS_OWNED_RETAIL,
             T.POS_OWNED_COST         = S.POS_OWNED_COST,
             T.OWNED_RETAIL           = S.OWNED_RETAIL,
             T.OWNED_COST             = S.OWNED_COST,
             T.SITE_ACTIVATION_DATE   = S.SITE_ACTIVATION_DATE,
             T.SITE_DEACTIVATION_DATE = S.SITE_DEACTIVATION_DATE,
             T.MINIMUM_1              = S.MINIMUM_1,
             T.MINIMUM_2              = S.MINIMUM_2
    WHEN NOT MATCHED THEN
      INSERT
        (STYLE_COLOR_ID,
         YEAR_SEASON_ID,
         LOC_ATTR_VALUE_ID,
         UNIT_PRICE,
         SUGGESTED_RETAIL_PRICE,
         POS_OWNED_RETAIL,
         POS_OWNED_COST,
         OWNED_RETAIL,
         OWNED_COST,
         SITE_ACTIVATION_DATE,
         SITE_DEACTIVATION_DATE,
         MINIMUM_1,
         MINIMUM_2)
      VALUES
        (S.STYLE_COLOR_ID,
         S.YEAR_SEASON_ID,
         S.LOC_ATTR_VALUE_ID,
         S.UNIT_PRICE,
         S.SUGGESTED_RETAIL_PRICE,
         S.POS_OWNED_RETAIL,
         S.POS_OWNED_COST,
         S.OWNED_RETAIL,
         S.OWNED_COST,
         S.SITE_ACTIVATION_DATE,
         S.SITE_DEACTIVATION_DATE,
         S.MINIMUM_1,
         S.MINIMUM_2);

    COMMIT;
  END POP_FACT_STYLE_BUYER_DETAIL;

END DIM_POPULATE_PACK;
/
