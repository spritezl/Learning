CREATE OR REPLACE PACKAGE POS_AGGREGATE_PACK IS

  -- Author  : FZHANG
  -- Created : 11/7/2016 3:33:43 PM
  -- Purpose : POS AGGREGATION PACK

  /**
  PARM:
  P_MODE            'COMPLETE' OR 'INCREMENTAL'.
  P_PROD_ATTR_ID    JUST POPULATE THIS PROD_ATTR_ID DATA.

  PURPOSE:
  THIS PACKAGE IS TO POPULATE TABLE FACT_POS_SALES/FACT_POS_INVENTORY BY DIFFERENT LEVEL.
    1.FACT_POS_SALES_STYLECOLOR/FACT_POS_SALES_STYLECOLOR_WEEK    STYLE COLOR SIZE,STYLE YEAR SEASON,STOCK_CATEGORE,MONTH/WEEK LEVEL
    2.FACT_POS_INV_STYLECOLOR/FACT_POS_INV_STYLECOLOR_WEEK        STYLE COLOR SIZE,STYLE YEAR SEASON,STOCK_CATEGORE,MONTH/WEEK LEVEL
    3.FACT_POS_SALES_ITEM/FACT_POS_SALES_ITEM_WEEK                PRODUCT ATTRIBUTE,YEAR SEASON,STORE,MONTH/WEEK LEVEL
    4.FACT_POS_INV_ITEM/FACT_POS_INV_ITEM_WEEK                    PRODUCT ATTRIBUTE,YEAR SEASON,STORE,MONTH/WEEK LEVEL
  **/


  -- POS SALES
  PROCEDURE AGG_POS_SALES(P_MODE VARCHAR2, P_PROD_ATTR_ID  IN DIM_PROD_ATTR.PROD_ATTR_ID%TYPE);

  -- POS INVENTORY
  PROCEDURE AGG_POS_INVENTORY(P_MODE VARCHAR2, P_PROD_ATTR_ID  IN DIM_PROD_ATTR.PROD_ATTR_ID%TYPE);

END POS_AGGREGATE_PACK;
/
CREATE OR REPLACE PACKAGE BODY POS_AGGREGATE_PACK IS

  TYPE NNT_AGG_TABLES IS TABLE OF VARCHAR2(30);
  G_POSSALES_AGG_TABLES NNT_AGG_TABLES;
  G_POSINV_AGG_TABLES   NNT_AGG_TABLES;
  G_OWNER               VARCHAR2(30):=SYS_CONTEXT('USERENV','CURRENT_SCHEMA');

  C_POS_SALES_AGG_SQL   CONSTANT VARCHAR2(32767) := '
      INSERT /*+PARALLEL*/
        ALL WHEN TIME_GROUPING_ID = 1 AND STYLE_ATTR_GROUPING_ID = 7 AND STORE_ATTR_GROUPING_ID = 0 THEN INTO FACT_POS_SALES_ITEM
          (SMONTH_ID,
           STORE_ID,
           PROD_ATTR_VALUE_ID,
           YEAR_SEASON_ID,
           SALES_STYLE_ID,
           SALES_UNIT,
           SALES_RETAIL,
           SALES_COST,
           PROMO_RETAIL,
           PROMO_PERCENT,
           PROFIT_DOLLAR,
           OWNED_COST,
           MSRP,
           OWNED_RETAIL,
           DEMAND_SALES_UNIT,
           DEMAND_SALES_COST,
           DEMAND_SALES_RETAIL,
           RETURN_UNIT,
           RETURN_COST,
           RETURN_RETAIL,
           BACK_ORDER_UNIT,
           BACK_ORDER_COST,
           BACK_ORDER_RETAIL)
        VALUES
          (SMONTH_ID,
           STORE_ID,
           PROD_ATTR_VALUE_ID,
           YEAR_SEASON_ID,
           SALES_STYLE_ID,
           SALES_UNIT,
           SALES_RETAIL,
           SALES_COST,
           PROMO_RETAIL,
           PROMO_PERCENT,
           PROFIT_DOLLAR,
           OWNED_COST,
           MSRP,
           OWNED_RETAIL,
           DEMAND_SALES_UNIT,
           DEMAND_SALES_COST,
           DEMAND_SALES_RETAIL,
           RETURN_UNIT,
           RETURN_COST,
           RETURN_RETAIL,
           BACK_ORDER_UNIT,
           BACK_ORDER_COST,
           BACK_ORDER_RETAIL) WHEN TIME_GROUPING_ID = 2 AND STYLE_ATTR_GROUPING_ID = 7 AND STORE_ATTR_GROUPING_ID = 0 THEN INTO FACT_POS_SALES_ITEM_WEEK
          (SWEEK_PART_ID,
           STORE_ID,
           PROD_ATTR_VALUE_ID,
           YEAR_SEASON_ID,
           SALES_STYLE_ID,
           SALES_UNIT,
           SALES_RETAIL,
           SALES_COST,
           PROMO_RETAIL,
           PROMO_PERCENT,
           PROFIT_DOLLAR,
           OWNED_COST,
           MSRP,
           OWNED_RETAIL,
           DEMAND_SALES_UNIT,
           DEMAND_SALES_COST,
           DEMAND_SALES_RETAIL,
           RETURN_UNIT,
           RETURN_COST,
           RETURN_RETAIL,
           BACK_ORDER_UNIT,
           BACK_ORDER_COST,
           BACK_ORDER_RETAIL)
        VALUES
          (SWEEK_PART_ID,
           STORE_ID,
           PROD_ATTR_VALUE_ID,
           YEAR_SEASON_ID,
           SALES_STYLE_ID,
           SALES_UNIT,
           SALES_RETAIL,
           SALES_COST,
           PROMO_RETAIL,
           PROMO_PERCENT,
           PROFIT_DOLLAR,
           OWNED_COST,
           MSRP,
           OWNED_RETAIL,
           DEMAND_SALES_UNIT,
           DEMAND_SALES_COST,
           DEMAND_SALES_RETAIL,
           RETURN_UNIT,
           RETURN_COST,
           RETURN_RETAIL,
           BACK_ORDER_UNIT,
           BACK_ORDER_COST,
           BACK_ORDER_RETAIL) WHEN TIME_GROUPING_ID = 1 AND STYLE_ATTR_GROUPING_ID = 0 AND STORE_ATTR_GROUPING_ID = 7 THEN INTO FACT_POS_SALES_STYLECOLOR
          (SMONTH_ID,
           STORE_LOC_ID,
           STYLE_COLOR_SIZE_ID,
           STYLE_YEAR_SEASON_ID,
           SALES_STYLE_ID,
           SALES_UNIT,
           SALES_RETAIL,
           SALES_COST,
           PROMO_RETAIL,
           PROMO_PERCENT,
           PROFIT_DOLLAR,
           OWNED_COST,
           MSRP,
           OWNED_RETAIL,
           DEMAND_SALES_UNIT,
           DEMAND_SALES_COST,
           DEMAND_SALES_RETAIL,
           RETURN_UNIT,
           RETURN_COST,
           RETURN_RETAIL,
           BACK_ORDER_UNIT,
           BACK_ORDER_COST,
           BACK_ORDER_RETAIL,
           NO_OF_DOOR,
           FULL_UNIT,
           PROMO_UNIT,
           CLEAR_UNIT)
        VALUES
          (SMONTH_ID,
           STORE_LOC_ID,
           STYLE_COLOR_SIZE_ID,
           STYLE_YEAR_SEASON_ID,
           SALES_STYLE_ID,
           SALES_UNIT,
           SALES_RETAIL,
           SALES_COST,
           PROMO_RETAIL,
           PROMO_PERCENT,
           PROFIT_DOLLAR,
           OWNED_COST,
           MSRP,
           OWNED_RETAIL,
           DEMAND_SALES_UNIT,
           DEMAND_SALES_COST,
           DEMAND_SALES_RETAIL,
           RETURN_UNIT,
           RETURN_COST,
           RETURN_RETAIL,
           BACK_ORDER_UNIT,
           BACK_ORDER_COST,
           BACK_ORDER_RETAIL,
           NO_OF_DOOR,
           FULL_UNIT,
           PROMO_UNIT,
           CLEAR_UNIT) WHEN TIME_GROUPING_ID = 2 AND STYLE_ATTR_GROUPING_ID = 0 AND STORE_ATTR_GROUPING_ID = 7 THEN INTO FACT_POS_SALES_STYLECOLOR_WEEK
          (SWEEK_PART_ID,
           STORE_LOC_ID,
           STYLE_COLOR_SIZE_ID,
           STYLE_YEAR_SEASON_ID,
           SALES_STYLE_ID,
           SALES_UNIT,
           SALES_RETAIL,
           SALES_COST,
           PROMO_RETAIL,
           PROMO_PERCENT,
           PROFIT_DOLLAR,
           OWNED_COST,
           MSRP,
           OWNED_RETAIL,
           DEMAND_SALES_UNIT,
           DEMAND_SALES_COST,
           DEMAND_SALES_RETAIL,
           RETURN_UNIT,
           RETURN_COST,
           RETURN_RETAIL,
           BACK_ORDER_UNIT,
           BACK_ORDER_COST,
           BACK_ORDER_RETAIL,
           NO_OF_DOOR,
           FULL_UNIT,
           PROMO_UNIT,
           CLEAR_UNIT)
        VALUES
          (SWEEK_PART_ID,
           STORE_LOC_ID,
           STYLE_COLOR_SIZE_ID,
           STYLE_YEAR_SEASON_ID,
           SALES_STYLE_ID,
           SALES_UNIT,
           SALES_RETAIL,
           SALES_COST,
           PROMO_RETAIL,
           PROMO_PERCENT,
           PROFIT_DOLLAR,
           OWNED_COST,
           MSRP,
           OWNED_RETAIL,
           DEMAND_SALES_UNIT,
           DEMAND_SALES_COST,
           DEMAND_SALES_RETAIL,
           RETURN_UNIT,
           RETURN_COST,
           RETURN_RETAIL,
           BACK_ORDER_UNIT,
           BACK_ORDER_COST,
           BACK_ORDER_RETAIL,
           NO_OF_DOOR,
           FULL_UNIT,
           PROMO_UNIT,
           CLEAR_UNIT)
          SELECT /*+PARALLEL(F)*/
           GROUPING_ID(PAVR.PROD_ATTR_VALUE_ID, DSYS.YEAR_SEASON_ID, F.STORE_ID) STORE_ATTR_GROUPING_ID,
           GROUPING_ID(DSLR.PARENT_STORE_LOC_ID, F.STYLE_COLOR_SIZE_ID, F.STYLE_YEAR_SEASON_ID) STYLE_ATTR_GROUPING_ID,
           GROUPING_ID(SP.SMONTH_ID, SP.SWEEK_PART_ID) TIME_GROUPING_ID,
           SP.SMONTH_ID SMONTH_ID,
           SP.SWEEK_PART_ID SWEEK_PART_ID,
           F.STORE_ID,
           PAVR.PROD_ATTR_VALUE_ID,
           DSYS.YEAR_SEASON_ID,
           DSLR.PARENT_STORE_LOC_ID STORE_LOC_ID,
           F.STYLE_COLOR_SIZE_ID,
           F.STYLE_YEAR_SEASON_ID,
           F.SALES_STYLE_ID,
           SUM(F.SALES_UNIT) SALES_UNIT,
           SUM(F.SALES_RETAIL) SALES_RETAIL,
           SUM(F.SALES_COST) SALES_COST,
           SUM(F.PROMO_RETAIL) PROMO_RETAIL,
           (CASE
             WHEN (SUM(F.PROMO_RETAIL) + SUM(F.SALES_RETAIL)) = 0 THEN
              0
             ELSE
              SUM(F.PROMO_RETAIL) / (SUM(F.PROMO_RETAIL) + SUM(F.SALES_RETAIL))
           END) PROMO_PERCENT,
           SUM(F.PROFIT_DOLLAR) PROFIT_DOLLAR,
           (CASE
             WHEN SUM(F.SALES_UNIT) = 0 THEN
              0
             ELSE
              (SUM(F.OWNED_COST * F.SALES_UNIT) + 0.0) / SUM(F.SALES_UNIT)
           END) OWNED_COST,
           (CASE
             WHEN SUM(F.SALES_UNIT) = 0 THEN
              0
             ELSE
              (SUM(F.MSRP * F.SALES_UNIT) + 0.0) / SUM(F.SALES_UNIT)
           END) MSRP,
           (CASE
             WHEN SUM(F.SALES_UNIT) = 0 THEN
              0
             ELSE
              (SUM(F.OWNED_RETAIL * SALES_UNIT) + 0.0) / SUM(F.SALES_UNIT)
           END) OWNED_RETAIL,
           SUM(F.DEMAND_SALES_UNIT) DEMAND_SALES_UNIT,
           SUM(F.DEMAND_SALES_COST) DEMAND_SALES_COST,
           SUM(F.DEMAND_SALES_RETAIL) DEMAND_SALES_RETAIL,
           SUM(F.RETURN_UNIT) RETURN_UNIT,
           SUM(F.RETURN_COST) RETURN_COST,
           SUM(F.RETURN_RETAIL) RETURN_RETAIL,
           SUM(F.BACK_ORDER_UNIT) BACK_ORDER_UNIT,
           SUM(F.BACK_ORDER_COST) BACK_ORDER_COST,
           SUM(F.BACK_ORDER_RETAIL) BACK_ORDER_RETAIL,
           COUNT(DISTINCT F.STORE_ID) NO_OF_DOOR,
           SUM(CASE
                WHEN F.SALES_UNIT = 0 THEN
                  0
                WHEN (F.SALES_RETAIL / F.SALES_UNIT) >= F.OWNED_RETAIL * 0.8 THEN
                  F.SALES_UNIT
                ELSE
                  0
               END) FULL_UNIT,
           SUM(CASE
               WHEN F.SALES_UNIT = 0 THEN
                 0
               WHEN ((F.SALES_RETAIL / F.SALES_UNIT) < F.OWNED_RETAIL * 0.8) AND
                    ((F.SALES_RETAIL / F.SALES_UNIT) >= F.OWNED_RETAIL * 0.6) THEN
                 F.SALES_UNIT
               ELSE
                 0
               END) PROMO_UNIT,
           SUM(CASE
                WHEN F.SALES_UNIT = 0 THEN
                  0
                WHEN (F.SALES_RETAIL / F.SALES_UNIT) < F.OWNED_RETAIL * 0.6 THEN
                  F.SALES_UNIT
                ELSE
                  0
               END) CLEAR_UNIT
            FROM FACT_POS_SALES F
           INNER JOIN DIM_DATE_DAY D
              ON F.DATE_ID = D.DATE_ID
           INNER JOIN DIM_DATE_SWEEK_PART SP
              ON D.SWEEK_PART_ID=SP.SWEEK_PART_ID
           INNER JOIN DIM_PROD_ATTR_VAL_REL PAVR
              ON F.STYLE_COLOR_SIZE_ID = PAVR.STYLE_COLOR_SIZE_ID
           INNER JOIN DIM_PROD_ATTR_VALUE DPAV
              ON PAVR.PROD_ATTR_VALUE_ID = DPAV.PROD_ATTR_VALUE_ID
             AND DPAV.PROD_ATTR_ID = :1
           INNER JOIN DIM_STORE_STORE DS
              ON F.STORE_ID = DS.STORE_ID
           INNER JOIN DIM_STORE_LOC DSL
              ON DS.STORE_LOC_ID = DSL.STORE_LOC_ID
           INNER JOIN DIM_STORE_LOC_REL DSLR
              ON DSL.STORE_LOC_ID = DSLR.SUBSIDIARY_STORE_LOC_ID
             AND DSLR.SUBSIDIARY_LEVEL_NAME = ''STORE''
             AND DSLR.LEVEL_FROM_PARENT = 1
           INNER JOIN DIM_STYLE_YEAR_SEASON DSYS
              ON F.STYLE_YEAR_SEASON_ID = DSYS.STYLE_YEAR_SEASON_ID
           {WHERECLAUSE}
           GROUP BY F.SALES_STYLE_ID,
                    GROUPING         SETS((PAVR.PROD_ATTR_VALUE_ID, DSYS.YEAR_SEASON_ID, F.STORE_ID),(DSLR.PARENT_STORE_LOC_ID, F.STYLE_COLOR_SIZE_ID, F.STYLE_YEAR_SEASON_ID)),
                    GROUPING         SETS(SP.SWEEK_PART_ID, SP.SMONTH_ID)

  ';

  C_POS_INV_AGG_SQL     CONSTANT VARCHAR2(32767) := '
      INSERT /*PARALLEL*/
        ALL WHEN TIME_GROUPING_ID = 1 AND STYLE_ATTR_GROUPING_ID = 7 AND STORE_ATTR_GROUPING_ID = 0 THEN INTO FACT_POS_INV_ITEM
          (SMONTH_ID,
           STORE_ID,
           PROD_ATTR_VALUE_ID,
           YEAR_SEASON_ID,
           BEGIN_INVENTORY_UNIT,
           BEGIN_INVENTORY_RETAIL,
           BEGIN_INVENTORY_COST,
           RECEIPT_UNIT,
           RECEIPT_RETAIL,
           RECEIPT_COST,
           END_INVENTORY_UNIT,
           END_INVENTORY_RETAIL,
           END_INVENTORY_COST,
           TRANSFER_IN_UNIT,
           TRANSFER_IN_RETAIL,
           TRANSFER_IN_COST,
           TRANSFER_OUT_UNIT,
           TRANSFER_OUT_RETAIL,
           TRANSFER_OUT_COST,
           ADJUSTMENT_UNIT,
           ADJUSTMENT_RETAIL,
           ADJUSTMENT_COST)
        VALUES
          (SMONTH_ID,
           STORE_ID,
           PROD_ATTR_VALUE_ID,
           YEAR_SEASON_ID,
           BOM_UNIT,
           BOM_RETAIL,
           BOM_COST,
           RECEIPT_UNIT,
           RECEIPT_RETAIL,
           RECEIPT_COST,
           EOM_UNIT,
           EOM_RETAIL,
           EOM_COST,
           TRANSFER_IN_UNIT,
           TRANSFER_IN_RETAIL,
           TRANSFER_IN_COST,
           TRANSFER_OUT_UNIT,
           TRANSFER_OUT_RETAIL,
           TRANSFER_OUT_COST,
           ADJUSTMENT_UNIT,
           ADJUSTMENT_RETAIL,
           ADJUSTMENT_COST) WHEN TIME_GROUPING_ID = 2 AND STYLE_ATTR_GROUPING_ID = 7 AND STORE_ATTR_GROUPING_ID = 0 THEN INTO FACT_POS_INV_ITEM_WEEK
          (SWEEK_PART_ID,
           STORE_ID,
           PROD_ATTR_VALUE_ID,
           YEAR_SEASON_ID,
           BEGIN_INVENTORY_UNIT,
           BEGIN_INVENTORY_RETAIL,
           BEGIN_INVENTORY_COST,
           RECEIPT_UNIT,
           RECEIPT_RETAIL,
           RECEIPT_COST,
           END_INVENTORY_UNIT,
           END_INVENTORY_RETAIL,
           END_INVENTORY_COST,
           TRANSFER_IN_UNIT,
           TRANSFER_IN_RETAIL,
           TRANSFER_IN_COST,
           TRANSFER_OUT_UNIT,
           TRANSFER_OUT_RETAIL,
           TRANSFER_OUT_COST,
           ADJUSTMENT_UNIT,
           ADJUSTMENT_RETAIL,
           ADJUSTMENT_COST)
        VALUES
          (SWEEK_PART_ID,
           STORE_ID,
           PROD_ATTR_VALUE_ID,
           YEAR_SEASON_ID,
           BOW_UNIT,
           BOW_RETAIL,
           BOW_COST,
           RECEIPT_UNIT,
           RECEIPT_RETAIL,
           RECEIPT_COST,
           EOW_UNIT,
           EOW_RETAIL,
           EOW_COST,
           TRANSFER_IN_UNIT,
           TRANSFER_IN_RETAIL,
           TRANSFER_IN_COST,
           TRANSFER_OUT_UNIT,
           TRANSFER_OUT_RETAIL,
           TRANSFER_OUT_COST,
           ADJUSTMENT_UNIT,
           ADJUSTMENT_RETAIL,
           ADJUSTMENT_COST) WHEN TIME_GROUPING_ID = 1 AND STYLE_ATTR_GROUPING_ID = 0 AND STORE_ATTR_GROUPING_ID = 7 THEN INTO FACT_POS_INV_STYLECOLOR
          (SMONTH_ID,
           STORE_LOC_ID,
           STYLE_COLOR_SIZE_ID,
           STYLE_YEAR_SEASON_ID,
           BEGIN_INVENTORY_UNIT,
           BEGIN_INVENTORY_RETAIL,
           BEGIN_INVENTORY_COST,
           RECEIPT_UNIT,
           RECEIPT_RETAIL,
           RECEIPT_COST,
           END_INVENTORY_UNIT,
           END_INVENTORY_RETAIL,
           END_INVENTORY_COST,
           TRANSFER_IN_UNIT,
           TRANSFER_IN_RETAIL,
           TRANSFER_IN_COST,
           TRANSFER_OUT_UNIT,
           TRANSFER_OUT_RETAIL,
           TRANSFER_OUT_COST,
           ADJUSTMENT_UNIT,
           ADJUSTMENT_RETAIL,
           ADJUSTMENT_COST)
        VALUES
          (SMONTH_ID,
           STORE_LOC_ID,
           STYLE_COLOR_SIZE_ID,
           STYLE_YEAR_SEASON_ID,
           BOM_UNIT,
           BOM_RETAIL,
           BOM_COST,
           RECEIPT_UNIT,
           RECEIPT_RETAIL,
           RECEIPT_COST,
           EOM_UNIT,
           EOM_RETAIL,
           EOM_COST,
           TRANSFER_IN_UNIT,
           TRANSFER_IN_RETAIL,
           TRANSFER_IN_COST,
           TRANSFER_OUT_UNIT,
           TRANSFER_OUT_RETAIL,
           TRANSFER_OUT_COST,
           ADJUSTMENT_UNIT,
           ADJUSTMENT_RETAIL,
           ADJUSTMENT_COST) WHEN TIME_GROUPING_ID = 2 AND STYLE_ATTR_GROUPING_ID = 0 AND STORE_ATTR_GROUPING_ID = 7 THEN INTO FACT_POS_INV_STYLECOLOR_WEEK
          (SWEEK_PART_ID,
           STORE_LOC_ID,
           STYLE_COLOR_SIZE_ID,
           STYLE_YEAR_SEASON_ID,
           BEGIN_INVENTORY_UNIT,
           BEGIN_INVENTORY_RETAIL,
           BEGIN_INVENTORY_COST,
           RECEIPT_UNIT,
           RECEIPT_RETAIL,
           RECEIPT_COST,
           END_INVENTORY_UNIT,
           END_INVENTORY_RETAIL,
           END_INVENTORY_COST,
           TRANSFER_IN_UNIT,
           TRANSFER_IN_RETAIL,
           TRANSFER_IN_COST,
           TRANSFER_OUT_UNIT,
           TRANSFER_OUT_RETAIL,
           TRANSFER_OUT_COST,
           ADJUSTMENT_UNIT,
           ADJUSTMENT_RETAIL,
           ADJUSTMENT_COST)
        VALUES
          (SWEEK_PART_ID,
           STORE_LOC_ID,
           STYLE_COLOR_SIZE_ID,
           STYLE_YEAR_SEASON_ID,
           BOW_UNIT,
           BOW_RETAIL,
           BOW_COST,
           RECEIPT_UNIT,
           RECEIPT_RETAIL,
           RECEIPT_COST,
           EOW_UNIT,
           EOW_RETAIL,
           EOW_COST,
           TRANSFER_IN_UNIT,
           TRANSFER_IN_RETAIL,
           TRANSFER_IN_COST,
           TRANSFER_OUT_UNIT,
           TRANSFER_OUT_RETAIL,
           TRANSFER_OUT_COST,
           ADJUSTMENT_UNIT,
           ADJUSTMENT_RETAIL,
           ADJUSTMENT_COST)
          SELECT /*+PARALLEL(F)*/
           GROUPING_ID(PAVR.PROD_ATTR_VALUE_ID, F.STORE_ID, DSYS.YEAR_SEASON_ID) STORE_ATTR_GROUPING_ID,
           GROUPING_ID(DSLR.PARENT_STORE_LOC_ID, F.STYLE_COLOR_SIZE_ID, F.STYLE_YEAR_SEASON_ID) STYLE_ATTR_GROUPING_ID,
           GROUPING_ID(SP.SMONTH_ID, SP.SWEEK_PART_ID) TIME_GROUPING_ID,
           SP.SMONTH_ID SMONTH_ID,
           SP.SWEEK_PART_ID SWEEK_PART_ID,
           F.STORE_ID,
           PAVR.PROD_ATTR_VALUE_ID,
           DSYS.YEAR_SEASON_ID,
           DSLR.PARENT_STORE_LOC_ID STORE_LOC_ID,
           F.STYLE_COLOR_SIZE_ID,
           F.STYLE_YEAR_SEASON_ID,
           -- BOM
           SUM(CASE
                 WHEN D.IS_FIRST_OF_SMONTH=''Y'' THEN
                  F.BEGIN_INVENTORY_UNIT
                 ELSE
                  0
               END) BOM_UNIT,
           SUM(CASE
                 WHEN D.IS_FIRST_OF_SMONTH=''Y'' THEN
                  F.BEGIN_INVENTORY_RETAIL
                 ELSE
                  0
               END) BOM_RETAIL,
           SUM(CASE
                 WHEN D.IS_FIRST_OF_SMONTH=''Y'' THEN
                  F.BEGIN_INVENTORY_COST
                 ELSE
                  0
               END) BOM_COST,
           -- BOW
           SUM(CASE
                 WHEN D.IS_FIRST_OF_SWEEK_PART=''Y'' THEN
                  F.BEGIN_INVENTORY_UNIT
                 ELSE
                  0
               END) BOW_UNIT,
           SUM(CASE
                 WHEN D.IS_FIRST_OF_SWEEK_PART=''Y'' THEN
                  F.BEGIN_INVENTORY_RETAIL
                 ELSE
                  0
               END) BOW_RETAIL,
           SUM(CASE
                 WHEN D.IS_FIRST_OF_SWEEK_PART=''Y'' THEN
                  F.BEGIN_INVENTORY_COST
                 ELSE
                  0
               END) BOW_COST,
           SUM(F.RECEIPT_UNIT) RECEIPT_UNIT,
           SUM(F.RECEIPT_RETAIL) RECEIPT_RETAIL,
           SUM(F.RECEIPT_COST) RECEIPT_COST,
           --EOM
           SUM(CASE
                 WHEN D.IS_LAST_OF_SMONTH=''Y'' THEN
                  F.END_INVENTORY_UNIT
                 ELSE
                  0
               END) EOM_UNIT,
           SUM(CASE
                 WHEN D.IS_LAST_OF_SMONTH=''Y'' THEN
                  F.END_INVENTORY_RETAIL
                 ELSE
                  0
               END) EOM_RETAIL,
           SUM(CASE
                 WHEN D.IS_LAST_OF_SMONTH=''Y'' THEN
                  F.END_INVENTORY_COST
                 ELSE
                  0
               END) EOM_COST,
           -- EOW
           SUM(CASE
                 WHEN D.IS_LAST_OF_SWEEK_PART=''Y'' THEN
                  F.END_INVENTORY_UNIT
                 ELSE
                  0
               END) EOW_UNIT,
           SUM(CASE
                 WHEN D.IS_LAST_OF_SWEEK_PART=''Y'' THEN
                  F.END_INVENTORY_RETAIL
                 ELSE
                  0
               END) EOW_RETAIL,
           SUM(CASE
                 WHEN D.IS_LAST_OF_SWEEK_PART=''Y'' THEN
                  F.END_INVENTORY_COST
                 ELSE
                  0
               END) EOW_COST,
           SUM(F.TRANSFER_IN_UNIT) TRANSFER_IN_UNIT,
           SUM(F.TRANSFER_IN_RETAIL) TRANSFER_IN_RETAIL,
           SUM(F.TRANSFER_IN_COST) TRANSFER_IN_COST,
           SUM(F.TRANSFER_OUT_UNIT) TRANSFER_OUT_UNIT,
           SUM(F.TRANSFER_OUT_RETAIL) TRANSFER_OUT_RETAIL,
           SUM(F.TRANSFER_OUT_COST) TRANSFER_OUT_COST,
           SUM(F.ADJUSTMENT_UNIT) ADJUSTMENT_UNIT,
           SUM(F.ADJUSTMENT_RETAIL) ADJUSTMENT_RETAIL,
           SUM(F.ADJUSTMENT_COST) ADJUSTMENT_COST
            FROM FACT_POS_INVENTORY F
           INNER JOIN DIM_DATE_DAY D
              ON F.DATE_ID = D.DATE_ID
           INNER JOIN DIM_DATE_SWEEK_PART SP
              ON D.SWEEK_PART_ID=SP.SWEEK_PART_ID
           INNER JOIN DIM_PROD_ATTR_VAL_REL PAVR
              ON F.STYLE_COLOR_SIZE_ID = PAVR.STYLE_COLOR_SIZE_ID
           INNER JOIN DIM_PROD_ATTR_VALUE DPAV
              ON PAVR.PROD_ATTR_VALUE_ID = DPAV.PROD_ATTR_VALUE_ID
             AND DPAV.PROD_ATTR_ID = :1
           INNER JOIN DIM_STORE_STORE DS
              ON F.STORE_ID = DS.STORE_ID
           INNER JOIN DIM_STORE_LOC DSL
              ON DS.STORE_LOC_ID = DSL.STORE_LOC_ID
           INNER JOIN DIM_STORE_LOC_REL DSLR
              ON DSL.STORE_LOC_ID = DSLR.SUBSIDIARY_STORE_LOC_ID
             AND DSLR.SUBSIDIARY_LEVEL_NAME = ''STORE''
             AND DSLR.LEVEL_FROM_PARENT = 1
           INNER JOIN DIM_STYLE_YEAR_SEASON DSYS
              ON F.STYLE_YEAR_SEASON_ID = DSYS.STYLE_YEAR_SEASON_ID
           {WHERECLAUSE}
           GROUP BY GROUPING SETS((PAVR.PROD_ATTR_VALUE_ID, F.STORE_ID, DSYS.YEAR_SEASON_ID),(DSLR.PARENT_STORE_LOC_ID, F.STYLE_COLOR_SIZE_ID, F.STYLE_YEAR_SEASON_ID)),
                    GROUPING SETS(SP.SWEEK_PART_ID, SP.SMONTH_ID)
        ';

  PROCEDURE DROP_PARTITION_FOR_UPLOAD(P_TABLE VARCHAR2,
                           P_UPLOAD_ID DIM_UPLOAD_TRACKING.UPLOAD_ID%TYPE) IS
     INVALID_PARTITIION_NUM EXCEPTION;
     PRAGMA EXCEPTION_INIT(INVALID_PARTITIION_NUM, -2149);
   BEGIN

      EXECUTE IMMEDIATE 'ALTER TABLE '||P_TABLE||' TRUNCATE PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')';
      EXECUTE IMMEDIATE 'ALTER TABLE '||P_TABLE||' DROP PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')';

      EXCEPTION
        WHEN INVALID_PARTITIION_NUM THEN
          BEGIN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
          END;

  END DROP_PARTITION_FOR_UPLOAD;

  -- POS SALES
  PROCEDURE AGG_POS_SALES(P_MODE VARCHAR2, P_PROD_ATTR_ID  IN DIM_PROD_ATTR.PROD_ATTR_ID%TYPE) IS
    TYPE NNT_INDEX_DDL IS TABLE OF VARCHAR2(32767);
    L_CACHE_INDEX_DDL NNT_INDEX_DDL := NNT_INDEX_DDL();

    L_CACHE_UPLOAD NNT_IDS:=NNT_IDS();
    L_CACHE_SMONTH NNT_IDS:=NNT_IDS();
    L_CACHE_SWEEK  NNT_IDS:=NNT_IDS();
    L_CACHE_DAY    NNT_IDS:=NNT_IDS();

    L_INDEXSQL VARCHAR2(32767);

  BEGIN
    IF UPPER(P_MODE) = 'COMPLETE' THEN
      DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,
                                        'SEGMENT_ATTRIBUTES',
                                        FALSE);
      DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,
                                        'STORAGE',
                                        FALSE);

      FOR I IN 1 .. G_POSSALES_AGG_TABLES.COUNT LOOP
        --1,TRUNCATE EACH AGGREGATION TABLE
        EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || G_POSSALES_AGG_TABLES(I);

        --2,DROP ALL LOCAL INDEXES AND PREPARE THE INDEX DDL
        FOR ITEM IN (SELECT INDEX_NAME
                       FROM USER_INDEXES
                      WHERE TABLE_NAME = G_POSSALES_AGG_TABLES(I)) LOOP

          L_CACHE_INDEX_DDL.EXTEND;

          L_INDEXSQL:=TO_CHAR(DBMS_METADATA.GET_DDL(OBJECT_TYPE => 'INDEX',NAME => ITEM.INDEX_NAME));
          L_INDEXSQL:=SUBSTR(L_INDEXSQL,1,INSTR(L_INDEXSQL,'(PARTITION "P0"')-1);

          L_CACHE_INDEX_DDL(L_CACHE_INDEX_DDL.COUNT) := L_INDEXSQL;
          EXECUTE IMMEDIATE 'DROP INDEX ' || ITEM.INDEX_NAME;
        END LOOP;

      END LOOP;

      --3,POPULATE ALL AGGREGATION TABLES IN A SHOT
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

      EXECUTE IMMEDIATE REPLACE(C_POS_SALES_AGG_SQL, '{WHERECLAUSE}', '')
                          USING P_PROD_ATTR_ID;

--      DELETE FROM DIM_UPLOAD_TRACKING P WHERE P.UPLOAD_TYPE='POS_SALES';

      COMMIT;
      EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

      --4,REBUILD ALL LOCAL INDEXES
      FOR I IN 1 .. L_CACHE_INDEX_DDL.COUNT LOOP
        EXECUTE IMMEDIATE L_CACHE_INDEX_DDL(I);
      END LOOP;

      --5,TRUNCATE ERROR LOG
      FOR ITEM IN (SELECT UPLOAD_ID FROM DIM_UPLOAD_TRACKING WHERE UPLOAD_TYPE='POS_SALES') LOOP
/*        EXECUTE IMMEDIATE 'ALTER TABLE FACT_ERROR_LOG TRUNCATE PARTITION FOR('||TO_CHAR(ITEM.UPLOAD_ID)||')';
          EXECUTE IMMEDIATE 'ALTER TABLE FACT_ERROR_LOG DROP PARTITION FOR('||TO_CHAR(ITEM.UPLOAD_ID)||')';*/
          DROP_PARTITION_FOR_UPLOAD('FACT_ERROR_LOG',ITEM.UPLOAD_ID);
      END LOOP;


      --6,DELETE ALL TRACKING
      DELETE FROM DIM_UPLOAD_TRACKING WHERE UPLOAD_TYPE = 'POS_SALES';
      COMMIT;

      --7,GATHER DB STATS
      FOR I IN 1 .. G_POSSALES_AGG_TABLES.COUNT LOOP
          DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => G_OWNER,TABNAME =>G_POSSALES_AGG_TABLES(I));
      END LOOP;

    ELSE
      --INCREMENTAL
      --1,GET ALL UPLOAD_ID,SMONTH_ID,SWEEK_ID TO BE HANDLED
      SELECT SET(CAST(COLLECT(S.UPLOAD_ID) AS NNT_IDS)),
             SET(CAST(COLLECT(SP.SMONTH_ID) AS NNT_IDS)),
             SET(CAST(COLLECT(SP.SWEEK_ID) AS NNT_IDS)),
             SET(CAST(COLLECT(D.DATE_ID) AS NNT_IDS))
        INTO L_CACHE_UPLOAD, L_CACHE_SMONTH, L_CACHE_SWEEK, L_CACHE_DAY
        FROM (SELECT P.UPLOAD_ID, C.COLUMN_VALUE DATE_ID
                FROM DIM_UPLOAD_TRACKING P, TABLE(P.AFFECTED_IDS) C
               WHERE P.UPLOAD_TYPE = 'POS_SALES') S
       INNER JOIN DIM_DATE_DAY D
       ON S.DATE_ID=D.DATE_ID
       INNER JOIN DIM_DATE_SWEEK_PART SP
       ON D.SWEEK_PART_ID=SP.SWEEK_PART_ID;

      -- IF UPLOAD POS DATA
      IF L_CACHE_UPLOAD.COUNT > 0
        THEN
        --2,TRUNCATE PARTITIONS AND SET LOCAL INDEXES UNUSABLE
        FOR I IN 1 .. L_CACHE_SMONTH.COUNT LOOP
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_ITEM TRUNCATE PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||')';
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_ITEM MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') UNUSABLE LOCAL INDEXES';

           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_STYLECOLOR TRUNCATE PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||')';
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_STYLECOLOR MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') UNUSABLE LOCAL INDEXES';
        END LOOP;

        FOR I IN 1 .. L_CACHE_SWEEK.COUNT LOOP
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_ITEM_WEEK TRUNCATE PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||')';
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_ITEM_WEEK MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') UNUSABLE LOCAL INDEXES';

           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_STYLECOLOR_WEEK TRUNCATE PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||')';
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_STYLECOLOR_WEEK MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') UNUSABLE LOCAL INDEXES';
        END LOOP;

        --3,POPULATE THE CORRESPONDING PARTITION
        EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

        IF L_CACHE_DAY.COUNT > 0
          THEN
            EXECUTE IMMEDIATE REPLACE(C_POS_SALES_AGG_SQL,
                                      '{WHERECLAUSE}',
                                      ' WHERE F.DATE_ID IN (SELECT COLUMN_VALUE FROM TABLE(L_CACHE_DAY))')
                                USING P_PROD_ATTR_ID;
        END IF;

--        FORALL I IN 1 .. L_CACHE_UPLOAD.COUNT
--        DELETE FROM DIM_UPLOAD_TRACKING WHERE UPLOAD_ID=L_CACHE_UPLOAD(I);

        COMMIT;
        EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

        --4,REBUILD ALL LOCAL INDEXES
        FOR I IN 1 .. L_CACHE_SMONTH.COUNT LOOP
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_ITEM MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') REBUILD UNUSABLE LOCAL INDEXES';

           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_STYLECOLOR MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') REBUILD UNUSABLE LOCAL INDEXES';
        END LOOP;

        FOR I IN 1 .. L_CACHE_SWEEK.COUNT LOOP
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_ITEM_WEEK MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') REBUILD UNUSABLE LOCAL INDEXES';

           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_STYLECOLOR_WEEK MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') REBUILD UNUSABLE LOCAL INDEXES';
        END LOOP;

        --5,TRUNCATE ERRLOG
        FOR I IN 1 .. L_CACHE_UPLOAD.COUNT LOOP
/*         EXECUTE IMMEDIATE 'ALTER TABLE FACT_ERROR_LOG TRUNCATE PARTITION FOR('||TO_CHAR(L_CACHE_UPLOAD(I))||')';
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_ERROR_LOG DROP PARTITION FOR('||TO_CHAR(L_CACHE_UPLOAD(I))||')';*/
           DROP_PARTITION_FOR_UPLOAD('FACT_ERROR_LOG',L_CACHE_UPLOAD(I));
        END LOOP;

        --6,DELETE ALL TRACKING
        FORALL I IN 1 .. L_CACHE_UPLOAD.COUNT
          DELETE FROM DIM_UPLOAD_TRACKING WHERE UPLOAD_ID=L_CACHE_UPLOAD(I);
        COMMIT;

        --7,GATHER DB STATS
        FOR I IN 1 .. L_CACHE_SMONTH.COUNT LOOP
          EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_ITEM RENAME PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') TO P'||TO_CHAR(L_CACHE_SMONTH(I));
          DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => G_OWNER,TABNAME =>'FACT_POS_SALES_ITEM',PARTNAME =>'P'||TO_CHAR(L_CACHE_SMONTH(I)));

          EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_STYLECOLOR RENAME PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') TO P'||TO_CHAR(L_CACHE_SMONTH(I));
          DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => G_OWNER,TABNAME =>'FACT_POS_SALES_STYLECOLOR',PARTNAME =>'P'||TO_CHAR(L_CACHE_SMONTH(I)));
        END LOOP;

        FOR I IN 1 .. L_CACHE_SWEEK.COUNT LOOP
          EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_ITEM_WEEK RENAME PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') TO P'||TO_CHAR(L_CACHE_SWEEK(I));
          DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => G_OWNER,TABNAME =>'FACT_POS_SALES_ITEM_WEEK',PARTNAME =>'P'||TO_CHAR(L_CACHE_SWEEK(I)));

          EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_SALES_STYLECOLOR_WEEK RENAME PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') TO P'||TO_CHAR(L_CACHE_SWEEK(I));
          DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => G_OWNER,TABNAME =>'FACT_POS_SALES_STYLECOLOR_WEEK',PARTNAME =>'P'||TO_CHAR(L_CACHE_SWEEK(I)));
        END LOOP;

      END IF; -- END UPLOAD POS  DATA
    END IF;

  END AGG_POS_SALES;

  -- POS INVENTORY
  PROCEDURE AGG_POS_INVENTORY(P_MODE VARCHAR2, P_PROD_ATTR_ID  IN DIM_PROD_ATTR.PROD_ATTR_ID%TYPE) IS
    TYPE NNT_INDEX_DDL IS TABLE OF VARCHAR2(32767);
    L_CACHE_INDEX_DDL NNT_INDEX_DDL := NNT_INDEX_DDL();

    L_CACHE_UPLOAD  NNT_IDS:=NNT_IDS();
    L_CACHE_SMONTH  NNT_IDS:=NNT_IDS();
    L_CACHE_SWEEK   NNT_IDS:=NNT_IDS();
    L_CACHE_DAY     NNT_IDS:=NNT_IDS();

    L_INDEXSQL VARCHAR2(32767);
  BEGIN
    IF UPPER(P_MODE) = 'COMPLETE' THEN
      DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,
                                        'SEGMENT_ATTRIBUTES',
                                        FALSE);
      DBMS_METADATA.SET_TRANSFORM_PARAM(DBMS_METADATA.SESSION_TRANSFORM,
                                        'STORAGE',
                                        FALSE);

      FOR I IN 1 .. G_POSINV_AGG_TABLES.COUNT LOOP
        --1,TRUNCATE EACH AGGREGATION TABLE
        EXECUTE IMMEDIATE 'TRUNCATE TABLE ' || G_POSINV_AGG_TABLES(I);

        --2,DROP ALL LOCAL INDEXES AND PREPARE THE INDEX DDL
        FOR ITEM IN (SELECT INDEX_NAME
                       FROM USER_INDEXES
                      WHERE TABLE_NAME = G_POSINV_AGG_TABLES(I)) LOOP

          L_CACHE_INDEX_DDL.EXTEND;
          L_INDEXSQL:=TO_CHAR(DBMS_METADATA.GET_DDL(OBJECT_TYPE => 'INDEX',NAME => ITEM.INDEX_NAME));
          L_INDEXSQL:=SUBSTR(L_INDEXSQL,1,INSTR(L_INDEXSQL,'(PARTITION "P0"')-1);

          L_CACHE_INDEX_DDL(L_CACHE_INDEX_DDL.COUNT) := L_INDEXSQL;
          EXECUTE IMMEDIATE 'DROP INDEX ' || ITEM.INDEX_NAME;
        END LOOP;

      END LOOP;

      --3,POPULATE ALL AGGRETATION TABLES IN A SHOT
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

      EXECUTE IMMEDIATE REPLACE(C_POS_INV_AGG_SQL, '{WHERECLAUSE}', '')
                          USING P_PROD_ATTR_ID;

--      DELETE FROM DIM_UPLOAD_TRACKING P WHERE P.UPLOAD_TYPE='POS_INVENTORY';

      COMMIT;
      EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

      --4,REBUILD ALL LOCAL INDEXES
      FOR I IN 1 .. L_CACHE_INDEX_DDL.COUNT LOOP
        EXECUTE IMMEDIATE L_CACHE_INDEX_DDL(I);
      END LOOP;

      --5,TRUNCATE ERROR LOG
      FOR ITEM IN (SELECT UPLOAD_ID FROM DIM_UPLOAD_TRACKING WHERE UPLOAD_TYPE='POS_INVENTORY') LOOP
/*        EXECUTE IMMEDIATE 'ALTER TABLE FACT_ERROR_LOG TRUNCATE PARTITION FOR('||TO_CHAR(ITEM.UPLOAD_ID)||')';
          EXECUTE IMMEDIATE 'ALTER TABLE FACT_ERROR_LOG DROP PARTITION FOR('||TO_CHAR(ITEM.UPLOAD_ID)||')';*/
          DROP_PARTITION_FOR_UPLOAD('FACT_ERROR_LOG',ITEM.UPLOAD_ID);
      END LOOP;

      --6,DELETE ALL TRACKING
      DELETE FROM DIM_UPLOAD_TRACKING WHERE UPLOAD_TYPE = 'POS_INVENTORY';
      COMMIT;

      --7,GATHER DB STATS
      FOR I IN 1 .. G_POSINV_AGG_TABLES.COUNT LOOP
          DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => G_OWNER,TABNAME =>G_POSINV_AGG_TABLES(I));
      END LOOP;

    ELSE
      --INCREMENTAL
      --1,GET ALL UPLOAD_ID,SMONTH_ID,SWEEK_ID TO BE HANDLED
      SELECT SET(CAST(COLLECT(S.UPLOAD_ID) AS NNT_IDS)),
             SET(CAST(COLLECT(SP.SMONTH_ID) AS NNT_IDS)),
             SET(CAST(COLLECT(SP.SWEEK_ID) AS NNT_IDS)),
             SET(CAST(COLLECT(D.DATE_ID) AS NNT_IDS))
        INTO L_CACHE_UPLOAD, L_CACHE_SMONTH, L_CACHE_SWEEK, L_CACHE_DAY
        FROM (SELECT P.UPLOAD_ID, C.COLUMN_VALUE DATE_ID
                FROM DIM_UPLOAD_TRACKING P, TABLE(P.AFFECTED_IDS) C
               WHERE P.UPLOAD_TYPE = 'POS_INVENTORY') S
       INNER JOIN DIM_DATE_DAY D
       ON S.DATE_ID=D.DATE_ID
       INNER JOIN DIM_DATE_SWEEK_PART SP
       ON D.SWEEK_PART_ID=SP.SWEEK_PART_ID;

      -- IF UPLOAD POS DATA
      IF L_CACHE_UPLOAD.COUNT > 0
        THEN
        --2,TRUNCATE PARTITIONS AND SET LOCAL INDEXES UNUSABLE
        FOR I IN 1 .. L_CACHE_SMONTH.COUNT LOOP
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_ITEM TRUNCATE PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||')';
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_ITEM MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') UNUSABLE LOCAL INDEXES';

           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_STYLECOLOR TRUNCATE PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||')';
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_STYLECOLOR MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') UNUSABLE LOCAL INDEXES';
        END LOOP;

        FOR I IN 1 .. L_CACHE_SWEEK.COUNT LOOP
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_ITEM_WEEK TRUNCATE PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||')';
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_ITEM_WEEK MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') UNUSABLE LOCAL INDEXES';

           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_STYLECOLOR_WEEK TRUNCATE PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||')';
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_STYLECOLOR_WEEK MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') UNUSABLE LOCAL INDEXES';
        END LOOP;

        --3,POPULATE THE CORRESPONDING PARTITION
        EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

        IF L_CACHE_DAY.COUNT > 0
          THEN
          EXECUTE IMMEDIATE REPLACE(C_POS_INV_AGG_SQL,
                                    '{WHERECLAUSE}',
                                    ' WHERE YMWD.DATE_ID IN (SELECT COLUMN_VALUE FROM TABLE(L_CACHE_DAY))')
                              USING P_PROD_ATTR_ID;
        END IF;

--        FORALL I IN 1 .. L_CACHE_UPLOAD.COUNT
--        DELETE FROM DIM_UPLOAD_TRACKING WHERE UPLOAD_ID=L_CACHE_UPLOAD(I);

        COMMIT;
        EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

        --4,REBUILD ALL LOCAL INDEXES
        FOR I IN 1 .. L_CACHE_SMONTH.COUNT LOOP
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_ITEM MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') REBUILD UNUSABLE LOCAL INDEXES';

           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_STYLECOLOR MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') REBUILD UNUSABLE LOCAL INDEXES';
        END LOOP;

        FOR I IN 1 .. L_CACHE_SWEEK.COUNT LOOP
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_ITEM_WEEK MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') REBUILD UNUSABLE LOCAL INDEXES';

           EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_STYLECOLOR_WEEK MODIFY PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') REBUILD UNUSABLE LOCAL INDEXES';
        END LOOP;

        --5,TRUNCATE ERRLOG
        FOR I IN 1 .. L_CACHE_UPLOAD.COUNT LOOP
/*         EXECUTE IMMEDIATE 'ALTER TABLE FACT_ERROR_LOG TRUNCATE PARTITION FOR('||TO_CHAR(L_CACHE_UPLOAD(I))||')';
           EXECUTE IMMEDIATE 'ALTER TABLE FACT_ERROR_LOG DROP PARTITION FOR('||TO_CHAR(L_CACHE_UPLOAD(I))||')';*/
           DROP_PARTITION_FOR_UPLOAD('FACT_ERROR_LOG',L_CACHE_UPLOAD(I));
        END LOOP;

        --6,DELETE ALL TRACKING
        FORALL I IN 1 .. L_CACHE_UPLOAD.COUNT
          DELETE FROM DIM_UPLOAD_TRACKING WHERE UPLOAD_ID=L_CACHE_UPLOAD(I);
        COMMIT;

        --7,GATHER DB STATS
        FOR I IN 1 .. L_CACHE_SMONTH.COUNT LOOP
          EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_ITEM RENAME PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') TO P'||TO_CHAR(L_CACHE_SMONTH(I));
          DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => G_OWNER,TABNAME =>'FACT_POS_INV_ITEM',PARTNAME =>'P'||TO_CHAR(L_CACHE_SMONTH(I)));

          EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_STYLECOLOR RENAME PARTITION FOR('||TO_CHAR(L_CACHE_SMONTH(I))||') TO P'||TO_CHAR(L_CACHE_SMONTH(I));
          DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => G_OWNER,TABNAME =>'FACT_POS_INV_STYLECOLOR',PARTNAME =>'P'||TO_CHAR(L_CACHE_SMONTH(I)));
        END LOOP;

        FOR I IN 1 .. L_CACHE_SWEEK.COUNT LOOP
          EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_ITEM_WEEK RENAME PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') TO P'||TO_CHAR(L_CACHE_SWEEK(I));
          DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => G_OWNER,TABNAME =>'FACT_POS_INV_ITEM_WEEK',PARTNAME =>'P'||TO_CHAR(L_CACHE_SWEEK(I)));

          EXECUTE IMMEDIATE 'ALTER TABLE FACT_POS_INV_STYLECOLOR_WEEK RENAME PARTITION FOR('||TO_CHAR(L_CACHE_SWEEK(I))||') TO P'||TO_CHAR(L_CACHE_SWEEK(I));
          DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => G_OWNER,TABNAME =>'FACT_POS_INV_STYLECOLOR_WEEK',PARTNAME =>'P'||TO_CHAR(L_CACHE_SWEEK(I)));
        END LOOP;

      END IF; -- END IF UPLOAD POS DATA
    END IF;

  END AGG_POS_INVENTORY;

BEGIN
  G_POSSALES_AGG_TABLES := NNT_AGG_TABLES('FACT_POS_SALES_ITEM',
                                          'FACT_POS_SALES_ITEM_WEEK',
                                          'FACT_POS_SALES_STYLECOLOR',
                                          'FACT_POS_SALES_STYLECOLOR_WEEK');
  G_POSINV_AGG_TABLES   := NNT_AGG_TABLES('FACT_POS_INV_ITEM',
                                          'FACT_POS_INV_ITEM_WEEK',
                                          'FACT_POS_INV_STYLECOLOR',
                                          'FACT_POS_INV_STYLECOLOR_WEEK');
END POS_AGGREGATE_PACK;
/
