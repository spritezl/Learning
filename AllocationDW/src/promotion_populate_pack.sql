CREATE OR REPLACE PACKAGE PROMOTION_POPULATE_PACK IS

  -- Author  : FZHANG
  -- Created : 9/28/2016
  -- Purpose : PROMOTION POPULATE PACKAGE
  -- Source: flat file --> PROMOTION_RAW
  -- Target: fact_PROMOTION_SC_DOOR/FACT_PROMOTION_SC_LOC/FACT_PROMOTION_PROD_DOOR/FACT_PROMOTION_PROD_LOC

  --Known issues:
  ----1,Style unique attributes is not handled
  ----2,Action_Flag should taken into account once the updating logic is determined
  ----3,There is attribute named SEASON_CODE in style dimension, it conflicts with YEARSEASON dimension

  SUBTYPE T_UPLOAD_FORMAT IS BINARY_INTEGER RANGE 0..3;
  C_PROMOTION_BY_STYLE_DOOR CONSTANT T_UPLOAD_FORMAT:=0;
  C_PROMOTION_BY_PROD_DOOR CONSTANT T_UPLOAD_FORMAT:=1;
  C_PROMOTION_BY_STYLE_LOC CONSTANT T_UPLOAD_FORMAT:=2;
  C_PROMOTION_BY_PROD_LOC CONSTANT T_UPLOAD_FORMAT:=3;

  TYPE REC_PROMOTION IS RECORD(
    --FACT_PROMOTION COLUMNS
    PROMOTION_SCOPE_ID  FACT_PROMOTION_SC_DOOR.PROMOTION_SCOPE_ID%TYPE,
    PROMOTION_ID        FACT_PROMOTION_SC_DOOR.PROMOTION_ID%TYPE,

    STYLE_COLOR_ID      FACT_PROMOTION_SC_DOOR.STYLE_COLOR_ID%TYPE,
    STORE_ID            FACT_PROMOTION_SC_DOOR.STORE_ID%TYPE,
    ACTION_TYPE_ID      FACT_PROMOTION_SC_DOOR.ACTION_TYPE_ID%TYPE,

    PROD_ATTR_VALUE_ID FACT_PROMOTION_PROD_LOC.PROD_ATTR_VALUE_ID%TYPE,
    LOC_ATTR_VALUE_ID  FACT_PROMOTION_PROD_LOC.LOC_ATTR_VALUE_ID%TYPE,
    YEAR_SEASON_ID     FACT_PROMOTION_PROD_LOC.YEAR_SEASON_ID%TYPE,
    TARGET_INVENTORY   FACT_PROMOTION_PROD_LOC.TARGET_INVENTORY%TYPE,
    STYLE_COLOR_MIN_INVENTORY FACT_PROMOTION_PROD_LOC.STYLE_COLOR_MIN_INVENTORY%TYPE,

    --PROMOTION_RAW COLUMNS
    CORPORATE_DIVISION   PROMOTION_RAW.CORPORATE_DIVISION %TYPE,
    VENDOR_REF_NUMBER    PROMOTION_RAW.VENDOR_REF_NUMBER %TYPE,
    ACTION_FLAG          PROMOTION_RAW.ACTION_FLAG %TYPE,
    PROMOTION_CODE       PROMOTION_RAW.PROMOTION_CODE %TYPE,
    STYLE_YEAR           PROMOTION_RAW.STYLE_YEAR %TYPE,
    STYLE_SEASON         PROMOTION_RAW.STYLE_SEASON %TYPE,
    STYLE_NUMBER         PROMOTION_RAW.STYLE_NUMBER %TYPE,
    COLOR_CODE           PROMOTION_RAW.COLOR_CODE %TYPE,
    COLOR_NAME           PROMOTION_RAW.COLOR_NAME %TYPE,
    DOOR_NUMBER          PROMOTION_RAW.DOOR_NUMBER %TYPE,
    LOC_ATTR1            PROMOTION_RAW.LOC_ATTR1 %TYPE,
    LOC_ATTR2            PROMOTION_RAW.LOC_ATTR2 %TYPE,
    LOC_ATTR3            PROMOTION_RAW.LOC_ATTR3 %TYPE,
    LOC_ATTR4            PROMOTION_RAW.LOC_ATTR4 %TYPE,
    LOC_ATTR5            PROMOTION_RAW.LOC_ATTR5 %TYPE,
    PROD_ATTR1           PROMOTION_RAW.PROD_ATTR1 %TYPE,
    PROD_ATTR2           PROMOTION_RAW.PROD_ATTR2 %TYPE,
    PROD_ATTR3           PROMOTION_RAW.PROD_ATTR3 %TYPE,
    PROD_ATTR4           PROMOTION_RAW.PROD_ATTR4 %TYPE,
    PROD_ATTR5           PROMOTION_RAW.PROD_ATTR5 %TYPE,
    STYLE_UK_ATTR_VALUE1 PROMOTION_RAW.STYLE_UK_ATTR_VALUE1%TYPE,
    STYLE_UK_ATTR_VALUE2 PROMOTION_RAW.STYLE_UK_ATTR_VALUE2%TYPE,
    STYLE_UK_ATTR_VALUE3 PROMOTION_RAW.STYLE_UK_ATTR_VALUE3%TYPE,
    STYLE_UK_ATTR_VALUE4 PROMOTION_RAW.STYLE_UK_ATTR_VALUE4%TYPE,
    STYLE_UK_ATTR_VALUE5 PROMOTION_RAW.STYLE_UK_ATTR_VALUE5%TYPE,
    STYLE_UK_ATTR_VALUE6 PROMOTION_RAW.STYLE_UK_ATTR_VALUE6%TYPE,

    --FACT_ERROR_LOG COLUMNS
    LOG_DATE     FACT_ERROR_LOG.LOG_DATE%TYPE,
    UPLOAD_ID    FACT_ERROR_LOG.UPLOAD_ID%TYPE,
    FILE_ROW_NUM FACT_ERROR_LOG.FILE_ROW_NUM%TYPE,
    ERROR_ID     FACT_ERROR_LOG.ERROR_ID%TYPE,
    FIELD_VALUE  FACT_ERROR_LOG.FIELD_VALUE%TYPE);

  TYPE NNT_PROMOTION IS TABLE OF REC_PROMOTION;

  TYPE PROMOTION_RAW_CURSOR IS REF CURSOR RETURN PROMOTION_RAW%ROWTYPE;

  FUNCTION RESULTSET_PROMOTION(P_PROMOTION_RAW_CUR IN PROMOTION_RAW_CURSOR,
                               P_UPLOAD_FORMAT     IN T_UPLOAD_FORMAT,
                               P_PROMOTION_SCOPE_ID IN DIM_PROMOTION_SCOPE.PROMOTION_SCOPE_ID%TYPE)
    RETURN NNT_PROMOTION
    PIPELINED/*
    PARALLEL_ENABLE(PARTITION P_PROMOTION_RAW_CUR BY ANY)*/;

  ---P_UPLOAD_ID: upload sequence generated from seq_upload
  ---P_UPLOAD_FORMAT: upload format:
  ---- BY_STYLE_DOOR
  ---- BY_STYLE_LOC
  ---- BY_PROD_DOOR
  ---- BY_PROD_LOC
  --P_PROD_ATTR_ID: prod attributes combination definition
  --P_LOC_ATTR_ID:loc attributes combination definition
  PROCEDURE POPULATE_PROMOTION(P_UPLOAD_ID     IN PROMOTION_RAW.UPLOAD_ID%TYPE,
                               P_UPLOAD_FORMAT IN T_UPLOAD_FORMAT,
                               P_PROMOTION_SCOPE_ID IN DIM_PROMOTION_SCOPE.PROMOTION_SCOPE_ID%TYPE,
                               P_PROD_ATTR_ID  IN DIM_PROD_ATTR.PROD_ATTR_ID%TYPE,
                               P_LOC_ATTR_ID   IN DIM_LOC_ATTR.LOC_ATTR_ID%TYPE);

END PROMOTION_POPULATE_PACK;
/
CREATE OR REPLACE PACKAGE BODY PROMOTION_POPULATE_PACK IS

  C_DELIMITER          CONSTANT CHAR := '-';
  C_MAX_ROWS_PER_FETCH CONSTANT PLS_INTEGER := 100000;

  C_STYLE_DIM CONSTANT VARCHAR2(10) := 'STYLE';
  C_STORE_DIM CONSTANT VARCHAR2(10) := 'STORE';

  C_STYLE_PRIMARY_SIZE_HIER   CONSTANT VARCHAR2(20) := 'PRIMARY_SIZE';
  C_STORE_PRIMARY_DETAIL_HIER CONSTANT VARCHAR2(20) := 'PRIMARY_DETAIL';

  C_FACT_PROMOTION_SC_DOOR CONSTANT VARCHAR2(30):='FACT_PROMOTION_SC_DOOR';
  C_FACT_PROMOTION_PROD_DOOR CONSTANT VARCHAR2(30):='FACT_PROMOTION_PROD_DOOR';
  C_FACT_PROMOTION_SC_LOC CONSTANT VARCHAR2(30):='FACT_PROMOTION_SC_LOC';
  C_FACT_PROMOTION_PROD_LOC CONSTANT VARCHAR2(30):='FACT_PROMOTION_PROD_LOC';

  C_STATUS_UNFULFILLED CONSTANT DIM_COMMON.COMMON_VALUE%TYPE:='UNFULFILLED';

  C_ACTION_TYPE_REQUIRED  CONSTANT DIM_COMMON.COMMON_VALUE%TYPE:='ACTION_REQUIRED';
  C_ACTION_TYPE_NOTREQUIRED  CONSTANT DIM_COMMON.COMMON_VALUE%TYPE:='NO_ACTION_REQUIRED';

  TYPE REC_LOC_ATTRS IS RECORD(
    DOOR_NUMBER PROMOTION_RAW.DOOR_NUMBER%TYPE,
    LOC_ATTR1   PROMOTION_RAW.LOC_ATTR1%TYPE,
    LOC_ATTR2   PROMOTION_RAW.LOC_ATTR2%TYPE,
    LOC_ATTR3   PROMOTION_RAW.LOC_ATTR3%TYPE,
    LOC_ATTR4   PROMOTION_RAW.LOC_ATTR4%TYPE,
    LOC_ATTR5   PROMOTION_RAW.LOC_ATTR5%TYPE);

  TYPE REC_PROD_ATTRS IS RECORD(
    CORPORATE_DIVISION   PROMOTION_RAW.CORPORATE_DIVISION %TYPE,
    VENDOR_REF_NUMBER    PROMOTION_RAW.VENDOR_REF_NUMBER %TYPE,
    STYLE_NUMBER         PROMOTION_RAW.STYLE_NUMBER %TYPE,
    COLOR_CODE           PROMOTION_RAW.COLOR_CODE %TYPE,
    COLOR_NAME           PROMOTION_RAW.COLOR_NAME %TYPE,
    PROD_ATTR1           PROMOTION_RAW.PROD_ATTR1 %TYPE,
    PROD_ATTR2           PROMOTION_RAW.PROD_ATTR2 %TYPE,
    PROD_ATTR3           PROMOTION_RAW.PROD_ATTR3 %TYPE,
    PROD_ATTR4           PROMOTION_RAW.PROD_ATTR4 %TYPE,
    PROD_ATTR5           PROMOTION_RAW.PROD_ATTR5 %TYPE,
    STYLE_UK_ATTR_VALUE1 PROMOTION_RAW.STYLE_UK_ATTR_VALUE1%TYPE,
    STYLE_UK_ATTR_VALUE2 PROMOTION_RAW.STYLE_UK_ATTR_VALUE2%TYPE,
    STYLE_UK_ATTR_VALUE3 PROMOTION_RAW.STYLE_UK_ATTR_VALUE3%TYPE,
    STYLE_UK_ATTR_VALUE4 PROMOTION_RAW.STYLE_UK_ATTR_VALUE4%TYPE,
    STYLE_UK_ATTR_VALUE5 PROMOTION_RAW.STYLE_UK_ATTR_VALUE5%TYPE,
    STYLE_UK_ATTR_VALUE6 PROMOTION_RAW.STYLE_UK_ATTR_VALUE6%TYPE);

  TYPE REC_YEARSEASON_ATTRS IS RECORD(
    STYLE_YEAR   PROMOTION_RAW.STYLE_YEAR %TYPE,
    STYLE_SEASON PROMOTION_RAW.STYLE_SEASON %TYPE);

  TYPE NNT_CACHE IS TABLE OF NUMBER(8) INDEX BY VARCHAR2(200);
  L_CACHE_YEARSEASON  NNT_CACHE;
  L_CACHE_PROMOTION   NNT_CACHE;
  L_CACHE_ERROR       NNT_CACHE;
  L_CACHE_VENDOR      NNT_CACHE;
  L_CACHE_STYLE       NNT_CACHE;
  L_CACHE_STYLE_COLOR NNT_CACHE;
  L_CACHE_STORE       NNT_CACHE;
  L_CACHE_STATUS      NNT_CACHE;
  L_CACHE_ACTION_TYPE NNT_CACHE;

  TYPE NNT_CACHE2 IS TABLE OF VARCHAR2(100) INDEX BY PLS_INTEGER;
  L_CACHE_STYLE_YEAR_SEASON NNT_CACHE2;

  TYPE NNT_NNT_CACHE IS TABLE OF NNT_CACHE;
  L_PROD_NNT_NNT_CACHE NNT_NNT_CACHE := NNT_NNT_CACHE();
  L_LOC_NNT_NNT_CACHE  NNT_NNT_CACHE := NNT_NNT_CACHE();

  TYPE TEMP_REC IS RECORD(
    ID            NUMBER(8),
    SOURCE_BUSKEY VARCHAR2(100));

  TYPE TEMP_CACHE IS TABLE OF TEMP_REC;
  L_TEMP_CACHE TEMP_CACHE;

  TYPE NNT_ATTR_SEQ_BUS IS TABLE OF VARCHAR2(30) INDEX BY PLS_INTEGER;
  L_PROD_NNT_ATTR_SEQ_BUS NNT_ATTR_SEQ_BUS;
  L_LOC_NNT_ATTR_SEQ_BUS  NNT_ATTR_SEQ_BUS;

  PROCEDURE PREPARE_PROD_ATTR_CACHE(
    P_PROD_ATTR_ID IN DIM_PROD_ATTR.PROD_ATTR_ID%TYPE,
    P_PROD_CRITERIA_GROUP_ID IN DIM_PROMOTION_SCOPE.PROD_CRITERIA_GROUP_ID%TYPE) IS
    L_ATTR_VALUE_SQL VARCHAR2(32767) := 'SELECT DISTINCT PROD_ATTR_VALUE_ID ID ';
    L_TEMP_NNT_CACHE NNT_CACHE;
  BEGIN

    IF P_PROD_CRITERIA_GROUP_ID>0 THEN
       DIM_POPULATE_PACK.POP_DIM_CRITERIA_GROUP_REL(P_CRITERIA_GROUP_ID => P_PROD_CRITERIA_GROUP_ID);
    END IF;

    FOR ITEM IN (SELECT X.*,ROWNUM ATTR_SEQ2 FROM (
                   SELECT *
                   FROM (SELECT CASE B.BUSINESS_DESC
                                  WHEN A.PROD_ATTR_NAME1 THEN
                                   1
                                  WHEN A.PROD_ATTR_NAME2 THEN
                                   2
                                  WHEN A.PROD_ATTR_NAME3 THEN
                                   3
                                  WHEN A.PROD_ATTR_NAME4 THEN
                                   4
                                  WHEN A.PROD_ATTR_NAME5 THEN
                                   5
                                  WHEN A.PROD_ATTR_NAME6 THEN
                                   6
                                  WHEN A.PROD_ATTR_NAME7 THEN
                                   7
                                  WHEN A.PROD_ATTR_NAME8 THEN
                                   8
                                  WHEN A.PROD_ATTR_NAME9 THEN
                                   9
                                  WHEN A.PROD_ATTR_NAME10 THEN
                                   10
                                  WHEN A.PROD_ATTR_NAME11 THEN
                                   11
                                  WHEN A.PROD_ATTR_NAME12 THEN
                                   12
                                  WHEN A.PROD_ATTR_NAME13 THEN
                                   13
                                  WHEN A.PROD_ATTR_NAME14 THEN
                                   14
                                  WHEN A.PROD_ATTR_NAME15 THEN
                                   15
                                  WHEN A.PROD_ATTR_NAME16 THEN
                                   16
                                  WHEN A.PROD_ATTR_NAME17 THEN
                                   17
                                  WHEN A.PROD_ATTR_NAME18 THEN
                                   18
                                  WHEN A.PROD_ATTR_NAME19 THEN
                                   19
                                  WHEN A.PROD_ATTR_NAME20 THEN
                                   20
                                END ATTR_SEQ,
                                B.BUSINESS_DESC,
                                B.DB_TAB_NAME,
                                B.DB_COL_NAME,
                                A.SOURCE_BUSKEY_HASH_STR
                           FROM DIM_PROD_ATTR A
                          INNER JOIN META_DIM_HIER_LEVEL_ATTRS B
                             ON B.DIM_NAME = C_STYLE_DIM
                            AND B.HIERARCHY_NAME = C_STYLE_PRIMARY_SIZE_HIER
                            AND (A.PROD_ATTR_NAME1 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME2 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME3 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME4 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME5 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME6 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME7 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME8 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME9 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME10 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME11 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME12 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME13 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME14 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME15 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME16 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME17 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME18 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME19 = B.BUSINESS_DESC OR
                                A.PROD_ATTR_NAME20 = B.BUSINESS_DESC)
                          WHERE A.PROD_ATTR_ID = P_PROD_ATTR_ID) O
                          WHERE ','||O.SOURCE_BUSKEY_HASH_STR||',' LIKE '%,'||O.ATTR_SEQ||',%'
                  ORDER BY INSTR(','||O.SOURCE_BUSKEY_HASH_STR||',',','||O.ATTR_SEQ||',')) X
                  ) LOOP

      EXECUTE IMMEDIATE 'SELECT DISTINCT 0 ID, UPPER(PROD_ATTR_VALUE' || ITEM.ATTR_SEQ || ') SOURCE_BUSKEY '||CHR(10)||
                        ' FROM DIM_PROD_ATTR_VALUE V '||CHR(10)||
                        ' WHERE V.PROD_ATTR_ID=:P_PROD_ATTR_ID '||CHR(10)||
                        CASE WHEN P_PROD_CRITERIA_GROUP_ID>0 THEN
                             '    AND EXISTS( '||CHR(10)||
                             '       SELECT 1 '||CHR(10)||
                             '       FROM DIM_PROD_ATTR_VAL_REL R'||CHR(10)||
                             '       INNER JOIN DIM_STYLE_COLOR_SIZE S'||CHR(10)||
                             '       ON R.STYLE_COLOR_SIZE_ID=S.STYLE_COLOR_SIZE_ID'||CHR(10)||
                             '       INNER JOIN DIM_CRITERIA_GROUP_PROD_REL R2'||CHR(10)||
                             '       ON S.STYLE_COLOR_SIZE_ID=R2.STYLE_COLOR_SIZE_ID'||CHR(10)||
                             '       WHERE V.PROD_ATTR_VALUE_ID=R.PROD_ATTR_VALUE_ID)'
                             ELSE ' ' END
                        BULK COLLECT
        INTO L_TEMP_CACHE USING P_PROD_ATTR_ID;

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_TEMP_NNT_CACHE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

      L_PROD_NNT_NNT_CACHE.EXTEND();
      L_PROD_NNT_NNT_CACHE(L_PROD_NNT_NNT_CACHE.LAST) := L_TEMP_NNT_CACHE;

      L_PROD_NNT_ATTR_SEQ_BUS(ITEM.ATTR_SEQ2) := ITEM.BUSINESS_DESC;
      L_ATTR_VALUE_SQL := L_ATTR_VALUE_SQL || CASE
                            WHEN ITEM.ATTR_SEQ2 = 1 THEN
                             ',UPPER(PROD_ATTR_VALUE' || ITEM.ATTR_SEQ || ')'
                            ELSE
                             '||''' || C_DELIMITER ||
                             '''||UPPER(PROD_ATTR_VALUE' || ITEM.ATTR_SEQ || ')'
                          END;

    END LOOP;

    L_ATTR_VALUE_SQL := L_ATTR_VALUE_SQL ||' SOURCE_BUSKEY '||CHR(10)||
                     ' FROM DIM_PROD_ATTR_VALUE V '||CHR(10)||
                     ' WHERE PROD_ATTR_ID=:1 '||CHR(10)||
                     CASE WHEN P_PROD_CRITERIA_GROUP_ID>0 THEN
                             '    AND EXISTS( '||CHR(10)||
                             '       SELECT 1 '||CHR(10)||
                             '       FROM DIM_PROD_ATTR_VAL_REL R'||CHR(10)||
                             '       INNER JOIN DIM_STYLE_COLOR_SIZE S'||CHR(10)||
                             '       ON R.STYLE_COLOR_SIZE_ID=S.STYLE_COLOR_SIZE_ID'||CHR(10)||
                             '       INNER JOIN DIM_CRITERIA_GROUP_PROD_REL R2'||CHR(10)||
                             '       ON S.STYLE_COLOR_SIZE_ID=R2.STYLE_COLOR_SIZE_ID'||CHR(10)||
                             '       WHERE V.PROD_ATTR_VALUE_ID=R.PROD_ATTR_VALUE_ID)'
                             ELSE ' ' END;

    DBMS_OUTPUT.PUT_LINE(L_ATTR_VALUE_SQL);
    EXECUTE IMMEDIATE L_ATTR_VALUE_SQL BULK COLLECT
      INTO L_TEMP_CACHE
      USING P_PROD_ATTR_ID;

    FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
      L_TEMP_NNT_CACHE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
    END LOOP;

    L_PROD_NNT_NNT_CACHE.EXTEND();
    L_PROD_NNT_NNT_CACHE(L_PROD_NNT_NNT_CACHE.LAST) := L_TEMP_NNT_CACHE;

  END PREPARE_PROD_ATTR_CACHE;

  PROCEDURE PREPARE_LOC_ATTR_CACHE(
    P_LOC_ATTR_ID IN DIM_LOC_ATTR.LOC_ATTR_ID%TYPE,
    P_LOC_CRITERIA_GROUP_ID IN DIM_PROMOTION_SCOPE.LOC_CRITERIA_GROUP_ID%TYPE
    ) IS
    L_ATTR_VALUE_SQL VARCHAR2(32767) := 'SELECT DISTINCT LOC_ATTR_VALUE_ID ID ';
    L_TEMP_NNT_CACHE NNT_CACHE;
  BEGIN

    IF P_LOC_CRITERIA_GROUP_ID>0 THEN
       DIM_POPULATE_PACK.POP_DIM_CRITERIA_GROUP_REL(P_CRITERIA_GROUP_ID => P_LOC_CRITERIA_GROUP_ID);
    END IF;

    FOR ITEM IN (SELECT X.*,ROWNUM ATTR_SEQ2 FROM (
                   SELECT * 
                   FROM (SELECT CASE B.BUSINESS_DESC
                                  WHEN A.LOC_ATTR_NAME1 THEN
                                   1
                                  WHEN A.LOC_ATTR_NAME2 THEN
                                   2
                                  WHEN A.LOC_ATTR_NAME3 THEN
                                   3
                                  WHEN A.LOC_ATTR_NAME4 THEN
                                   4
                                  WHEN A.LOC_ATTR_NAME5 THEN
                                   5
                                  WHEN A.LOC_ATTR_NAME6 THEN
                                   6
                                  WHEN A.LOC_ATTR_NAME7 THEN
                                   7
                                  WHEN A.LOC_ATTR_NAME8 THEN
                                   8
                                  WHEN A.LOC_ATTR_NAME9 THEN
                                   9
                                  WHEN A.LOC_ATTR_NAME10 THEN
                                   10
                                  WHEN A.LOC_ATTR_NAME11 THEN
                                   11
                                  WHEN A.LOC_ATTR_NAME12 THEN
                                   12
                                  WHEN A.LOC_ATTR_NAME13 THEN
                                   13
                                  WHEN A.LOC_ATTR_NAME14 THEN
                                   14
                                  WHEN A.LOC_ATTR_NAME15 THEN
                                   15
                                  WHEN A.LOC_ATTR_NAME16 THEN
                                   16
                                  WHEN A.LOC_ATTR_NAME17 THEN
                                   17
                                  WHEN A.LOC_ATTR_NAME18 THEN
                                   18
                                  WHEN A.LOC_ATTR_NAME19 THEN
                                   19
                                  WHEN A.LOC_ATTR_NAME20 THEN
                                   20
                                END ATTR_SEQ,
                                B.BUSINESS_DESC,
                                B.DB_TAB_NAME,
                                B.DB_COL_NAME,
                                A.SOURCE_BUSKEY_HASH_STR
                           FROM DIM_LOC_ATTR A
                          INNER JOIN META_DIM_HIER_LEVEL_ATTRS B
                             ON B.DIM_NAME = C_STORE_DIM
                            AND B.HIERARCHY_NAME =
                                C_STORE_PRIMARY_DETAIL_HIER
                            AND (A.LOC_ATTR_NAME1 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME2 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME3 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME4 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME5 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME6 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME7 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME8 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME9 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME10 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME11 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME12 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME13 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME14 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME15 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME16 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME17 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME18 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME19 = B.BUSINESS_DESC OR
                                A.LOC_ATTR_NAME20 = B.BUSINESS_DESC)
                          WHERE A.LOC_ATTR_ID = P_LOC_ATTR_ID) O
                          WHERE ','||O.SOURCE_BUSKEY_HASH_STR||',' LIKE '%,'||O.ATTR_SEQ||',%'
                  ORDER BY INSTR(','||O.SOURCE_BUSKEY_HASH_STR||',',','||O.ATTR_SEQ||',')) X                  
                  ) LOOP

      EXECUTE IMMEDIATE 'SELECT DISTINCT 0 ID, UPPER(LOC_ATTR_VALUE' || ITEM.ATTR_SEQ || ') SOURCE_BUSKEY '||CHR(10)||
                        ' FROM DIM_LOC_ATTR_VALUE V '||CHR(10)||
                        ' WHERE V.LOC_ATTR_ID=:P_LOC_ATTR_ID '||CHR(10)||
                        CASE WHEN P_LOC_CRITERIA_GROUP_ID>0 THEN
                             '    AND EXISTS( '||CHR(10)||
                             '       SELECT 1 '||CHR(10)||
                             '       FROM DIM_LOC_ATTR_VAL_REL R'||CHR(10)||
                             '       INNER JOIN DIM_STORE_STORE S'||CHR(10)||
                             '       ON R.STORE_ID=S.STORE_ID'||CHR(10)||
                             '       INNER JOIN DIM_CRITERIA_GROUP_LOC_REL R2'||CHR(10)||
                             '       ON S.STORE_ID=R2.STORE_ID'||CHR(10)||
                             '       WHERE V.LOC_ATTR_VALUE_ID=R.LOC_ATTR_VALUE_ID)'
                             ELSE ' ' END
                        BULK COLLECT
        INTO L_TEMP_CACHE USING P_LOC_ATTR_ID;

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_TEMP_NNT_CACHE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

      L_LOC_NNT_NNT_CACHE.EXTEND();
      L_LOC_NNT_NNT_CACHE(L_LOC_NNT_NNT_CACHE.LAST) := L_TEMP_NNT_CACHE;

      L_LOC_NNT_ATTR_SEQ_BUS(ITEM.ATTR_SEQ2) := ITEM.BUSINESS_DESC;
      L_ATTR_VALUE_SQL := L_ATTR_VALUE_SQL || CASE
                            WHEN ITEM.ATTR_SEQ2 = 1 THEN
                             ',UPPER(LOC_ATTR_VALUE' || ITEM.ATTR_SEQ || ')'
                            ELSE
                             '||''' || C_DELIMITER || '''||UPPER(LOC_ATTR_VALUE' ||
                             ITEM.ATTR_SEQ || ')'
                          END;

    END LOOP;

    L_ATTR_VALUE_SQL := L_ATTR_VALUE_SQL ||' SOURCE_BUSKEY '||CHR(10)||
                     ' FROM DIM_LOC_ATTR_VALUE V '||CHR(10)||
                     ' WHERE LOC_ATTR_ID=:1 '||CHR(10)||
                     CASE WHEN P_LOC_CRITERIA_GROUP_ID>0 THEN
                             '    AND EXISTS( '||CHR(10)||
                             '       SELECT 1 '||CHR(10)||
                             '       FROM DIM_LOC_ATTR_VAL_REL R'||CHR(10)||
                             '       INNER JOIN DIM_STORE_STORE S'||CHR(10)||
                             '       ON R.STORE_ID=S.STORE_ID'||CHR(10)||
                             '       INNER JOIN DIM_CRITERIA_GROUP_LOC_REL R2'||CHR(10)||
                             '       ON S.STORE_ID=R2.STORE_ID'||CHR(10)||
                             '       WHERE V.LOC_ATTR_VALUE_ID=R.LOC_ATTR_VALUE_ID)'
                             ELSE ' ' END;


    DBMS_OUTPUT.PUT_LINE(L_ATTR_VALUE_SQL);
    EXECUTE IMMEDIATE L_ATTR_VALUE_SQL BULK COLLECT
      INTO L_TEMP_CACHE
      USING P_LOC_ATTR_ID;

    FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
      L_TEMP_NNT_CACHE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
    END LOOP;

    L_LOC_NNT_NNT_CACHE.EXTEND();
    L_LOC_NNT_NNT_CACHE(L_LOC_NNT_NNT_CACHE.LAST) := L_TEMP_NNT_CACHE;

  END PREPARE_LOC_ATTR_CACHE;

  PROCEDURE PREPARE_STYLE_CACHE(
    P_PROD_CRITERIA_GROUP_ID IN DIM_PROMOTION_SCOPE.PROD_CRITERIA_GROUP_ID%TYPE)
    IS
  BEGIN

    IF P_PROD_CRITERIA_GROUP_ID>0 THEN
       DIM_POPULATE_PACK.POP_DIM_CRITERIA_GROUP_REL(P_CRITERIA_GROUP_ID => P_PROD_CRITERIA_GROUP_ID);

      --STYLE
      SELECT S.STYLE_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM DIM_STYLE S
      WHERE EXISTS(
              SELECT 1
              FROM DIM_STYLE_COLOR SC
              INNER JOIN DIM_STYLE_COLOR_SIZE SCS
              ON SC.STYLE_COLOR_ID=SCS.STYLE_COLOR_ID
              INNER JOIN DIM_CRITERIA_GROUP_PROD_REL R
              ON R.STYLE_COLOR_SIZE_ID=SCS.STYLE_COLOR_SIZE_ID
              WHERE S.STYLE_ID=SC.STYLE_ID
        );

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_STYLE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

      --STYLE_COLOR
      SELECT S.STYLE_COLOR_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM DIM_STYLE_COLOR S
      WHERE EXISTS(
            SELECT 1
            FROM DIM_STYLE_COLOR_SIZE SCS
            INNER JOIN DIM_CRITERIA_GROUP_PROD_REL R
            ON SCS.STYLE_COLOR_SIZE_ID=R.STYLE_COLOR_SIZE_ID
            WHERE S.STYLE_COLOR_ID=SCS.STYLE_COLOR_ID
      );

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_STYLE_COLOR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

      --VENDOR
      SELECT V.VENDOR_ID ID, V.SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM DIM_VENDOR V
      WHERE EXISTS(
            SELECT 1
            FROM DIM_STYLE S
            INNER JOIN DIM_STYLE_COLOR SC
            ON S.STYLE_ID=SC.STYLE_COLOR_ID
            INNER JOIN DIM_STYLE_COLOR_SIZE SCS
            ON SC.STYLE_COLOR_ID=SCS.STYLE_COLOR_ID
            INNER JOIN DIM_CRITERIA_GROUP_PROD_REL R
            ON R.STYLE_COLOR_SIZE_ID=SCS.STYLE_COLOR_SIZE_ID
            WHERE V.VENDOR_ID=S.VENDOR_ID
      );

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_VENDOR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

      SELECT S.STYLE_COLOR_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM (
             SELECT STYLE_COLOR_ID,
             LISTAGG(REAL_YEAR_SEASON_ID, ',')
             WITHIN GROUP(ORDER BY REAL_YEAR_SEASON_ID) SOURCE_BUSKEY
          FROM (SELECT DISTINCT S.STYLE_COLOR_ID, S.REAL_YEAR_SEASON_ID
                  FROM DIM_STYLE_YEAR_SEASON S
                 WHERE S.REAL_YEAR_SEASON_ID > 0)
         GROUP BY STYLE_COLOR_ID
         ) S
         WHERE EXISTS(
            SELECT 1
            FROM DIM_STYLE_COLOR_SIZE SCS
            INNER JOIN DIM_CRITERIA_GROUP_PROD_REL R
            ON SCS.STYLE_COLOR_SIZE_ID=R.STYLE_COLOR_SIZE_ID
            WHERE S.STYLE_COLOR_ID=SCS.STYLE_COLOR_ID
         );

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_STYLE_YEAR_SEASON(L_TEMP_CACHE(J).ID) := L_TEMP_CACHE(J).SOURCE_BUSKEY;
      END LOOP;

    ELSE

      --STYLE
      SELECT S.STYLE_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM DIM_STYLE S;

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_STYLE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

      --STYLE_COLOR
      SELECT S.STYLE_COLOR_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM DIM_STYLE_COLOR S;

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_STYLE_COLOR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

      --VENDOR
      SELECT V.VENDOR_ID ID, V.SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM DIM_VENDOR V;

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_VENDOR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

      SELECT S.ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM (
             SELECT STYLE_COLOR_ID ID,
             LISTAGG(REAL_YEAR_SEASON_ID, ',')
             WITHIN GROUP(ORDER BY REAL_YEAR_SEASON_ID) SOURCE_BUSKEY
          FROM (SELECT DISTINCT S.STYLE_COLOR_ID, S.REAL_YEAR_SEASON_ID
                  FROM DIM_STYLE_YEAR_SEASON S
                 WHERE S.REAL_YEAR_SEASON_ID > 0)
         GROUP BY STYLE_COLOR_ID
         ) S;

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_STYLE_YEAR_SEASON(L_TEMP_CACHE(J).ID) := L_TEMP_CACHE(J).SOURCE_BUSKEY;
      END LOOP;

    END IF;
  END PREPARE_STYLE_CACHE;

  PROCEDURE PREPARE_STORE_CACHE(
    P_LOC_CRITERIA_GROUP_ID IN DIM_PROMOTION_SCOPE.LOC_CRITERIA_GROUP_ID%TYPE) IS
  BEGIN
    IF P_LOC_CRITERIA_GROUP_ID>0 THEN
      DIM_POPULATE_PACK.POP_DIM_CRITERIA_GROUP_REL(P_CRITERIA_GROUP_ID => P_LOC_CRITERIA_GROUP_ID);

      --STORE
      SELECT S.STORE_ID ID, S.SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM DIM_STORE_STORE S
        WHERE EXISTS(
              SELECT 1
              FROM DIM_CRITERIA_GROUP_LOC_REL R
              WHERE S.STORE_ID=R.STORE_ID
        );

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_STORE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

    ELSE
      --STORE
      SELECT S.STORE_ID ID, S.SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM DIM_STORE_STORE S;

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_STORE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

    END IF;
  END PREPARE_STORE_CACHE;

  PROCEDURE PREPARE_YEARSEASON_CACHE(
    P_YEARSEASON_CRITERIA_GROUP_ID IN DIM_PROMOTION_SCOPE.YEARSEASON_CRITERIA_GROUP_ID%TYPE) IS
  BEGIN
    IF P_YEARSEASON_CRITERIA_GROUP_ID>0 THEN
      DIM_POPULATE_PACK.POP_DIM_CRITERIA_GROUP_REL(P_CRITERIA_GROUP_ID => P_YEARSEASON_CRITERIA_GROUP_ID);

      --YEAR_SEASON
      SELECT S.YEAR_SEASON_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM DIM_YEAR_SEASON S
        WHERE EXISTS(
              SELECT 1
              FROM DIM_CRITERIA_GROUP_YS_REL R
              WHERE S.YEAR_SEASON_ID=R.STYLE_YEAR_SEASON_ID
        );

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_YEARSEASON(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

    ELSE
      --YEAR_SEASON
      SELECT S.YEAR_SEASON_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
        BULK COLLECT
        INTO L_TEMP_CACHE
        FROM DIM_YEAR_SEASON S;

      FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
        L_CACHE_YEARSEASON(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
      END LOOP;

    END IF;
  END PREPARE_YEARSEASON_CACHE;



  --VALIATE YEAR_SEASON
  PROCEDURE VALIDATE_YEARSEASON(P_REC_YEARSEASON_ATTRS REC_YEARSEASON_ATTRS,
                                P_YEAR_SEASON_ID       IN OUT DIM_YEAR_SEASON.YEAR_SEASON_ID%TYPE) IS
    L_SOURCE_BUSKEY DIM_YEAR_SEASON.SOURCE_BUSKEY%TYPE;
  BEGIN
    P_YEAR_SEASON_ID := 0;

    --STYLE_YEAR
    IF P_REC_YEARSEASON_ATTRS.STYLE_YEAR IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_YEAR_BLANK, '');
    END IF;

    --STYLE_SEASON
    IF P_REC_YEARSEASON_ATTRS.STYLE_SEASON IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_SEASON_BLANK, '');
    END IF;

    L_SOURCE_BUSKEY := UPPER(P_REC_YEARSEASON_ATTRS.STYLE_YEAR ||
                             C_DELIMITER ||
                             P_REC_YEARSEASON_ATTRS.STYLE_SEASON);
    IF NOT L_CACHE_YEARSEASON.EXISTS(L_SOURCE_BUSKEY) THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_YEAR_SEASON_NOTEXIST,
                              L_SOURCE_BUSKEY);
    ELSE
      P_YEAR_SEASON_ID := L_CACHE_YEARSEASON(L_SOURCE_BUSKEY);
    END IF;

  END VALIDATE_YEARSEASON;

  --VALIDATE PROD_ATTR
  PROCEDURE VALIDATE_PROD_ATTR(P_REC_PROD_ATTRS     REC_PROD_ATTRS,
                               P_PROD_ATTR_VALUE_ID IN OUT DIM_PROD_ATTR_VALUE.PROD_ATTR_VALUE_ID%TYPE) IS
    L_SOURCE_BUSKEY VARCHAR2(200);
  BEGIN
    P_PROD_ATTR_VALUE_ID := 0;

    L_SOURCE_BUSKEY := CASE
                         WHEN L_PROD_NNT_ATTR_SEQ_BUS.EXISTS(1) THEN
                          UPPER(P_REC_PROD_ATTRS.PROD_ATTR1)
                       END || CASE
                         WHEN L_PROD_NNT_ATTR_SEQ_BUS.EXISTS(2) THEN
                          C_DELIMITER||UPPER(P_REC_PROD_ATTRS.PROD_ATTR2)
                       END || CASE
                         WHEN L_PROD_NNT_ATTR_SEQ_BUS.EXISTS(3) THEN
                          C_DELIMITER||UPPER(P_REC_PROD_ATTRS.PROD_ATTR3)
                       END || CASE
                         WHEN L_PROD_NNT_ATTR_SEQ_BUS.EXISTS(4) THEN
                          C_DELIMITER||UPPER(P_REC_PROD_ATTRS.PROD_ATTR4)
                       END || CASE
                         WHEN L_PROD_NNT_ATTR_SEQ_BUS.EXISTS(5) THEN
                          C_DELIMITER||UPPER(P_REC_PROD_ATTRS.PROD_ATTR5)
                       END;

    IF L_PROD_NNT_NNT_CACHE(L_PROD_NNT_NNT_CACHE.LAST).EXISTS(L_SOURCE_BUSKEY) THEN
      P_PROD_ATTR_VALUE_ID := L_PROD_NNT_NNT_CACHE(L_PROD_NNT_NNT_CACHE.LAST)(L_SOURCE_BUSKEY);
    ELSE
      IF L_PROD_NNT_ATTR_SEQ_BUS.EXISTS(1) THEN

        IF P_REC_PROD_ATTRS.PROD_ATTR1 IS NULL THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROD_ATTR1_BLANK, '');
        ELSE
          IF NOT L_PROD_NNT_NNT_CACHE(1).EXISTS(UPPER(P_REC_PROD_ATTRS.PROD_ATTR1)) THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROD_ATTR1_NOTEXIST,
                                    P_REC_PROD_ATTRS.PROD_ATTR1);
          END IF;
        END IF;

      END IF;

      IF L_PROD_NNT_ATTR_SEQ_BUS.EXISTS(2) THEN

        IF P_REC_PROD_ATTRS.PROD_ATTR2 IS NULL THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROD_ATTR2_BLANK, '');
        ELSE
          IF NOT L_PROD_NNT_NNT_CACHE(2).EXISTS(UPPER(P_REC_PROD_ATTRS.PROD_ATTR2)) THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROD_ATTR2_NOTEXIST,
                                    P_REC_PROD_ATTRS.PROD_ATTR2);
          END IF;
        END IF;

      END IF;

      IF L_PROD_NNT_ATTR_SEQ_BUS.EXISTS(3) THEN

        IF P_REC_PROD_ATTRS.PROD_ATTR3 IS NULL THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROD_ATTR3_BLANK, '');
        ELSE
          IF NOT L_PROD_NNT_NNT_CACHE(3).EXISTS(UPPER(P_REC_PROD_ATTRS.PROD_ATTR3)) THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROD_ATTR3_NOTEXIST,
                                    P_REC_PROD_ATTRS.PROD_ATTR3);
          END IF;
        END IF;

      END IF;

      IF L_PROD_NNT_ATTR_SEQ_BUS.EXISTS(4) THEN

        IF P_REC_PROD_ATTRS.PROD_ATTR4 IS NULL THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROD_ATTR4_BLANK, '');
        ELSE
          IF NOT L_PROD_NNT_NNT_CACHE(4).EXISTS(UPPER(P_REC_PROD_ATTRS.PROD_ATTR4)) THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROD_ATTR4_NOTEXIST,
                                    P_REC_PROD_ATTRS.PROD_ATTR4);
          END IF;
        END IF;

      END IF;

      IF L_PROD_NNT_ATTR_SEQ_BUS.EXISTS(5) THEN

        IF P_REC_PROD_ATTRS.PROD_ATTR5 IS NULL THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROD_ATTR5_BLANK, '');
        ELSE
          IF NOT L_PROD_NNT_NNT_CACHE(5).EXISTS(UPPER(P_REC_PROD_ATTRS.PROD_ATTR5)) THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROD_ATTR5_NOTEXIST,
                                    P_REC_PROD_ATTRS.PROD_ATTR5);
          END IF;
        END IF;

      END IF;

    END IF;

  END VALIDATE_PROD_ATTR;

  --VALIDATE LOC_ATTR
  PROCEDURE VALIDATE_LOC_ATTR(P_REC_LOC_ATTRS     REC_LOC_ATTRS,
                              P_LOC_ATTR_VALUE_ID IN OUT DIM_LOC_ATTR_VALUE.LOC_ATTR_VALUE_ID%TYPE) IS
                              L_SOURCE_BUSKEY VARCHAR2(200);
  BEGIN
    P_LOC_ATTR_VALUE_ID := 0;

    L_SOURCE_BUSKEY := CASE
                         WHEN L_LOC_NNT_ATTR_SEQ_BUS.EXISTS(1) THEN
                          UPPER(P_REC_LOC_ATTRS.LOC_ATTR1)
                       END || CASE
                         WHEN L_LOC_NNT_ATTR_SEQ_BUS.EXISTS(2) THEN
                          C_DELIMITER||UPPER(P_REC_LOC_ATTRS.LOC_ATTR2)
                       END || CASE
                         WHEN L_LOC_NNT_ATTR_SEQ_BUS.EXISTS(3) THEN
                          C_DELIMITER||UPPER(P_REC_LOC_ATTRS.LOC_ATTR3)
                       END;

    IF L_LOC_NNT_NNT_CACHE(L_LOC_NNT_NNT_CACHE.LAST).EXISTS(L_SOURCE_BUSKEY) THEN
      P_LOC_ATTR_VALUE_ID := L_LOC_NNT_NNT_CACHE(L_LOC_NNT_NNT_CACHE.LAST)(L_SOURCE_BUSKEY);
    ELSE
      IF L_LOC_NNT_ATTR_SEQ_BUS.EXISTS(1) THEN

        IF P_REC_LOC_ATTRS.LOC_ATTR1 IS NULL THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_LOC_ATTR1_BLANK, '');
        ELSE
          IF NOT L_LOC_NNT_NNT_CACHE(1).EXISTS(UPPER(P_REC_LOC_ATTRS.LOC_ATTR1)) THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_LOC_ATTR1_NOTEXIST,
                                    P_REC_LOC_ATTRS.LOC_ATTR1);
          END IF;
        END IF;

      END IF;

      IF L_LOC_NNT_ATTR_SEQ_BUS.EXISTS(2) THEN

        IF P_REC_LOC_ATTRS.LOC_ATTR2 IS NULL THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_LOC_ATTR2_BLANK, '');
        ELSE
          IF NOT L_LOC_NNT_NNT_CACHE(2).EXISTS(UPPER(P_REC_LOC_ATTRS.LOC_ATTR2)) THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_LOC_ATTR2_NOTEXIST,
                                    P_REC_LOC_ATTRS.LOC_ATTR2);
          END IF;
        END IF;

      END IF;

      IF L_LOC_NNT_ATTR_SEQ_BUS.EXISTS(3) THEN

        IF P_REC_LOC_ATTRS.LOC_ATTR3 IS NULL THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_LOC_ATTR3_BLANK, '');
        ELSE
          IF NOT L_LOC_NNT_NNT_CACHE(3).EXISTS(UPPER(P_REC_LOC_ATTRS.LOC_ATTR3)) THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_LOC_ATTR3_NOTEXIST,
                                    P_REC_LOC_ATTRS.LOC_ATTR3);
          END IF;
        END IF;

      END IF;

    END IF;
  END VALIDATE_LOC_ATTR;

  --VALIDATE PROMOTION
  PROCEDURE VALIDATE_PROMOTION(P_PROMOTION_CODE PROMOTION_RAW.PROMOTION_CODE%TYPE,
                               P_PROMOTION_ID   IN OUT DIM_PROMOTION.PROMOTION_ID%TYPE) IS
    L_SOURCE_BUSKEY DIM_PROMOTION.SOURCE_BUSKEY%TYPE;
  BEGIN
    P_PROMOTION_ID := 0;

    IF P_PROMOTION_CODE IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROMOTION_CODE_BLANK, '');
    END IF;

    L_SOURCE_BUSKEY := UPPER(P_PROMOTION_CODE);
    IF NOT L_CACHE_PROMOTION.EXISTS(L_SOURCE_BUSKEY) THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PROMOTION_CODE_NOTEXIST,
                              L_SOURCE_BUSKEY);
    ELSE
      P_PROMOTION_ID := L_CACHE_PROMOTION(L_SOURCE_BUSKEY);
    END IF;

  END VALIDATE_PROMOTION;

  --VALIDATE STYLE
  PROCEDURE VALIDATE_STYLE(P_REC_PROD_ATTRS REC_PROD_ATTRS,
                           P_STYLE_COLOR_ID IN OUT DIM_STYLE_COLOR.STYLE_COLOR_ID%TYPE) IS
    L_SOURCE_BUSKEY DIM_STYLE_COLOR.SOURCE_BUSKEY%TYPE;
  BEGIN
    --STYLE_NUMBER
    IF P_REC_PROD_ATTRS.STYLE_NUMBER IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_NUMBER_BLANK, '');
    END IF;

    --COLOR_CODE
    IF P_REC_PROD_ATTRS.COLOR_CODE IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_COLOR_CODE_BLANK, '');
    END IF;

    --VENDOR_REF_NUMBER
    IF P_REC_PROD_ATTRS.VENDOR_REF_NUMBER IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_VENDOR_REF_NUM_BLANK,'');
    END IF;

    L_SOURCE_BUSKEY := UPPER(P_REC_PROD_ATTRS.VENDOR_REF_NUMBER || C_DELIMITER ||
                             P_REC_PROD_ATTRS.STYLE_NUMBER || C_DELIMITER ||
                             P_REC_PROD_ATTRS.COLOR_CODE);

    IF NOT L_CACHE_STYLE_COLOR.EXISTS(L_SOURCE_BUSKEY) THEN
      L_SOURCE_BUSKEY := UPPER(P_REC_PROD_ATTRS.VENDOR_REF_NUMBER || C_DELIMITER ||
                               P_REC_PROD_ATTRS.STYLE_NUMBER);

      IF NOT L_CACHE_STYLE.EXISTS(L_SOURCE_BUSKEY) THEN
        L_SOURCE_BUSKEY := UPPER(P_REC_PROD_ATTRS.VENDOR_REF_NUMBER);

        IF NOT L_CACHE_VENDOR.EXISTS(L_SOURCE_BUSKEY) THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_VENDOR_REF_NUM_NOTEXIST,L_SOURCE_BUSKEY);
        END IF;

        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_NUMBER_NOTEXIST,
                                UPPER(P_REC_PROD_ATTRS.VENDOR_REF_NUMBER ||
                                      C_DELIMITER ||
                                      P_REC_PROD_ATTRS.STYLE_NUMBER));
      END IF;

      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_COLOR_CODE_NOTEXIST,
                              UPPER(P_REC_PROD_ATTRS.COLOR_CODE));
    END IF;

    P_STYLE_COLOR_ID := L_CACHE_STYLE_COLOR(L_SOURCE_BUSKEY);

  END VALIDATE_STYLE;

  --VALIDATE STORE
  PROCEDURE VALIDATE_STORE(P_REC_LOC_ATTRS REC_LOC_ATTRS,
                           P_STORE_ID      IN OUT DIM_STORE_STORE.STORE_ID%TYPE) IS
  BEGIN
    P_STORE_ID := 0;
    IF P_REC_LOC_ATTRS.DOOR_NUMBER IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_DOOR_NUM_BLANK, '');
    ELSE

      IF NOT L_CACHE_STORE.EXISTS(UPPER(P_REC_LOC_ATTRS.DOOR_NUMBER)) THEN
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_DOOR_NUM_NOTEXIST,
                                P_REC_LOC_ATTRS.DOOR_NUMBER);
      ELSE
        P_STORE_ID := L_CACHE_STORE(UPPER(P_REC_LOC_ATTRS.DOOR_NUMBER));
      END IF;
    END IF;
  END VALIDATE_STORE;

  --VALIDATE STYLE YEAR SEASON
  PROCEDURE VALIDATE_STYLE_YEAR_SEASON(P_STYLE_COLOR_ID IN DIM_STYLE_COLOR.STYLE_COLOR_ID%TYPE,
    P_YEAR_SEASON_ID       IN DIM_YEAR_SEASON.YEAR_SEASON_ID%TYPE,
    P_REC_YEARSEASON_ATTRS REC_YEARSEASON_ATTRS,
    P_REC_PROD_ATTRS       REC_PROD_ATTRS
    )
    IS
    L_SOURCE_BUSKEY DIM_STYLE_YEAR_SEASON.SOURCE_BUSKEY%TYPE;
    L_YEAR_SEASON_LIST VARCHAR2(100);
    BEGIN
       L_SOURCE_BUSKEY := UPPER(P_REC_PROD_ATTRS.VENDOR_REF_NUMBER||
                                 C_DELIMITER||
                                 P_REC_PROD_ATTRS.STYLE_NUMBER||
                                 C_DELIMITER||
                                 P_REC_PROD_ATTRS.COLOR_CODE||
                                 C_DELIMITER||
                                 P_REC_YEARSEASON_ATTRS.STYLE_YEAR ||
                                 C_DELIMITER ||
                                 P_REC_YEARSEASON_ATTRS.STYLE_SEASON);

       L_YEAR_SEASON_LIST:=L_CACHE_STYLE_YEAR_SEASON(P_STYLE_COLOR_ID);

       IF NOT INSTR(','||L_YEAR_SEASON_LIST||',',','||TO_CHAR(P_YEAR_SEASON_ID)||',')>0 THEN
         RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_YEAR_SEASON_NOTEXIST, L_SOURCE_BUSKEY);
       END IF;
  END VALIDATE_STYLE_YEAR_SEASON;

  FUNCTION RESULTSET_PROMOTION(P_PROMOTION_RAW_CUR IN PROMOTION_RAW_CURSOR,
                               P_UPLOAD_FORMAT     IN T_UPLOAD_FORMAT,
                               P_PROMOTION_SCOPE_ID IN DIM_PROMOTION_SCOPE.PROMOTION_SCOPE_ID%TYPE)
    RETURN NNT_PROMOTION
    PIPELINED/*
    PARALLEL_ENABLE(PARTITION P_PROMOTION_RAW_CUR BY ANY)*/ IS

    TYPE NNT_PROMOTION_RAW IS TABLE OF PROMOTION_RAW%ROWTYPE;
    L_CACHE_PROMOTION_RAW NNT_PROMOTION_RAW;

    L_REC_PROD_ATTRS       REC_PROD_ATTRS;
    L_REC_LOC_ATTRS        REC_LOC_ATTRS;
    L_REC_YEARSEASON_ATTRS REC_YEARSEASON_ATTRS;
    L_REC_PROMOTION        REC_PROMOTION;

  BEGIN

    LOOP
      FETCH P_PROMOTION_RAW_CUR BULK COLLECT
        INTO L_CACHE_PROMOTION_RAW LIMIT C_MAX_ROWS_PER_FETCH;
      EXIT WHEN L_CACHE_PROMOTION_RAW.COUNT = 0;

      FOR I IN L_CACHE_PROMOTION_RAW.FIRST .. L_CACHE_PROMOTION_RAW.LAST LOOP
        BEGIN
          L_REC_PROMOTION.PROMOTION_SCOPE_ID   := P_PROMOTION_SCOPE_ID;
          L_REC_PROMOTION.CORPORATE_DIVISION   := L_CACHE_PROMOTION_RAW(I).CORPORATE_DIVISION;
          L_REC_PROMOTION.VENDOR_REF_NUMBER    := L_CACHE_PROMOTION_RAW(I).VENDOR_REF_NUMBER;
          L_REC_PROMOTION.STYLE_NUMBER         := L_CACHE_PROMOTION_RAW(I).STYLE_NUMBER;
          L_REC_PROMOTION.COLOR_CODE           := L_CACHE_PROMOTION_RAW(I).COLOR_CODE;
          L_REC_PROMOTION.COLOR_NAME           := L_CACHE_PROMOTION_RAW(I).COLOR_NAME;
          L_REC_PROMOTION.PROD_ATTR1           := L_CACHE_PROMOTION_RAW(I).PROD_ATTR1;
          L_REC_PROMOTION.PROD_ATTR2           := L_CACHE_PROMOTION_RAW(I).PROD_ATTR2;
          L_REC_PROMOTION.PROD_ATTR3           := L_CACHE_PROMOTION_RAW(I).PROD_ATTR3;
          L_REC_PROMOTION.PROD_ATTR4           := L_CACHE_PROMOTION_RAW(I).PROD_ATTR4;
          L_REC_PROMOTION.PROD_ATTR5           := L_CACHE_PROMOTION_RAW(I).PROD_ATTR5;
          L_REC_PROMOTION.STYLE_UK_ATTR_VALUE1 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE1;
          L_REC_PROMOTION.STYLE_UK_ATTR_VALUE2 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE2;
          L_REC_PROMOTION.STYLE_UK_ATTR_VALUE3 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE3;
          L_REC_PROMOTION.STYLE_UK_ATTR_VALUE4 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE4;
          L_REC_PROMOTION.STYLE_UK_ATTR_VALUE5 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE5;
          L_REC_PROMOTION.STYLE_UK_ATTR_VALUE6 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE6;
          L_REC_PROMOTION.TARGET_INVENTORY     := L_CACHE_PROMOTION_RAW(I).TARGET_INVENTORY;
          L_REC_PROMOTION.STYLE_COLOR_MIN_INVENTORY:=L_CACHE_PROMOTION_RAW(I).STYLE_COLOR_MIN_INVENTORY;
          L_REC_PROMOTION.ACTION_FLAG          := REPLACE(NVL(UPPER(L_CACHE_PROMOTION_RAW(I).ACTION_FLAG),'M'),'A','M');
          L_REC_PROMOTION.PROMOTION_CODE       := L_CACHE_PROMOTION_RAW(I).PROMOTION_CODE;

          L_REC_PROMOTION.DOOR_NUMBER := L_CACHE_PROMOTION_RAW(I).DOOR_NUMBER;
          L_REC_PROMOTION.LOC_ATTR1   := L_CACHE_PROMOTION_RAW(I).LOC_ATTR1;
          L_REC_PROMOTION.LOC_ATTR2   := L_CACHE_PROMOTION_RAW(I).LOC_ATTR2;
          L_REC_PROMOTION.LOC_ATTR3   := L_CACHE_PROMOTION_RAW(I).LOC_ATTR3;
          L_REC_PROMOTION.LOC_ATTR4   := L_CACHE_PROMOTION_RAW(I).LOC_ATTR4;
          L_REC_PROMOTION.LOC_ATTR5   := L_CACHE_PROMOTION_RAW(I).LOC_ATTR5;

          L_REC_PROMOTION.STYLE_YEAR   := L_CACHE_PROMOTION_RAW(I).STYLE_YEAR;
          L_REC_PROMOTION.STYLE_SEASON := L_CACHE_PROMOTION_RAW(I).STYLE_SEASON;

          L_REC_PROMOTION.LOG_DATE     := SYSDATE;
          L_REC_PROMOTION.UPLOAD_ID    := L_CACHE_PROMOTION_RAW(I).UPLOAD_ID;
          L_REC_PROMOTION.FILE_ROW_NUM := L_CACHE_PROMOTION_RAW(I).FILE_ROW_NUM;
          L_REC_PROMOTION.ERROR_ID     := 0;
          L_REC_PROMOTION.FIELD_VALUE  := '0';

          --1,VALIDATE PROD_CRITERIA
          L_REC_PROD_ATTRS.CORPORATE_DIVISION   := L_CACHE_PROMOTION_RAW(I).CORPORATE_DIVISION;
          L_REC_PROD_ATTRS.VENDOR_REF_NUMBER    := L_CACHE_PROMOTION_RAW(I).VENDOR_REF_NUMBER;
          L_REC_PROD_ATTRS.STYLE_NUMBER         := L_CACHE_PROMOTION_RAW(I).STYLE_NUMBER;
          L_REC_PROD_ATTRS.COLOR_CODE           := L_CACHE_PROMOTION_RAW(I).COLOR_CODE;
          L_REC_PROD_ATTRS.PROD_ATTR1           := L_CACHE_PROMOTION_RAW(I).PROD_ATTR1;
          L_REC_PROD_ATTRS.PROD_ATTR2           := L_CACHE_PROMOTION_RAW(I).PROD_ATTR2;
          L_REC_PROD_ATTRS.PROD_ATTR3           := L_CACHE_PROMOTION_RAW(I).PROD_ATTR3;
          L_REC_PROD_ATTRS.PROD_ATTR4           := L_CACHE_PROMOTION_RAW(I).PROD_ATTR4;
          L_REC_PROD_ATTRS.PROD_ATTR5           := L_CACHE_PROMOTION_RAW(I).PROD_ATTR5;
          L_REC_PROD_ATTRS.STYLE_UK_ATTR_VALUE1 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE1;
          L_REC_PROD_ATTRS.STYLE_UK_ATTR_VALUE2 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE2;
          L_REC_PROD_ATTRS.STYLE_UK_ATTR_VALUE3 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE3;
          L_REC_PROD_ATTRS.STYLE_UK_ATTR_VALUE4 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE4;
          L_REC_PROD_ATTRS.STYLE_UK_ATTR_VALUE5 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE5;
          L_REC_PROD_ATTRS.STYLE_UK_ATTR_VALUE6 := L_CACHE_PROMOTION_RAW(I).STYLE_UK_ATTR_VALUE6;

          L_REC_PROMOTION.STYLE_COLOR_ID        :=0;
          L_REC_PROMOTION.STORE_ID              :=0;
          L_REC_PROMOTION.PROD_ATTR_VALUE_ID    :=0;
          L_REC_PROMOTION.LOC_ATTR_VALUE_ID     :=0;
          L_REC_PROMOTION.YEAR_SEASON_ID        :=0;
          L_REC_PROMOTION.ACTION_TYPE_ID        :=0;

          IF L_REC_PROMOTION.TARGET_INVENTORY IS NULL THEN
            L_REC_PROMOTION.ACTION_TYPE_ID    :=L_CACHE_ACTION_TYPE(C_ACTION_TYPE_REQUIRED);
            L_REC_PROMOTION.TARGET_INVENTORY  := 0;
          ELSIF L_REC_PROMOTION.TARGET_INVENTORY>0 THEN
            L_REC_PROMOTION.ACTION_TYPE_ID    :=L_CACHE_ACTION_TYPE(C_ACTION_TYPE_REQUIRED);
          ELSIF L_REC_PROMOTION.TARGET_INVENTORY=0 THEN
            L_REC_PROMOTION.ACTION_TYPE_ID    :=L_CACHE_ACTION_TYPE(C_ACTION_TYPE_NOTREQUIRED);
          ELSIF L_REC_PROMOTION.TARGET_INVENTORY<0 THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_TARGETINVENTORY_NEGATIVE, '');
          END IF;

          IF L_REC_PROMOTION.STYLE_COLOR_MIN_INVENTORY IS NULL THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_SC_MIN_INVENTORY_BLANK, '');
/*          ELSIF L_REC_PROMOTION.STYLE_COLOR_MIN_INVENTORY=0 THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_SC_MIN_INVENTORY_ZERO, '');*/
          ELSIF L_REC_PROMOTION.STYLE_COLOR_MIN_INVENTORY<0 THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_SC_MIN_INVENTORY_NEGATIVE, '');
          ELSE
            L_REC_PROMOTION.STYLE_COLOR_MIN_INVENTORY:=L_CACHE_PROMOTION_RAW(I).STYLE_COLOR_MIN_INVENTORY;
          END IF;

          IF P_UPLOAD_FORMAT IN (C_PROMOTION_BY_STYLE_DOOR, C_PROMOTION_BY_STYLE_LOC) THEN
            VALIDATE_STYLE(L_REC_PROD_ATTRS,
                           L_REC_PROMOTION.STYLE_COLOR_ID);
          ELSE
            VALIDATE_PROD_ATTR(L_REC_PROD_ATTRS,
                               L_REC_PROMOTION.PROD_ATTR_VALUE_ID);
          END IF;

          --2,VALIDATE LOC_CRITERIA
          L_REC_LOC_ATTRS.DOOR_NUMBER := L_CACHE_PROMOTION_RAW(I).DOOR_NUMBER;
          L_REC_LOC_ATTRS.LOC_ATTR1   := L_CACHE_PROMOTION_RAW(I).LOC_ATTR1;
          L_REC_LOC_ATTRS.LOC_ATTR2   := L_CACHE_PROMOTION_RAW(I).LOC_ATTR2;
          L_REC_LOC_ATTRS.LOC_ATTR3   := L_CACHE_PROMOTION_RAW(I).LOC_ATTR3;
          L_REC_LOC_ATTRS.LOC_ATTR4   := L_CACHE_PROMOTION_RAW(I).LOC_ATTR4;
          L_REC_LOC_ATTRS.LOC_ATTR5   := L_CACHE_PROMOTION_RAW(I).LOC_ATTR5;

          IF P_UPLOAD_FORMAT IN (C_PROMOTION_BY_STYLE_DOOR, C_PROMOTION_BY_PROD_DOOR) THEN
            VALIDATE_STORE(L_REC_LOC_ATTRS, L_REC_PROMOTION.STORE_ID);
          ELSE
            VALIDATE_LOC_ATTR(L_REC_LOC_ATTRS,
                              L_REC_PROMOTION.LOC_ATTR_VALUE_ID);
          END IF;

          --4,VALIDATE VALIDATE YEAR_SEASON AND STYLE YEAR SEASON
          IF P_UPLOAD_FORMAT IN (C_PROMOTION_BY_STYLE_DOOR, C_PROMOTION_BY_STYLE_LOC) THEN

            L_REC_YEARSEASON_ATTRS.STYLE_YEAR   := L_CACHE_PROMOTION_RAW(I).STYLE_YEAR;
            L_REC_YEARSEASON_ATTRS.STYLE_SEASON := L_CACHE_PROMOTION_RAW(I).STYLE_SEASON;
            VALIDATE_YEARSEASON(L_REC_YEARSEASON_ATTRS,
                                L_REC_PROMOTION.YEAR_SEASON_ID);


            VALIDATE_STYLE_YEAR_SEASON(
                           L_REC_PROMOTION.STYLE_COLOR_ID,
                           L_REC_PROMOTION.YEAR_SEASON_ID,
                           L_REC_YEARSEASON_ATTRS,
                           L_REC_PROD_ATTRS);
          END IF;


          --4,VALIDATE PROMOTION
          VALIDATE_PROMOTION(L_CACHE_PROMOTION_RAW(I).PROMOTION_CODE,
                             L_REC_PROMOTION.PROMOTION_ID);

          PIPE ROW(L_REC_PROMOTION);

        EXCEPTION
          WHEN OTHERS THEN
            BEGIN
              L_REC_PROMOTION.FIELD_VALUE := REGEXP_REPLACE(SQLERRM,
                                                            'ORA-[[:digit:]]{5}: ',
                                                            '');
              L_REC_PROMOTION.ERROR_ID    := L_CACHE_ERROR(SQLCODE);
              PIPE ROW(L_REC_PROMOTION);
            END;
        END;
      END LOOP;

    END LOOP;

  END RESULTSET_PROMOTION;

  PROCEDURE POPULATE_FACT_PROMOTION(P_UPLOAD_FORMAT IN T_UPLOAD_FORMAT)
    IS
--    C_STATUS_FULFILLED_ID          CONSTANT DIM_COMMON.COMMON_ID%TYPE:=L_CACHE_STATUS(C_STATUS_FULFILLED);
    C_STATUS_UNFULFILLED_ID        CONSTANT DIM_COMMON.COMMON_ID%TYPE:=L_CACHE_STATUS(C_STATUS_UNFULFILLED);

    L_SQL VARCHAR2(32767):=
    'BEGIN
    DELETE FROM <TARGET_TABLE> T
 WHERE EXISTS (SELECT 1
          FROM FACT_PROMOTION_STEP2_TEMP S
         WHERE T.PROMOTION_ID = S.PROMOTION_ID
           AND T.<PROD_COLUMN> = S.<PROD_COLUMN>
           AND T.<LOC_COLUMN> = S.<LOC_COLUMN>
           AND T.YEAR_SEASON_ID = S.YEAR_SEASON_ID
           AND S.ACTION_FLAG = ''D'')
           AND T.STATUS_ID=:UNFULFILLED_ID;

MERGE INTO <TARGET_TABLE> T
USING (SELECT *
         FROM FACT_PROMOTION_STEP2_TEMP
        WHERE ACTION_FLAG IN (''A'', ''M'')) S
ON (T.PROMOTION_ID = S.PROMOTION_ID AND
T.<PROD_COLUMN> = S.<PROD_COLUMN> AND
T.<LOC_COLUMN> = S.<LOC_COLUMN> AND
T.YEAR_SEASON_ID = S.YEAR_SEASON_ID)
WHEN MATCHED THEN
  UPDATE SET T.TARGET_INVENTORY              =S.TARGET_INVENTORY,
             T.STYLE_COLOR_MIN_INVENTORY     =S.STYLE_COLOR_MIN_INVENTORY,
             T.ACTION_TYPE_ID                =S.ACTION_TYPE_ID,
             T.PROMOTION_SCOPE_ID            =S.PROMOTION_SCOPE_ID
  WHERE T.STATUS_ID=:UNFULFILLED_ID
WHEN NOT MATCHED THEN
  INSERT
    (T.PROMOTION_SCOPE_ID,
     T.PROMOTION_ID,
     T.<PROD_COLUMN>,
     T.<LOC_COLUMN>,
     T.YEAR_SEASON_ID,
     T.STATUS_ID,
     T.ACTION_TYPE_ID,
     T.TARGET_INVENTORY,
     T.STYLE_COLOR_MIN_INVENTORY)
  VALUES
    (S.PROMOTION_SCOPE_ID,
     S.PROMOTION_ID,
     S.<PROD_COLUMN>,
     S.<LOC_COLUMN>,
     S.YEAR_SEASON_ID,
     :UNFULFILLED_ID,
     S.ACTION_TYPE_ID,
     S.TARGET_INVENTORY,
     S.STYLE_COLOR_MIN_INVENTORY);
END;';

    C_STYLE_COLUMN CONSTANT VARCHAR2(30):='STYLE_COLOR_ID';
    C_PROD_ATTR_COLUMN CONSTANT VARCHAR2(30):='PROD_ATTR_VALUE_ID';
    C_DOOR_COLUMN CONSTANT VARCHAR2(30):='STORE_ID';
    C_LOC_ATTR_COLUMN CONSTANT VARCHAR2(30):='LOC_ATTR_VALUE_ID';

    C_PROD_COLUMN_TEMPLATE CONSTANT VARCHAR2(30):='<PROD_COLUMN>';
    C_LOC_COLUMN_TEMPLATE CONSTANT VARCHAR2(30):='<LOC_COLUMN>';
    C_TARGET_TABLE_TEMPLATE CONSTANT VARCHAR2(30):='<TARGET_TABLE>';
    BEGIN

       CASE P_UPLOAD_FORMAT
          WHEN C_PROMOTION_BY_STYLE_DOOR THEN
               L_SQL:=REPLACE(
                                         REPLACE(
                                             REPLACE(L_SQL,C_TARGET_TABLE_TEMPLATE,C_FACT_PROMOTION_SC_DOOR),
                                             C_PROD_COLUMN_TEMPLATE,C_STYLE_COLUMN),
                                         C_LOC_COLUMN_TEMPLATE,C_DOOR_COLUMN);

          WHEN C_PROMOTION_BY_STYLE_LOC THEN
               L_SQL:=REPLACE(
                                         REPLACE(
                                             REPLACE(L_SQL,C_TARGET_TABLE_TEMPLATE,C_FACT_PROMOTION_SC_LOC),
                                             C_PROD_COLUMN_TEMPLATE,C_STYLE_COLUMN),
                                         C_LOC_COLUMN_TEMPLATE,C_LOC_ATTR_COLUMN);

          WHEN C_PROMOTION_BY_PROD_DOOR THEN
               L_SQL:=REPLACE(
                                         REPLACE(
                                             REPLACE(L_SQL,C_TARGET_TABLE_TEMPLATE,C_FACT_PROMOTION_PROD_DOOR),
                                             C_PROD_COLUMN_TEMPLATE,C_PROD_ATTR_COLUMN),
                                         C_LOC_COLUMN_TEMPLATE,C_DOOR_COLUMN);

          WHEN C_PROMOTION_BY_PROD_LOC THEN
               L_SQL:=REPLACE(
                                         REPLACE(
                                             REPLACE(L_SQL,C_TARGET_TABLE_TEMPLATE,C_FACT_PROMOTION_PROD_LOC),
                                             C_PROD_COLUMN_TEMPLATE,C_PROD_ATTR_COLUMN),
                                         C_LOC_COLUMN_TEMPLATE,C_LOC_ATTR_COLUMN);

       END CASE;

       EXECUTE IMMEDIATE L_SQL USING C_STATUS_UNFULFILLED_ID;

    END POPULATE_FACT_PROMOTION;

  PROCEDURE POPULATE_PROMOTION(P_UPLOAD_ID     IN PROMOTION_RAW.UPLOAD_ID%TYPE,
                               P_UPLOAD_FORMAT IN T_UPLOAD_FORMAT,
                               P_PROMOTION_SCOPE_ID IN DIM_PROMOTION_SCOPE.PROMOTION_SCOPE_ID%TYPE,
                               P_PROD_ATTR_ID  IN DIM_PROD_ATTR.PROD_ATTR_ID%TYPE,
                               P_LOC_ATTR_ID   IN DIM_LOC_ATTR.LOC_ATTR_ID%TYPE) IS
    L_ROWCOUNT    PLS_INTEGER;
    L_FAILURE_NUM PLS_INTEGER;
    L_SQL         VARCHAR2(32767);
    L_UPLOAD_TYPE DIM_UPLOAD_TRACKING.UPLOAD_TYPE%TYPE;

    L_PROD_CRITERIA_GROUP_ID  DIM_PROMOTION_SCOPE.PROD_CRITERIA_GROUP_ID%TYPE;
    L_LOC_CRITERIA_GROUP_ID   DIM_PROMOTION_SCOPE.LOC_CRITERIA_GROUP_ID%TYPE;
    L_YEARSEASON_CRITERIA_GROUP_ID DIM_PROMOTION_SCOPE.YEARSEASON_CRITERIA_GROUP_ID%TYPE;

  BEGIN

    L_UPLOAD_TYPE:=REPLACE(
    CASE P_UPLOAD_FORMAT
      WHEN C_PROMOTION_BY_STYLE_DOOR THEN C_FACT_PROMOTION_SC_DOOR
      WHEN C_PROMOTION_BY_STYLE_LOC THEN C_FACT_PROMOTION_SC_LOC
      WHEN C_PROMOTION_BY_PROD_DOOR THEN C_FACT_PROMOTION_PROD_DOOR
      WHEN C_PROMOTION_BY_PROD_LOC THEN C_FACT_PROMOTION_PROD_LOC
    END,'FACT_','');

    SELECT PROD_CRITERIA_GROUP_ID,LOC_CRITERIA_GROUP_ID,YEARSEASON_CRITERIA_GROUP_ID
           INTO L_PROD_CRITERIA_GROUP_ID,L_LOC_CRITERIA_GROUP_ID,L_YEARSEASON_CRITERIA_GROUP_ID
    FROM DIM_PROMOTION_SCOPE
    WHERE PROMOTION_SCOPE_ID=P_PROMOTION_SCOPE_ID;

    CASE P_UPLOAD_FORMAT
      WHEN C_PROMOTION_BY_STYLE_DOOR THEN
        PREPARE_STYLE_CACHE(L_PROD_CRITERIA_GROUP_ID);
        PREPARE_STORE_CACHE(L_LOC_CRITERIA_GROUP_ID);
        PREPARE_YEARSEASON_CACHE(L_YEARSEASON_CRITERIA_GROUP_ID);

      WHEN C_PROMOTION_BY_STYLE_LOC THEN
        PREPARE_STYLE_CACHE(L_PROD_CRITERIA_GROUP_ID);
        PREPARE_LOC_ATTR_CACHE(P_LOC_ATTR_ID,L_LOC_CRITERIA_GROUP_ID);
        PREPARE_YEARSEASON_CACHE(L_YEARSEASON_CRITERIA_GROUP_ID);

      WHEN C_PROMOTION_BY_PROD_DOOR THEN
        PREPARE_PROD_ATTR_CACHE(P_PROD_ATTR_ID,L_PROD_CRITERIA_GROUP_ID);
        PREPARE_STORE_CACHE(L_LOC_CRITERIA_GROUP_ID);
        PREPARE_YEARSEASON_CACHE(L_YEARSEASON_CRITERIA_GROUP_ID);

      WHEN C_PROMOTION_BY_PROD_LOC THEN
        PREPARE_PROD_ATTR_CACHE(P_PROD_ATTR_ID,L_PROD_CRITERIA_GROUP_ID);
        PREPARE_LOC_ATTR_CACHE(P_LOC_ATTR_ID,L_LOC_CRITERIA_GROUP_ID);
        PREPARE_YEARSEASON_CACHE(L_YEARSEASON_CRITERIA_GROUP_ID);

    END CASE;

    INSERT INTO DIM_UPLOAD_TRACKING
    (UPLOAD_ID, UPLOAD_TYPE, AFFECTED_IDS, SUCCEED_NUM, FAILURE_NUM)
    VALUES
      (P_UPLOAD_ID, L_UPLOAD_TYPE, NULL, 0, 0);

    L_SQL:='
    INSERT ALL WHEN ERROR_ID = 0 THEN INTO FACT_PROMOTION_STEP1_TEMP
      (PROMOTION_SCOPE_ID,
       PROMOTION_ID,
       STYLE_COLOR_ID,
       PROD_ATTR_VALUE_ID,
       STORE_ID,
       ACTION_TYPE_ID,
       LOC_ATTR_VALUE_ID,
       YEAR_SEASON_ID,
       TARGET_INVENTORY,
       STYLE_COLOR_MIN_INVENTORY,
       ACTION_FLAG,
       FILE_ROW_NUM)
    VALUES
      (PROMOTION_SCOPE_ID,
       PROMOTION_ID,
       STYLE_COLOR_ID,
       PROD_ATTR_VALUE_ID,
       STORE_ID,
       ACTION_TYPE_ID,
       LOC_ATTR_VALUE_ID,
       YEAR_SEASON_ID,
       TARGET_INVENTORY,
       STYLE_COLOR_MIN_INVENTORY,
       ACTION_FLAG,
       FILE_ROW_NUM) ELSE INTO FACT_ERROR_LOG PARTITION FOR(' ||
                      TO_CHAR(P_UPLOAD_ID) || ')
      (DATE_ID, UPLOAD_ID, ERROR_ID, FIELD_VALUE, LOG_DATE, FILE_ROW_NUM)
    VALUES
      (TO_NUMBER(TO_CHAR(LOG_DATE, ''YYYYMMDD'')),
       UPLOAD_ID,
       ERROR_ID,
       FIELD_VALUE,
       LOG_DATE,
       FILE_ROW_NUM)
      SELECT /*PARALLEL*/
       *
        FROM TABLE(PROMOTION_POPULATE_PACK.RESULTSET_PROMOTION(CURSOR
                                                               (SELECT *
                                                                  FROM PROMOTION_RAW P
                                                                 WHERE UPLOAD_ID ='||TO_CHAR(P_UPLOAD_ID)||'),
                                                                 '||TO_CHAR(P_UPLOAD_FORMAT)||',
                                                                 '||TO_CHAR(P_PROMOTION_SCOPE_ID)||'))';
    EXECUTE IMMEDIATE L_SQL;
    L_ROWCOUNT := SQL%ROWCOUNT;

    SELECT COUNT(*)
      INTO L_FAILURE_NUM
      FROM FACT_ERROR_LOG
     WHERE UPLOAD_ID = P_UPLOAD_ID;

     UPDATE DIM_UPLOAD_TRACKING
     SET
         SUCCEED_NUM=L_ROWCOUNT - L_FAILURE_NUM,
         FAILURE_NUM=L_FAILURE_NUM
     WHERE UPLOAD_ID=P_UPLOAD_ID;

    INSERT INTO FACT_PROMOTION_STEP2_TEMP
      (PROMOTION_SCOPE_ID,
       PROMOTION_ID,
       STYLE_COLOR_ID,
       PROD_ATTR_VALUE_ID,
       STORE_ID,
       LOC_ATTR_VALUE_ID,
       YEAR_SEASON_ID,
       ACTION_TYPE_ID,
       TARGET_INVENTORY,
       STYLE_COLOR_MIN_INVENTORY,
       ACTION_FLAG)
    SELECT
       A.PROMOTION_SCOPE_ID,
       A.PROMOTION_ID,
       A.STYLE_COLOR_ID,
       A.PROD_ATTR_VALUE_ID,
       A.STORE_ID,
       A.LOC_ATTR_VALUE_ID,
       A.YEAR_SEASON_ID,
       A.ACTION_TYPE_ID,
       MAX(A.TARGET_INVENTORY)KEEP(DENSE_RANK LAST  ORDER BY LPAD(A.FILE_ROW_NUM, 10, '0') || A.ACTION_FLAG) TARGET_INVENTORY,
       MAX(A.STYLE_COLOR_MIN_INVENTORY)KEEP(DENSE_RANK LAST  ORDER BY LPAD(A.FILE_ROW_NUM, 10, '0') || A.ACTION_FLAG) STYLE_COLOR_MIN_INVENTORY,
       SUBSTR(MAX(LPAD(A.FILE_ROW_NUM, 10, '0') || A.ACTION_FLAG),
                    11,
                    1) ACTION_FLAG
    FROM FACT_PROMOTION_STEP1_TEMP A
    GROUP BY
       A.PROMOTION_SCOPE_ID,
       A.PROMOTION_ID,
       A.STYLE_COLOR_ID,
       A.PROD_ATTR_VALUE_ID,
       A.STORE_ID,
       A.LOC_ATTR_VALUE_ID,
       A.YEAR_SEASON_ID,
       A.ACTION_TYPE_ID;

    POPULATE_FACT_PROMOTION(P_UPLOAD_FORMAT);

    COMMIT;

    EXECUTE IMMEDIATE 'ALTER TABLE PROMOTION_RAW TRUNCATE PARTITION FOR(' ||
                      TO_CHAR(P_UPLOAD_ID) || ')';

  END POPULATE_PROMOTION;

BEGIN

  --PROMOTION
  SELECT S.PROMOTION_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_PROMOTION S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_PROMOTION(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  --ERROR
  SELECT S.ERROR_ID ID, S.ERROR_CODE SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_ERROR S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_ERROR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.COMMON_ID ID, S.COMMON_VALUE SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_COMMON S
   WHERE S.COMMON_CODE IN
         ('PROMOTION_STATUS');

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STATUS(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.COMMON_ID ID, S.COMMON_VALUE SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_COMMON S
   WHERE S.COMMON_CODE IN
         ('PROMOTION_ACTION_TYPE');

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_ACTION_TYPE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

END PROMOTION_POPULATE_PACK;
/
