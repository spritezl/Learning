CREATE OR REPLACE PACKAGE ALLOCATE_POPULATE_PACK IS

  -- Author  : FZHANG
  -- Created : 9/28/2015 10:01:28 AM
  -- Purpose : PO/ASN/RECEIVER POPULATE PACKAGE

  --***************************************PO*********************
  TYPE REC_PO IS RECORD(
    --FACT_PO COLUMNS
    TRANS_BUSKEY           FACT_PO.TRANS_BUSKEY%TYPE,
    STYLE_COLOR_SIZE_GP_ID FACT_PO.STYLE_COLOR_SIZE_GP_ID%TYPE,
    STYLE_COLOR_ID         DIM_STYLE_COLOR.STYLE_COLOR_ID%TYPE,
    YEAR_SEASON_ID         FACT_PO.YEAR_SEASON_ID%TYPE,
    STORE_LOC_ID           FACT_PO.STORE_LOC_ID%TYPE,
    STATUS_ID              FACT_PO.STATUS_ID%TYPE,
    START_DT               FACT_PO.START_DT%TYPE,
    CANCEL_DT              FACT_PO.CANCEL_DT%TYPE,
    IN_DC_DT               FACT_PO.IN_DC_DT%TYPE,
    COST                   FACT_PO.COST%TYPE,
    RETAIL                 FACT_PO.RETAIL%TYPE,
    TOTAL_QTY              FACT_PO.TOTAL_QTY%TYPE,
    TOTAL_RETAIL           FACT_PO.TOTAL_RETAIL%TYPE,
    TOTAL_COST             FACT_PO.TOTAL_COST%TYPE,
    --PO_RAW COLUMNS
    PO_NUMBER              PO_RAW.PO_NUMBER%TYPE,

    LOC_ATTR1              PO_RAW.LOC_ATTR1%TYPE,
    LOC_ATTR2              PO_RAW.LOC_ATTR2%TYPE,
    LOC_ATTR3              PO_RAW.LOC_ATTR3%TYPE,
    LOC_ATTR4              PO_RAW.LOC_ATTR4%TYPE,
    LOC_ATTR5              PO_RAW.LOC_ATTR5%TYPE,
    LOC_ATTR6              PO_RAW.LOC_ATTR6%TYPE,
    LOC_ATTR7              PO_RAW.LOC_ATTR7%TYPE,
    LOC_ATTR8              PO_RAW.LOC_ATTR8%TYPE,
    LOC_ATTR9              PO_RAW.LOC_ATTR9%TYPE,
    LOC_ATTR10             PO_RAW.LOC_ATTR10%TYPE,

    TOTAL_DIST_INDICATOR PO_RAW.TOTAL_DIST_INDICATOR%TYPE,

    START_DATE             PO_RAW.START_DATE%TYPE,
    CANCEL_DATE            PO_RAW.CANCEL_DATE%TYPE,
    IN_DC_DATE             PO_RAW.IN_DC_DATE%TYPE,

    VENDOR_REF_NUMBER      PO_RAW.VENDOR_REF_NUMBER%TYPE,
    STYLE_NUMBER           PO_RAW.STYLE_NUMBER%TYPE,
    COLOR_CODE             PO_RAW.COLOR_CODE%TYPE,
    SIZE_CODE              PO_RAW.SIZE_CODE%TYPE,
    STYLE_YEAR             PO_RAW.STYLE_YEAR%TYPE,
    STYLE_SEASON           PO_RAW.STYLE_SEASON%TYPE,
    GOLDEN_PACKAGE_CODE    PO_RAW.GOLDEN_PACKAGE_CODE%TYPE,

    ACTION_FLAG PO_RAW.ACTION_FLAG%TYPE,

    --FACT_ERROR_LOG COLUMNS
    LOG_DATE     FACT_ERROR_LOG.LOG_DATE%TYPE,
    UPLOAD_ID    FACT_ERROR_LOG.UPLOAD_ID%TYPE,
    FILE_ROW_NUM FACT_ERROR_LOG.FILE_ROW_NUM%TYPE,
    ERROR_ID     FACT_ERROR_LOG.ERROR_ID%TYPE,
    FIELD_VALUE  FACT_ERROR_LOG.FIELD_VALUE%TYPE);

  TYPE NNT_PO IS TABLE OF REC_PO;

  TYPE PO_RAW_CURSOR IS REF CURSOR RETURN PO_RAW%ROWTYPE;

  FUNCTION RESULTSET_PO(P_PO_RAW_CUR IN PO_RAW_CURSOR) RETURN NNT_PO
    PIPELINED
    PARALLEL_ENABLE(PARTITION P_PO_RAW_CUR BY ANY);

  PROCEDURE POPULATE_PO(P_UPLOAD_ID PO_RAW.UPLOAD_ID%TYPE);

  --***************************************ASN*********************

  TYPE REC_ASN IS RECORD(
    --FACT_PO COLUMNS
    TRANS_BUSKEY           FACT_ASN.TRANS_BUSKEY%TYPE,
    STYLE_COLOR_SIZE_GP_ID FACT_ASN.STYLE_COLOR_SIZE_GP_ID%TYPE,
    STYLE_COLOR_ID         DIM_STYLE_COLOR.STYLE_COLOR_ID%TYPE,
    YEAR_SEASON_ID         FACT_ASN.YEAR_SEASON_ID%TYPE,
    STORE_LOC_ID           FACT_ASN.STORE_LOC_ID%TYPE,
    STATUS_ID              FACT_ASN.STATUS_ID%TYPE,
    START_DT               FACT_ASN.START_DT%TYPE,
    CANCEL_DT              FACT_ASN.CANCEL_DT%TYPE,
    IN_DC_DT               FACT_ASN.IN_DC_DT%TYPE,
    COST                   FACT_ASN.COST%TYPE,
    RETAIL                 FACT_ASN.RETAIL%TYPE,
    TOTAL_QTY              FACT_ASN.TOTAL_QTY%TYPE,
    TOTAL_RETAIL           FACT_ASN.TOTAL_RETAIL%TYPE,
    TOTAL_COST             FACT_ASN.TOTAL_COST%TYPE,
    --ASN_RAW COLUMNS
--    PO_NUMBER              ASN_RAW.PO_NUMBER%TYPE,
    ASN_NUMBER             ASN_RAW.ASN_NUMBER%TYPE,

    LOC_ATTR1              ASN_RAW.LOC_ATTR1%TYPE,
    LOC_ATTR2              ASN_RAW.LOC_ATTR2%TYPE,
    LOC_ATTR3              ASN_RAW.LOC_ATTR3%TYPE,
    LOC_ATTR4              ASN_RAW.LOC_ATTR4%TYPE,
    LOC_ATTR5              ASN_RAW.LOC_ATTR5%TYPE,
    LOC_ATTR6              ASN_RAW.LOC_ATTR6%TYPE,
    LOC_ATTR7              ASN_RAW.LOC_ATTR7%TYPE,
    LOC_ATTR8              ASN_RAW.LOC_ATTR8%TYPE,
    LOC_ATTR9              ASN_RAW.LOC_ATTR9%TYPE,
    LOC_ATTR10             ASN_RAW.LOC_ATTR10%TYPE,

    TOTAL_DIST_INDICATOR   ASN_RAW.TOTAL_DIST_INDICATOR%TYPE,

    START_DATE             ASN_RAW.START_DATE%TYPE,
    CANCEL_DATE            ASN_RAW.CANCEL_DATE%TYPE,
    IN_DC_DATE             ASN_RAW.IN_DC_DATE%TYPE,

    VENDOR_REF_NUMBER      ASN_RAW.VENDOR_REF_NUMBER%TYPE,
    STYLE_NUMBER           ASN_RAW.STYLE_NUMBER%TYPE,
    COLOR_CODE             ASN_RAW.COLOR_CODE%TYPE,
    SIZE_CODE              ASN_RAW.SIZE_CODE%TYPE,
    STYLE_YEAR             ASN_RAW.STYLE_YEAR%TYPE,
    STYLE_SEASON           ASN_RAW.STYLE_SEASON%TYPE,
    GOLDEN_PACKAGE_CODE    ASN_RAW.GOLDEN_PACKAGE_CODE%TYPE,

    ACTION_FLAG            ASN_RAW.ACTION_FLAG%TYPE,

    --FACT_ERROR_LOG COLUMNS
    LOG_DATE     FACT_ERROR_LOG.LOG_DATE%TYPE,
    UPLOAD_ID    FACT_ERROR_LOG.UPLOAD_ID%TYPE,
    FILE_ROW_NUM FACT_ERROR_LOG.FILE_ROW_NUM%TYPE,
    ERROR_ID     FACT_ERROR_LOG.ERROR_ID%TYPE,
    FIELD_VALUE  FACT_ERROR_LOG.FIELD_VALUE%TYPE);

  TYPE NNT_ASN IS TABLE OF REC_ASN;

  TYPE ASN_RAW_CURSOR IS REF CURSOR RETURN ASN_RAW%ROWTYPE;

  FUNCTION RESULTSET_ASN(P_ASN_RAW_CUR IN ASN_RAW_CURSOR) RETURN NNT_ASN
    PIPELINED
    PARALLEL_ENABLE(PARTITION P_ASN_RAW_CUR BY ANY);

  PROCEDURE POPULATE_ASN(P_UPLOAD_ID ASN_RAW.UPLOAD_ID%TYPE);

  --***************************************RECEIVER*********************

  TYPE REC_RECEIVER IS RECORD(
    --FACT_PO COLUMNS
    TRANS_BUSKEY           FACT_RECEIVER.TRANS_BUSKEY%TYPE,
    STYLE_COLOR_SIZE_GP_ID FACT_RECEIVER.STYLE_COLOR_SIZE_GP_ID%TYPE,
    STYLE_COLOR_ID         DIM_STYLE_COLOR.STYLE_COLOR_ID%TYPE,
    YEAR_SEASON_ID         FACT_RECEIVER.YEAR_SEASON_ID%TYPE,
    STORE_LOC_ID           FACT_RECEIVER.STORE_LOC_ID%TYPE,
    STATUS_ID              FACT_RECEIVER.STATUS_ID%TYPE,
    START_DT               FACT_RECEIVER.START_DT%TYPE,
    CANCEL_DT              FACT_RECEIVER.CANCEL_DT%TYPE,
    IN_DC_DT               FACT_RECEIVER.IN_DC_DT%TYPE,
    COST                   FACT_RECEIVER.COST%TYPE,
    RETAIL                 FACT_RECEIVER.RETAIL%TYPE,
    TOTAL_QTY              FACT_RECEIVER.TOTAL_QTY%TYPE,
    TOTAL_RETAIL           FACT_RECEIVER.TOTAL_RETAIL%TYPE,
    TOTAL_COST             FACT_RECEIVER.TOTAL_COST%TYPE,
    --RECEIVER_RAW COLUMNS
    RECEIVER_NUMBER        RECEIVER_RAW.RECEIVER_NUMBER%TYPE,
--    ASN_NUMBER             RECEIVER_RAW.ASN_NUMBER%TYPE,

    LOC_ATTR1              RECEIVER_RAW.LOC_ATTR1%TYPE,
    LOC_ATTR2              RECEIVER_RAW.LOC_ATTR2%TYPE,
    LOC_ATTR3              RECEIVER_RAW.LOC_ATTR3%TYPE,
    LOC_ATTR4              RECEIVER_RAW.LOC_ATTR4%TYPE,
    LOC_ATTR5              RECEIVER_RAW.LOC_ATTR5%TYPE,
    LOC_ATTR6              RECEIVER_RAW.LOC_ATTR6%TYPE,
    LOC_ATTR7              RECEIVER_RAW.LOC_ATTR7%TYPE,
    LOC_ATTR8              RECEIVER_RAW.LOC_ATTR8%TYPE,
    LOC_ATTR9              RECEIVER_RAW.LOC_ATTR9%TYPE,
    LOC_ATTR10             RECEIVER_RAW.LOC_ATTR10%TYPE,

    TOTAL_DIST_INDICATOR   RECEIVER_RAW.TOTAL_DIST_INDICATOR%TYPE,

    START_DATE             RECEIVER_RAW.START_DATE%TYPE,
    CANCEL_DATE            RECEIVER_RAW.CANCEL_DATE%TYPE,
    IN_DC_DATE             RECEIVER_RAW.IN_DC_DATE%TYPE,

    VENDOR_REF_NUMBER      RECEIVER_RAW.VENDOR_REF_NUMBER%TYPE,
    STYLE_NUMBER           RECEIVER_RAW.STYLE_NUMBER%TYPE,
    COLOR_CODE             RECEIVER_RAW.COLOR_CODE%TYPE,
    SIZE_CODE              RECEIVER_RAW.SIZE_CODE%TYPE,
    STYLE_YEAR             RECEIVER_RAW.STYLE_YEAR%TYPE,
    STYLE_SEASON           RECEIVER_RAW.STYLE_SEASON%TYPE,
    GOLDEN_PACKAGE_CODE    RECEIVER_RAW.GOLDEN_PACKAGE_CODE%TYPE,

    ACTION_FLAG            RECEIVER_RAW.ACTION_FLAG%TYPE,

    --FACT_ERROR_LOG COLUMNS
    LOG_DATE     FACT_ERROR_LOG.LOG_DATE%TYPE,
    UPLOAD_ID    FACT_ERROR_LOG.UPLOAD_ID%TYPE,
    FILE_ROW_NUM FACT_ERROR_LOG.FILE_ROW_NUM%TYPE,
    ERROR_ID     FACT_ERROR_LOG.ERROR_ID%TYPE,
    FIELD_VALUE  FACT_ERROR_LOG.FIELD_VALUE%TYPE);

  TYPE NNT_RECEIVER IS TABLE OF REC_RECEIVER;

  TYPE RECEIVER_RAW_CURSOR IS REF CURSOR RETURN RECEIVER_RAW%ROWTYPE;

  FUNCTION RESULTSET_RECEIVER(P_RECEIVER_RAW_CUR IN RECEIVER_RAW_CURSOR)
    RETURN NNT_RECEIVER
    PIPELINED
    PARALLEL_ENABLE(PARTITION P_RECEIVER_RAW_CUR BY ANY);

  PROCEDURE POPULATE_RECEIVER(P_UPLOAD_ID RECEIVER_RAW.UPLOAD_ID%TYPE);

END ALLOCATE_POPULATE_PACK;
/
CREATE OR REPLACE PACKAGE BODY ALLOCATE_POPULATE_PACK IS
  C_DELIMITER          CONSTANT CHAR := '-';
  C_MAX_ROWS_PER_FETCH CONSTANT PLS_INTEGER := 100000;
  C_DUMMY              CONSTANT VARCHAR2(10) := 'DUMMY';

  C_STATUS_INVALID   CONSTANT VARCHAR2(30) := 'INVALIDATED';
  C_STATUS_BREAKDOWN CONSTANT VARCHAR2(30) := 'BREAKDOWN';
  C_STATUS_READY     CONSTANT VARCHAR2(30) := 'READY';
  C_STATUS_RELEASED  CONSTANT VARCHAR2(30) := 'RELEASED';
  C_STATUS_APO       CONSTANT VARCHAR2(30) := 'APO';

  C_PREPACK_TYPE_OPENSTOCK CONSTANT VARCHAR2(30) := 'OPENSTOCK';
  C_PREPACK_TYPE_PO        CONSTANT VARCHAR2(30) := 'PO';
  C_PREPACK_TYPE_ASN       CONSTANT VARCHAR2(30) := 'ASN';
  C_PREPACK_TYPE_RECEIVER  CONSTANT VARCHAR2(30) := 'RECEIVER';

  C_STORE_DIM CONSTANT VARCHAR2(10) := 'STORE';

  TYPE LOC_ARRAY IS VARRAY(10) OF VARCHAR2(40);

  TYPE REC_STORE_ATTRS IS RECORD(
    LOC_ATTRS            LOC_ARRAY,
    TOTAL_DIST_INDICATOR ASN_RAW.TOTAL_DIST_INDICATOR%TYPE);

  TYPE NNT_CACHE IS TABLE OF NUMBER(8) INDEX BY VARCHAR2(60);
  L_CACHE_STORE_LOC           NNT_CACHE;
  L_CACHE_ERROR               NNT_CACHE;
  L_CACHE_VENDOR              NNT_CACHE;
  L_CACHE_STYLE               NNT_CACHE;
  L_CACHE_STYLE_COLOR         NNT_CACHE;
  L_CACHE_STYLE_COLOR_SIZE    NNT_CACHE;
  L_CACHE_STYLE_COLOR_SIZE_GP NNT_CACHE;

  TYPE NNT_CACHE_YS IS TABLE OF VARCHAR2(100) INDEX BY PLS_INTEGER;
  L_CACHE_STYLE_YEAR_SEASON NNT_CACHE_YS;

  TYPE NNT_LEVEL_KEYS IS TABLE OF VARCHAR2(30) INDEX BY VARCHAR2(10);
  L_CACHE_TOTAL_INDICATOR NNT_LEVEL_KEYS;

  L_CACHE_YEAR_SEASON NNT_CACHE;
  L_CACHE_STATUS      NNT_CACHE;

  TYPE TEMP_REC IS RECORD(
    ID            NUMBER(8),
    SOURCE_BUSKEY VARCHAR2(60));
  TYPE TEMP_CACHE IS TABLE OF TEMP_REC;
  L_TEMP_CACHE TEMP_CACHE;

--  TYPE NNT_MEASURES IS TABLE OF NUMBER(15, 4);
  TYPE REC_MEASURES IS RECORD(
    COST                   FACT_RECEIVER.COST%TYPE,
    RETAIL                 FACT_RECEIVER.RETAIL%TYPE,
    TOTAL_QTY              FACT_RECEIVER.TOTAL_QTY%TYPE,
    TOTAL_RETAIL           FACT_RECEIVER.TOTAL_RETAIL%TYPE,
    TOTAL_COST             FACT_RECEIVER.TOTAL_COST%TYPE);

  TYPE REC_STYLE_ATTRS IS RECORD(
    VENDOR_REF_NUMBER ASN_RAW.VENDOR_REF_NUMBER%TYPE,
    STYLE_NUMBER      ASN_RAW.STYLE_NUMBER%TYPE,
    COLOR_CODE        ASN_RAW.COLOR_CODE%TYPE,
    SIZE_CODE         ASN_RAW.SIZE_CODE%TYPE,
    PREPACK_CODE      ASN_RAW.GOLDEN_PACKAGE_CODE%TYPE,
    PREPACK_TYPE      DIM_STYLE_COLOR_SIZE_GP.PREPACK_TYPE%TYPE);

  TYPE REC_YEARSEASON_ATTRS IS RECORD(
    STYLE_YEAR   ASN_RAW.STYLE_YEAR%TYPE,
    STYLE_SEASON ASN_RAW.STYLE_SEASON%TYPE);

  TYPE REC_ASN_ATTRS IS RECORD(
    ASN_NUMBER ASN_RAW.ASN_NUMBER%TYPE
    /*,PO_NUMBER  ASN_RAW.PO_NUMBER%TYPE*/
    );

  TYPE REC_RECEIVER_ATTRS IS RECORD(
    /*ASN_NUMBER      RECEIVER_RAW.ASN_NUMBER%TYPE,*/
    RECEIVER_NUMBER RECEIVER_RAW.RECEIVER_NUMBER%TYPE);

  TYPE TEMP_REC_GP IS RECORD(
       SOURCE_BUSKEY      VARCHAR2(60),
       IDS                NNT_IDS);
  TYPE TEMP_CACHE_GP IS TABLE OF TEMP_REC_GP;
  L_TEMP_CACHE_GP TEMP_CACHE_GP;

  TYPE NNT_CACHE_GP IS TABLE OF NNT_IDS INDEX BY VARCHAR2(60);
  L_CACHE_STYLE_GP_SIZE    NNT_CACHE_GP;

  L_STATUS_INVALID_ID   DIM_COMMON.COMMON_ID%TYPE;
  L_STATUS_BREAKDOWN_ID DIM_COMMON.COMMON_ID%TYPE;
  L_STATUS_READY_ID     DIM_COMMON.COMMON_ID%TYPE;
  L_STATUS_APO_ID       DIM_COMMON.COMMON_ID%TYPE;
  L_STATUS_RELEASED_ID  DIM_COMMON.COMMON_ID%TYPE;

  TYPE TEMP_REC_RATIO IS RECORD(
       STYLE_COLOR_SIZE_GP_ID DIM_STYLE_COLOR_SIZE_GP.STYLE_COLOR_SIZE_GP_ID%TYPE,
       RATIO                  DIM_GP_SIZE.RATIO%TYPE,
       TOTAL_RATIO            NUMBER(7,4));

  TYPE TEMP_CACHE_RATIO IS TABLE OF TEMP_REC_RATIO;
  L_TEMP_CACHE_RATIO    TEMP_CACHE_RATIO;

  TYPE REC_RATIO IS RECORD(
       RATIO                  DIM_GP_SIZE.RATIO%TYPE,
       TOTAL_RATIO            NUMBER(5,4));
  TYPE NNT_CACHE_RATIO IS TABLE OF REC_RATIO INDEX BY VARCHAR2(60);
  L_CACHE_RATIO        NNT_CACHE_RATIO;


  --VALIDATE STYLE
  --this procedure validate all styles regardless it is OPENSTOCK or GOLDEN PACKAGE
  --
  PROCEDURE VALIDATE_STYLE(P_REC_STYLE_ATTRS         REC_STYLE_ATTRS,
                           P_STYLE_COLOR_SIZE_GP_IDS IN OUT NNT_IDS,
                           P_STYLE_COLOR_ID          IN OUT DIM_STYLE_COLOR.STYLE_COLOR_ID%TYPE) IS
    L_SOURCE_BUSKEY       DIM_STYLE_COLOR_SIZE_GP.SOURCE_BUSKEY%TYPE;

  BEGIN
    --STYLE_NUMBER
    IF P_REC_STYLE_ATTRS.STYLE_NUMBER IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_NUMBER_BLANK, '');
    END IF;

    --COLOR_CODE
    IF P_REC_STYLE_ATTRS.COLOR_CODE IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_COLOR_CODE_BLANK, '');
    END IF;

    --VENDOR_REF_NUMBER
    IF P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_VENDOR_REF_NUM_BLANK,'');
    END IF;

    --validate for openstock
    IF P_REC_STYLE_ATTRS.PREPACK_TYPE=C_PREPACK_TYPE_OPENSTOCK THEN
      --SIZE_CODE
      IF P_REC_STYLE_ATTRS.SIZE_CODE IS NULL THEN
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_SIZE_CODE_BLANK, '');
      END IF;

      L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                      C_DELIMITER||
                      P_REC_STYLE_ATTRS.STYLE_NUMBER ||
                      C_DELIMITER ||
                      P_REC_STYLE_ATTRS.COLOR_CODE||
                      C_DELIMITER ||
                      P_REC_STYLE_ATTRS.SIZE_CODE||
                      C_DELIMITER ||
                      P_REC_STYLE_ATTRS.PREPACK_CODE ||
                      C_DELIMITER ||
                      P_REC_STYLE_ATTRS.PREPACK_TYPE);

      IF NOT L_CACHE_STYLE_COLOR_SIZE_GP.EXISTS(L_SOURCE_BUSKEY) THEN
        L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                        C_DELIMITER||
                           P_REC_STYLE_ATTRS.STYLE_NUMBER ||
                           C_DELIMITER ||
                           P_REC_STYLE_ATTRS.COLOR_CODE ||
                           C_DELIMITER ||
                           P_REC_STYLE_ATTRS.SIZE_CODE);

        IF NOT L_CACHE_STYLE_COLOR_SIZE.EXISTS(L_SOURCE_BUSKEY) THEN

          L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                                   C_DELIMITER||
                                   P_REC_STYLE_ATTRS.STYLE_NUMBER ||
                                   C_DELIMITER ||
                                   P_REC_STYLE_ATTRS.COLOR_CODE);
          IF NOT L_CACHE_STYLE_COLOR.EXISTS(L_SOURCE_BUSKEY) THEN
            L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                                   C_DELIMITER||P_REC_STYLE_ATTRS.STYLE_NUMBER);
            IF NOT L_CACHE_STYLE.EXISTS(L_SOURCE_BUSKEY) THEN
              L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER);
              IF NOT L_CACHE_VENDOR.EXISTS(L_SOURCE_BUSKEY) THEN
                RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_VENDOR_REF_NUM_NOTEXIST,L_SOURCE_BUSKEY);
              ELSE
                 RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_NUMBER_NOTEXIST,UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                                   C_DELIMITER||P_REC_STYLE_ATTRS.STYLE_NUMBER));
              END IF;
            END IF;

            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_COLOR_CODE_NOTEXIST,
                                    UPPER(P_REC_STYLE_ATTRS.COLOR_CODE));
          END IF;

          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_SIZE_CODE_NOTEXIST,
                                  UPPER(P_REC_STYLE_ATTRS.SIZE_CODE));
        END IF;
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_GP_CODE_NOTEXIST,
                                P_REC_STYLE_ATTRS.PREPACK_CODE);
      ELSE
        P_STYLE_COLOR_SIZE_GP_IDS := NNT_IDS(L_CACHE_STYLE_COLOR_SIZE_GP(L_SOURCE_BUSKEY));

        L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                                   C_DELIMITER||
                                   P_REC_STYLE_ATTRS.STYLE_NUMBER ||
                                   C_DELIMITER ||
                                   P_REC_STYLE_ATTRS.COLOR_CODE);
        P_STYLE_COLOR_ID := L_CACHE_STYLE_COLOR(L_SOURCE_BUSKEY);
      END IF;
    ELSE  --VALIDATE FOR GOLDPACKAGE
      L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                      C_DELIMITER||
                      P_REC_STYLE_ATTRS.STYLE_NUMBER ||
                      C_DELIMITER ||
                      P_REC_STYLE_ATTRS.COLOR_CODE||
                      C_DELIMITER ||
                      P_REC_STYLE_ATTRS.PREPACK_CODE ||
                      C_DELIMITER ||
                      P_REC_STYLE_ATTRS.PREPACK_TYPE);

      IF NOT L_CACHE_STYLE_GP_SIZE.EXISTS(L_SOURCE_BUSKEY) THEN
        L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                                   C_DELIMITER||
                                   P_REC_STYLE_ATTRS.STYLE_NUMBER ||
                                   C_DELIMITER ||
                                   P_REC_STYLE_ATTRS.COLOR_CODE);

          IF NOT L_CACHE_STYLE_COLOR.EXISTS(L_SOURCE_BUSKEY) THEN
            L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                                   C_DELIMITER||P_REC_STYLE_ATTRS.STYLE_NUMBER);
            IF NOT L_CACHE_STYLE.EXISTS(L_SOURCE_BUSKEY) THEN
              L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER);
              IF NOT L_CACHE_VENDOR.EXISTS(L_SOURCE_BUSKEY) THEN
                RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_VENDOR_REF_NUM_NOTEXIST,L_SOURCE_BUSKEY);
              ELSE
                 RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_NUMBER_NOTEXIST,UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                                   C_DELIMITER||P_REC_STYLE_ATTRS.STYLE_NUMBER));
              END IF;
            END IF;

            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_COLOR_CODE_NOTEXIST,
                                    UPPER(P_REC_STYLE_ATTRS.COLOR_CODE));
          END IF;

          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_GP_CODE_NOTEXIST,
                                P_REC_STYLE_ATTRS.PREPACK_CODE);

      ELSE
        P_STYLE_COLOR_SIZE_GP_IDS := L_CACHE_STYLE_GP_SIZE(L_SOURCE_BUSKEY);

        L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER||
                                   C_DELIMITER||
                                   P_REC_STYLE_ATTRS.STYLE_NUMBER ||
                                   C_DELIMITER ||
                                   P_REC_STYLE_ATTRS.COLOR_CODE);
        P_STYLE_COLOR_ID := L_CACHE_STYLE_COLOR(L_SOURCE_BUSKEY);
      END IF;
    END IF;
  END VALIDATE_STYLE;

  --VALIDATE COUNTRY/DC/STOCKCATEGORY
  PROCEDURE VALIDATE_STORE(P_REC_STORE_ATTRS REC_STORE_ATTRS,
                           P_STORE_LOC_ID    IN OUT DIM_STORE_LOC.STORE_LOC_ID%TYPE) IS
    L_UPLOAD_FORMAT_SETUP VARCHAR2(30);
    L_SOURCE_BUSKEY       DIM_STORE_LOC.SOURCE_BUSKEY%TYPE;
    C_KEY_DELIMITER CONSTANT CHAR := ',';
  BEGIN
    P_STORE_LOC_ID := 0;

    IF P_REC_STORE_ATTRS.TOTAL_DIST_INDICATOR IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_TOTAL_INDICATOR_BLANK,
                              '');
    ELSIF NOT
           L_CACHE_TOTAL_INDICATOR.EXISTS(UPPER(P_REC_STORE_ATTRS.TOTAL_DIST_INDICATOR)) THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_TOTAL_INDICATOR_NOTEXIST,
                              P_REC_STORE_ATTRS.TOTAL_DIST_INDICATOR);
    ELSE
      L_UPLOAD_FORMAT_SETUP := L_CACHE_TOTAL_INDICATOR(UPPER(P_REC_STORE_ATTRS.TOTAL_DIST_INDICATOR));

      FOR ITEM IN (SELECT O.LEVEL_ID
                     FROM (SELECT LEVEL LEVEL_ID
                             FROM DUAL
                           CONNECT BY LEVEL <= 10) O
                    WHERE C_KEY_DELIMITER || L_UPLOAD_FORMAT_SETUP ||
                          C_KEY_DELIMITER LIKE
                          '%' || C_KEY_DELIMITER || TO_CHAR(LEVEL_ID) ||
                          C_KEY_DELIMITER || '%'
                    ORDER BY INSTR(L_UPLOAD_FORMAT_SETUP,
                                   TO_CHAR(O.LEVEL_ID))) LOOP
        IF P_REC_STORE_ATTRS.LOC_ATTRS(ITEM.LEVEL_ID) IS NULL THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_LOC_ATTR_BLANK,
                                  ITEM.LEVEL_ID);
        ELSE
          L_SOURCE_BUSKEY := L_SOURCE_BUSKEY || CASE
                               WHEN L_SOURCE_BUSKEY IS NULL THEN
                                UPPER(P_REC_STORE_ATTRS.LOC_ATTRS(ITEM.LEVEL_ID))
                               ELSE
                                C_DELIMITER ||
                                UPPER(P_REC_STORE_ATTRS.LOC_ATTRS(ITEM.LEVEL_ID))
                             END;
        END IF;
      END LOOP;

      IF NOT L_CACHE_STORE_LOC.EXISTS(L_SOURCE_BUSKEY) THEN
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_COMBINED_LOC_NOTEXIST,L_UPLOAD_FORMAT_SETUP||':'||L_SOURCE_BUSKEY);
      ELSE
        P_STORE_LOC_ID := L_CACHE_STORE_LOC(L_SOURCE_BUSKEY);
      END IF;

    END IF;

  END VALIDATE_STORE;

  --VALIDATE MEASURES
  PROCEDURE VALIDATE_MEASURES(P_REC_MEASURES REC_MEASURES) IS
  BEGIN
    IF P_REC_MEASURES.TOTAL_QTY IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_TOTAL_QTY_BLANK, '');
    ELSIF P_REC_MEASURES.TOTAL_QTY<0 THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_TOTAL_QTY_NEGATIVE, P_REC_MEASURES.TOTAL_QTY);
    END IF;

    IF P_REC_MEASURES.TOTAL_RETAIL IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_TOTAL_RETAIL_BLANK, '');
    ELSIF P_REC_MEASURES.TOTAL_RETAIL <0 THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_TOTAL_RETAIL_NEGATIVE, P_REC_MEASURES.TOTAL_RETAIL);
    END IF;

  END VALIDATE_MEASURES;

  --VALIDATE MISC DATE
  PROCEDURE VALIDATE_MISC_DATES(P_START_DATE_RAW     PO_RAW.START_DATE%TYPE,
                                P_CANCEL_DATE_RAW    PO_RAW.CANCEL_DATE%TYPE,
                                P_IN_DC_DATE_RAW     PO_RAW.IN_DC_DATE%TYPE,
                                P_START_DT           OUT FACT_PO.START_DT%TYPE,
                                P_CANCEL_DT          OUT FACT_PO.CANCEL_DT%TYPE,
                                P_IN_DC_DT           OUT FACT_PO.IN_DC_DT%TYPE) IS
  BEGIN

    IF P_START_DATE_RAW IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_START_DATE_BLANK, '');
    ELSE
      BEGIN
        P_START_DT := TO_NUMBER(TO_CHAR(TO_DATE(P_START_DATE_RAW,
                                                'YYYYMMDD'),
                                        'YYYYMMDD'));
      EXCEPTION
        WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_START_DATE_INCORRECT,
                                  P_START_DATE_RAW);
      END;
    END IF;

    --CANCEL DATE IS NOT REQUIRED, SET IT TO DEFAULT

    BEGIN
      P_CANCEL_DT := TO_NUMBER(TO_CHAR(TO_DATE(NVL(P_CANCEL_DATE_RAW,'99991231'), 'YYYYMMDD'),
                                    'YYYYMMDD'));
    EXCEPTION
      WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_CANCEL_DATE_INCORRECT,
                                P_CANCEL_DATE_RAW);
    END;


    IF P_IN_DC_DATE_RAW IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_IN_DC_DATE_BLANK, '');
    ELSE
      BEGIN
        P_IN_DC_DT := TO_NUMBER(TO_CHAR(TO_DATE(P_IN_DC_DATE_RAW,
                                                    'YYYYMMDD'),
                                            'YYYYMMDD'));
      EXCEPTION
        WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_IN_DC_DATE_INCORRECT,
                                  P_IN_DC_DATE_RAW);
      END;
    END IF;

    IF P_START_DT > P_CANCEL_DT  THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_START_DT_LARGER_CANCEL_DT,P_START_DATE_RAW);
    END IF;
  END VALIDATE_MISC_DATES;

  --VALIDATE STYLE YEAR SEASON
  PROCEDURE VALIDATE_STYLE_YEAR_SEASON(P_STYLE_COLOR_ID       IN DIM_STYLE_COLOR.STYLE_COLOR_ID%TYPE,
                                       P_YEAR_SEASON_ID       IN DIM_YEAR_SEASON.YEAR_SEASON_ID%TYPE,
                                       P_REC_YEARSEASON_ATTRS REC_YEARSEASON_ATTRS,
                                       P_REC_PROD_ATTRS       REC_STYLE_ATTRS) IS
    L_SOURCE_BUSKEY    DIM_STYLE_YEAR_SEASON.SOURCE_BUSKEY%TYPE;
    L_YEAR_SEASON_LIST VARCHAR2(100);
  BEGIN
    L_SOURCE_BUSKEY := UPPER(P_REC_PROD_ATTRS.STYLE_NUMBER || C_DELIMITER ||
                             P_REC_PROD_ATTRS.COLOR_CODE || C_DELIMITER ||
                             P_REC_YEARSEASON_ATTRS.STYLE_YEAR ||
                             C_DELIMITER ||
                             P_REC_YEARSEASON_ATTRS.STYLE_SEASON);

    L_YEAR_SEASON_LIST := L_CACHE_STYLE_YEAR_SEASON(P_STYLE_COLOR_ID);

    IF NOT INSTR(',' || L_YEAR_SEASON_LIST || ',',
                 ',' || TO_CHAR(P_YEAR_SEASON_ID) || ',') > 0 THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_YEAR_SEASON_NOTEXIST,
                              L_SOURCE_BUSKEY);
    END IF;
  END VALIDATE_STYLE_YEAR_SEASON;

  --************************************************PO**********************************

  --VALIDATE PO
  PROCEDURE VALIDATE_PO(P_PO_NUMBER    PO_RAW.PO_NUMBER%TYPE) IS
  BEGIN

    IF P_PO_NUMBER IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_PO_BLANK, '');

    END IF;
  END VALIDATE_PO;

  --VALIDATE YEAR SEASON
  PROCEDURE VALIDATE_YEARSEASON(P_REC_YEARSEASON_ATTRS REC_YEARSEASON_ATTRS,
                                P_YEAR_SEASON_ID       OUT DIM_YEAR_SEASON.YEAR_SEASON_ID%TYPE) IS
    L_SOURCE_BUSKEY DIM_YEAR_SEASON.SOURCE_BUSKEY%TYPE;
  BEGIN
    P_YEAR_SEASON_ID := 0;
    --STYLE YEAR
    IF P_REC_YEARSEASON_ATTRS.STYLE_YEAR IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_YEAR_BLANK, '');
    END IF;

    --STYLE SEASON
    IF P_REC_YEARSEASON_ATTRS.STYLE_SEASON IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_SEASON_BLANK, '');
    END IF;

    L_SOURCE_BUSKEY := UPPER(P_REC_YEARSEASON_ATTRS.STYLE_YEAR ||
                             C_DELIMITER ||
                             P_REC_YEARSEASON_ATTRS.STYLE_SEASON);

    IF NOT L_CACHE_YEAR_SEASON.EXISTS(L_SOURCE_BUSKEY) THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_YEAR_SEASON_NOTEXIST,
                              L_SOURCE_BUSKEY);
    ELSE
      P_YEAR_SEASON_ID := L_CACHE_YEAR_SEASON(L_SOURCE_BUSKEY);
    END IF;

  END VALIDATE_YEARSEASON;

  FUNCTION RESULTSET_PO(P_PO_RAW_CUR IN PO_RAW_CURSOR) RETURN NNT_PO
    PIPELINED
    PARALLEL_ENABLE(PARTITION P_PO_RAW_CUR BY ANY) IS

    TYPE NNT_PO_RAW IS TABLE OF PO_RAW%ROWTYPE;
    L_CACHE_PO_RAW NNT_PO_RAW;
    L_REC_PO       REC_PO;

    L_REC_STYLE_ATTRS      REC_STYLE_ATTRS;
    L_REC_STORE_ATTRS      REC_STORE_ATTRS;
    L_REC_YEARSEASON_ATTRS REC_YEARSEASON_ATTRS;
    L_REC_MEASURES         REC_MEASURES;

    L_STATUS_READY_ID DIM_COMMON.COMMON_ID%TYPE;

    L_LOC_ARRAY LOC_ARRAY := LOC_ARRAY();

    L_STYLE_COLOR_SIZE_GP_IDS NNT_IDS;

    L_RATIO                     NUMBER(7,4);
    L_TOTAL_RATIO               NUMBER(7,4);

  BEGIN
    L_STATUS_READY_ID := L_CACHE_STATUS(C_STATUS_READY);

    LOOP
      FETCH P_PO_RAW_CUR BULK COLLECT
        INTO L_CACHE_PO_RAW LIMIT C_MAX_ROWS_PER_FETCH;
      EXIT WHEN L_CACHE_PO_RAW.COUNT = 0;

      FOR I IN L_CACHE_PO_RAW.FIRST .. L_CACHE_PO_RAW.LAST LOOP
        BEGIN
          L_STYLE_COLOR_SIZE_GP_IDS    := NNT_IDS();
          L_REC_PO.PO_NUMBER           := UPPER(L_CACHE_PO_RAW(I).PO_NUMBER);
          L_REC_PO.VENDOR_REF_NUMBER   := UPPER(L_CACHE_PO_RAW(I).VENDOR_REF_NUMBER);
          L_REC_PO.STYLE_NUMBER        := UPPER(L_CACHE_PO_RAW(I).STYLE_NUMBER);
          L_REC_PO.COLOR_CODE          := UPPER(L_CACHE_PO_RAW(I).COLOR_CODE);
          L_REC_PO.SIZE_CODE           := UPPER(L_CACHE_PO_RAW(I).SIZE_CODE);
          L_REC_PO.STYLE_YEAR          := UPPER(L_CACHE_PO_RAW(I).STYLE_YEAR);
          L_REC_PO.STYLE_SEASON        := UPPER(L_CACHE_PO_RAW(I).STYLE_SEASON);
          L_REC_PO.GOLDEN_PACKAGE_CODE := UPPER(L_CACHE_PO_RAW(I).GOLDEN_PACKAGE_CODE);
          L_REC_PO.LOC_ATTR1           := UPPER(L_CACHE_PO_RAW(I).LOC_ATTR1);
          L_REC_PO.LOC_ATTR2           := UPPER(L_CACHE_PO_RAW(I).LOC_ATTR2);
          L_REC_PO.LOC_ATTR3           := UPPER(L_CACHE_PO_RAW(I).LOC_ATTR3);
          L_REC_PO.LOC_ATTR4           := UPPER(L_CACHE_PO_RAW(I).LOC_ATTR4);
          L_REC_PO.LOC_ATTR5           := UPPER(L_CACHE_PO_RAW(I).LOC_ATTR5);
          L_REC_PO.LOC_ATTR6           := UPPER(L_CACHE_PO_RAW(I).LOC_ATTR6);
          L_REC_PO.LOC_ATTR7           := UPPER(L_CACHE_PO_RAW(I).LOC_ATTR7);
          L_REC_PO.LOC_ATTR8           := UPPER(L_CACHE_PO_RAW(I).LOC_ATTR8);
          L_REC_PO.LOC_ATTR9           := UPPER(L_CACHE_PO_RAW(I).LOC_ATTR9);
          L_REC_PO.LOC_ATTR10          := UPPER(L_CACHE_PO_RAW(I).LOC_ATTR10);

          L_REC_PO.START_DATE             := L_CACHE_PO_RAW(I).START_DATE;
          L_REC_PO.CANCEL_DATE            := L_CACHE_PO_RAW(I).CANCEL_DATE;
          L_REC_PO.IN_DC_DATE             := L_CACHE_PO_RAW(I).IN_DC_DATE;
          L_REC_PO.TOTAL_DIST_INDICATOR   := UPPER(L_CACHE_PO_RAW(I).TOTAL_DIST_INDICATOR);
          L_REC_PO.COST                   := NVL(L_CACHE_PO_RAW(I).COST,0);
          L_REC_PO.RETAIL                 := NVL(L_CACHE_PO_RAW(I).RETAIL,0);
          L_REC_PO.TOTAL_QTY              := L_CACHE_PO_RAW(I).TOTAL_QTY;
          L_REC_PO.TOTAL_RETAIL           := L_CACHE_PO_RAW(I).TOTAL_RETAIL;
          L_REC_PO.TOTAL_COST             := NVL(L_CACHE_PO_RAW(I).TOTAL_COST,0);
          L_REC_PO.FILE_ROW_NUM           := L_CACHE_PO_RAW(I).FILE_ROW_NUM;
          L_REC_PO.ACTION_FLAG            := NVL(UPPER(L_CACHE_PO_RAW(I).ACTION_FLAG),'A');
          L_REC_PO.TRANS_BUSKEY           := 'P' ||TO_CHAR(SEQ_TRANS_PO.NEXTVAL);

          L_REC_PO.STYLE_COLOR_SIZE_GP_ID := 0;
          L_REC_PO.STYLE_COLOR_ID         := 0;
          L_REC_PO.STORE_LOC_ID           := 0;
          L_REC_PO.STATUS_ID              := L_STATUS_READY_ID;
          L_REC_PO.START_DT               := 0;
          L_REC_PO.CANCEL_DT              := 0;
          L_REC_PO.IN_DC_DT               := 0;

          L_REC_PO.LOG_DATE     := SYSDATE;
          L_REC_PO.UPLOAD_ID    := L_CACHE_PO_RAW(I).UPLOAD_ID;
          L_REC_PO.FILE_ROW_NUM := L_CACHE_PO_RAW(I).FILE_ROW_NUM;
          L_REC_PO.ERROR_ID     := 0;
          L_REC_PO.FIELD_VALUE  := '0';

          L_REC_MEASURES.COST         := L_REC_PO.COST;
          L_REC_MEASURES.RETAIL       := L_REC_PO.RETAIL;
          L_REC_MEASURES.TOTAL_QTY    := L_REC_PO.TOTAL_QTY;
          L_REC_MEASURES.TOTAL_RETAIL := L_REC_PO.TOTAL_RETAIL;
          L_REC_MEASURES.TOTAL_COST   := L_REC_PO.TOTAL_COST;
          VALIDATE_MEASURES(L_REC_MEASURES);

          VALIDATE_PO(L_REC_PO.PO_NUMBER);

          L_REC_STYLE_ATTRS.VENDOR_REF_NUMBER := L_REC_PO.VENDOR_REF_NUMBER;
          L_REC_STYLE_ATTRS.STYLE_NUMBER      := L_REC_PO.STYLE_NUMBER;
          L_REC_STYLE_ATTRS.COLOR_CODE        := L_REC_PO.COLOR_CODE;
          L_REC_STYLE_ATTRS.SIZE_CODE         := L_REC_PO.SIZE_CODE;
          L_REC_STYLE_ATTRS.PREPACK_CODE      := NVL(L_REC_PO.GOLDEN_PACKAGE_CODE,C_DUMMY);
          L_REC_STYLE_ATTRS.PREPACK_TYPE := CASE
                                              WHEN L_REC_PO.GOLDEN_PACKAGE_CODE IS NULL THEN
                                               C_PREPACK_TYPE_OPENSTOCK
                                              ELSE
                                               C_PREPACK_TYPE_PO
                                            END;
          VALIDATE_STYLE(L_REC_STYLE_ATTRS,
                       --L_REC_PO.STYLE_COLOR_SIZE_GP_ID,
                         L_STYLE_COLOR_SIZE_GP_IDS,
                         L_REC_PO.STYLE_COLOR_ID);

          L_LOC_ARRAY :=LOC_ARRAY(L_REC_PO.LOC_ATTR1
                      ,L_REC_PO.LOC_ATTR2
                      ,L_REC_PO.LOC_ATTR3
                      ,L_REC_PO.LOC_ATTR4
                      ,L_REC_PO.LOC_ATTR5
                      ,L_REC_PO.LOC_ATTR6
                      ,L_REC_PO.LOC_ATTR7
                      ,L_REC_PO.LOC_ATTR8
                      ,L_REC_PO.LOC_ATTR9
                      ,L_REC_PO.LOC_ATTR10);

          L_REC_STORE_ATTRS.LOC_ATTRS            := L_LOC_ARRAY;
          L_REC_STORE_ATTRS.TOTAL_DIST_INDICATOR := L_REC_PO.TOTAL_DIST_INDICATOR;
          VALIDATE_STORE(L_REC_STORE_ATTRS, L_REC_PO.STORE_LOC_ID);

          L_REC_YEARSEASON_ATTRS.STYLE_YEAR   := L_REC_PO.STYLE_YEAR;
          L_REC_YEARSEASON_ATTRS.STYLE_SEASON := L_REC_PO.STYLE_SEASON;
          VALIDATE_YEARSEASON(L_REC_YEARSEASON_ATTRS,
                              L_REC_PO.YEAR_SEASON_ID);

          VALIDATE_STYLE_YEAR_SEASON(L_REC_PO.STYLE_COLOR_ID,
                                     L_REC_PO.YEAR_SEASON_ID,
                                     L_REC_YEARSEASON_ATTRS,
                                     L_REC_STYLE_ATTRS);

          VALIDATE_MISC_DATES(L_REC_PO.START_DATE,
                              L_REC_PO.CANCEL_DATE,
                              L_REC_PO.IN_DC_DATE,
                              L_REC_PO.START_DT,
                              L_REC_PO.CANCEL_DT,
                              L_REC_PO.IN_DC_DT);

          FOR J IN L_STYLE_COLOR_SIZE_GP_IDS.FIRST .. L_STYLE_COLOR_SIZE_GP_IDS.LAST LOOP
            L_REC_PO.STYLE_COLOR_SIZE_GP_ID:=L_STYLE_COLOR_SIZE_GP_IDS(J);
            L_RATIO                        :=L_CACHE_RATIO(L_REC_PO.STYLE_COLOR_SIZE_GP_ID).RATIO;
            L_TOTAL_RATIO                  :=L_CACHE_RATIO(L_REC_PO.STYLE_COLOR_SIZE_GP_ID).TOTAL_RATIO;

            L_REC_PO.TOTAL_QTY             :=NVL(L_CACHE_PO_RAW(I).TOTAL_QTY,0)*L_RATIO;
            L_REC_PO.TOTAL_RETAIL          :=NVL(L_CACHE_PO_RAW(I).TOTAL_RETAIL,0)*L_TOTAL_RATIO;
            L_REC_PO.TOTAL_COST            :=NVL(L_CACHE_PO_RAW(I).TOTAL_COST,0)*L_TOTAL_RATIO;

            PIPE ROW(L_REC_PO);
          END LOOP;

        EXCEPTION
          WHEN OTHERS THEN
            BEGIN
              L_REC_PO.FIELD_VALUE := REGEXP_REPLACE(SQLERRM,
                                                     'ORA-[[:digit:]]{5}: ',
                                                     '');
              L_REC_PO.ERROR_ID    := L_CACHE_ERROR(SQLCODE);
              PIPE ROW(L_REC_PO);
            END;
        END;
      END LOOP;

    END LOOP;

  END RESULTSET_PO;

  --This is an sub procedure for populating po at country level
  PROCEDURE POPULATE_FACT_PO IS
  BEGIN


    --1,handle D FOR COUNTRY AND EXIST IN FACT
    --D+EXIST(BREAKDOWN/READY)--UPDATE
    UPDATE FACT_PO T
       SET T.STATUS_ID = L_STATUS_INVALID_ID
     WHERE EXISTS
     (SELECT 1
              FROM FACT_PO_STEP2_TEMP S
             WHERE S.STORE_LOC_ID > 0
               AND S.ACTION_FLAG = 'D'
               AND S.PO_NUMBER = T.PO_NUMBER
               AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
               AND S.STORE_LOC_ID = T.STORE_LOC_ID
               AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID)
       AND T.STATUS_ID IN (L_STATUS_BREAKDOWN_ID, L_STATUS_READY_ID);

    --2,HANDLE A/M FOR COUNTRY AND NOT EXIST IN FACT
    --A/M+NOT EXIST--INSERT
    INSERT INTO FACT_PO
      (TRANS_BUSKEY,
       PO_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       SOURCE_TRANS_BUSKEY,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST)
      SELECT TRANS_BUSKEY,
             PO_NUMBER,
             STYLE_COLOR_SIZE_GP_ID,
             YEAR_SEASON_ID,
             STORE_LOC_ID,
             STATUS_ID,
             C_DUMMY,
             START_DT,
             CANCEL_DT,
             IN_DC_DT,
             COST,
             RETAIL,
             TOTAL_QTY,
             TOTAL_RETAIL,
             TOTAL_COST
        FROM FACT_PO_STEP2_TEMP T
       WHERE T.STORE_LOC_ID > 0
         AND T.ACTION_FLAG IN ('A', 'M')
         AND NOT EXISTS
       (SELECT 1
                FROM FACT_PO S
               WHERE S.PO_NUMBER = T.PO_NUMBER
                 AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
                 AND S.STORE_LOC_ID = T.STORE_LOC_ID
                 AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID);

    --3,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(READY)--UPDATE
    MERGE INTO FACT_PO T
    USING (SELECT *
             FROM FACT_PO_STEP2_TEMP S
            WHERE S.STORE_LOC_ID > 0
              AND S.ACTION_FLAG IN ('A', 'M')) S
    ON (S.PO_NUMBER = T.PO_NUMBER AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID AND S.STORE_LOC_ID = T.STORE_LOC_ID AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID)
    WHEN MATCHED THEN
      UPDATE
         SET T.START_DT     = S.START_DT,
             T.CANCEL_DT    = S.CANCEL_DT,
             T.IN_DC_DT     = S.IN_DC_DT,
             T.COST         = S.COST,
             T.RETAIL       = S.RETAIL,
             T.TOTAL_QTY    = S.TOTAL_QTY,
             T.TOTAL_RETAIL = S.TOTAL_RETAIL,
             T.TOTAL_COST   = S.TOTAL_COST,
             T.TRANS_BUSKEY = S.TRANS_BUSKEY
       WHERE T.STATUS_ID = L_STATUS_READY_ID;

    --4,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(INVALID)--INSERT
    INSERT INTO FACT_PO
      (TRANS_BUSKEY,
       PO_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       SOURCE_TRANS_BUSKEY,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST)
      SELECT TRANS_BUSKEY,
             PO_NUMBER,
             STYLE_COLOR_SIZE_GP_ID,
             YEAR_SEASON_ID,
             STORE_LOC_ID,
             STATUS_ID,
             C_DUMMY,
             START_DT,
             CANCEL_DT,
             IN_DC_DT,
             COST,
             RETAIL,
             TOTAL_QTY,
             TOTAL_RETAIL,
             TOTAL_COST
        FROM FACT_PO_STEP2_TEMP T
       WHERE T.STORE_LOC_ID > 0
         AND T.ACTION_FLAG IN ('A', 'M')
         AND EXISTS
       (SELECT 1
                FROM FACT_PO S
               WHERE S.PO_NUMBER = T.PO_NUMBER
                 AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
                 AND S.STORE_LOC_ID = T.STORE_LOC_ID
                 AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
                 AND S.STATUS_ID = L_STATUS_INVALID_ID);

    --5.1,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(BREAKDOWN)--UPDATE
    UPDATE FACT_PO T
       SET T.STATUS_ID = L_STATUS_INVALID_ID
     WHERE EXISTS
     (SELECT 1
              FROM FACT_PO_STEP2_TEMP S
             WHERE S.STORE_LOC_ID > 0
               AND S.ACTION_FLAG IN ('A', 'M')
               AND S.PO_NUMBER = T.PO_NUMBER
               AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
               AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
               AND S.STORE_LOC_ID = T.STORE_LOC_ID)
       AND T.STATUS_ID = L_STATUS_BREAKDOWN_ID;

    --5.1,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(BREAKDOWN)--INSERT
    INSERT INTO FACT_PO
      (TRANS_BUSKEY,
       PO_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       SOURCE_TRANS_BUSKEY,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST)
      SELECT TRANS_BUSKEY,
             PO_NUMBER,
             STYLE_COLOR_SIZE_GP_ID,
             YEAR_SEASON_ID,
             STORE_LOC_ID,
             STATUS_ID,
             C_DUMMY,
             START_DT,
             CANCEL_DT,
             IN_DC_DT,
             COST,
             RETAIL,
             TOTAL_QTY,
             TOTAL_RETAIL,
             TOTAL_COST
        FROM FACT_PO_STEP2_TEMP T
       WHERE T.STORE_LOC_ID > 0
         AND T.ACTION_FLAG IN ('A', 'M')
         AND EXISTS
       (SELECT 1
                FROM FACT_PO S
               WHERE S.PO_NUMBER = T.PO_NUMBER
                 AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
                 AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
                 AND S.STORE_LOC_ID = T.STORE_LOC_ID
                 AND S.STATUS_ID = L_STATUS_BREAKDOWN_ID);

  END POPULATE_FACT_PO;

  PROCEDURE POPULATE_PO(P_UPLOAD_ID PO_RAW.UPLOAD_ID%TYPE) IS
    L_ROWCOUNT    PLS_INTEGER;
    L_FAILURE_NUM PLS_INTEGER;
    L_NNT_IDS     NNT_IDS := NNT_IDS();

  BEGIN

    INSERT INTO DIM_UPLOAD_TRACKING
      (UPLOAD_ID, UPLOAD_TYPE, AFFECTED_IDS, SUCCEED_NUM, FAILURE_NUM)
    VALUES
      (P_UPLOAD_ID, 'PO', NULL, 0, 0);

    EXECUTE IMMEDIATE '
    INSERT
    ALL WHEN ERROR_ID = 0 THEN INTO FACT_PO_STEP1_TEMP(
      ACTION_FLAG,
      FILE_ROW_NUM,
      TRANS_BUSKEY,
      PO_NUMBER,
      STYLE_COLOR_SIZE_GP_ID,
      YEAR_SEASON_ID,
      STORE_LOC_ID,
      STATUS_ID,
      START_DT,
      CANCEL_DT,
      IN_DC_DT,
      COST,
      RETAIL,
      TOTAL_QTY,
      TOTAL_RETAIL,
      TOTAL_COST)
    VALUES(
      ACTION_FLAG,
      FILE_ROW_NUM,
      TRANS_BUSKEY,
      PO_NUMBER,
      STYLE_COLOR_SIZE_GP_ID,
      YEAR_SEASON_ID,
      STORE_LOC_ID,
      STATUS_ID,
      START_DT,
      CANCEL_DT,
      IN_DC_DT,
      COST,
      RETAIL,
      TOTAL_QTY,
      TOTAL_RETAIL,
      TOTAL_COST)
   ELSE INTO FACT_ERROR_LOG PARTITION FOR(' ||
                      TO_CHAR(P_UPLOAD_ID) || ')
      (DATE_ID,
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
    VALUES
      (TO_NUMBER(TO_CHAR(LOG_DATE,''YYYYMMDD'')),
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
      SELECT /*+PARALLEL*/*
        FROM TABLE(ALLOCATE_POPULATE_PACK.RESULTSET_PO(CURSOR
                                                         (SELECT *
                                                            FROM PO_RAW P
                                                           WHERE UPLOAD_ID=' ||
                      TO_CHAR(P_UPLOAD_ID) || ')))';

    L_ROWCOUNT := SQL%ROWCOUNT;

    --CHECK IF THE PO TO BE DELETED EXISTS OR NOT
    INSERT INTO FACT_ERROR_LOG
      (DATE_ID, UPLOAD_ID, ERROR_ID, FIELD_VALUE, LOG_DATE, FILE_ROW_NUM)
      SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDD')),
             P_UPLOAD_ID UPLOAD_ID,
             L_CACHE_ERROR(DIM_POPULATE_PACK.C_PO_TRANS_NOTEXIST) ERROR_ID,
             FILE_ROW_NUM FIELD_VALUE,
             SYSDATE LOG_DATE,
             FILE_ROW_NUM
        FROM FACT_PO_STEP1_TEMP A
       WHERE NOT EXISTS
       (SELECT 1
                FROM FACT_PO B
               WHERE A.PO_NUMBER = B.PO_NUMBER
                 AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                 AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                 AND A.STORE_LOC_ID = B.STORE_LOC_ID
                 AND B.STATUS_ID IN
                     (L_STATUS_BREAKDOWN_ID, L_STATUS_READY_ID))
         AND A.ACTION_FLAG = 'D';

    DELETE FROM FACT_PO_STEP1_TEMP A
     WHERE NOT EXISTS
     (SELECT 1
              FROM FACT_PO B
             WHERE A.PO_NUMBER = B.PO_NUMBER
               AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
               AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
               AND A.STORE_LOC_ID = B.STORE_LOC_ID
               AND B.STATUS_ID IN (L_STATUS_BREAKDOWN_ID, L_STATUS_READY_ID))
       AND A.ACTION_FLAG = 'D';

    --CHECK IF RELEASED PO EXISTS
    INSERT INTO FACT_ERROR_LOG
      (DATE_ID, UPLOAD_ID, ERROR_ID, FIELD_VALUE, LOG_DATE, FILE_ROW_NUM)
      SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDD')),
             P_UPLOAD_ID UPLOAD_ID,
             L_CACHE_ERROR(DIM_POPULATE_PACK.C_PO_RELEASED_TRANS_EXIST) ERROR_ID,
             FILE_ROW_NUM FIELD_VALUE,
             SYSDATE LOG_DATE,
             FILE_ROW_NUM
        FROM FACT_PO_STEP1_TEMP A
       WHERE A.ACTION_FLAG = 'D'
         AND (EXISTS
              (SELECT 1
                 FROM FACT_PO_RELEASE B
                INNER JOIN DIM_PO_RELEASE C
                   ON B.PO_RELEASE_ID = C.PO_RELEASE_ID
                INNER JOIN DIM_PO_ALLOCATE D
                   ON C.PO_ALLOCATE_ID = D.PO_ALLOCATE_ID
                INNER JOIN DIM_PO_BD_RELEASE E
                   ON D.PO_BD_RELEASE_ID=E.PO_BD_RELEASE_ID
                INNER JOIN DIM_PO_BD F
                   ON E.PO_BD_ID=F.PO_BD_ID
                WHERE A.PO_NUMBER = F.PO_NUMBER
                  AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                  AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                  AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)) OR
              EXISTS
              (SELECT 1
                 FROM FACT_PO_RELEASE_RESERVE B
                INNER JOIN DIM_PO_RELEASE C
                   ON B.PO_RELEASE_ID = C.PO_RELEASE_ID
                INNER JOIN DIM_PO_ALLOCATE D
                   ON C.PO_ALLOCATE_ID = D.PO_ALLOCATE_ID
                INNER JOIN DIM_PO_BD_RELEASE E
                   ON D.PO_BD_RELEASE_ID=E.PO_BD_RELEASE_ID
                INNER JOIN DIM_PO_BD F
                   ON E.PO_BD_ID=F.PO_BD_ID
                WHERE A.PO_NUMBER = F.PO_NUMBER
                  AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                  AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                  AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)));

    DELETE FROM FACT_PO_STEP1_TEMP A
     WHERE A.ACTION_FLAG = 'D'
       AND (EXISTS
            (SELECT 1
               FROM FACT_PO_RELEASE B
              INNER JOIN DIM_PO_RELEASE C
                 ON B.PO_RELEASE_ID = C.PO_RELEASE_ID
              INNER JOIN DIM_PO_ALLOCATE D
                 ON C.PO_ALLOCATE_ID = D.PO_ALLOCATE_ID
                INNER JOIN DIM_PO_BD_RELEASE E
                   ON D.PO_BD_RELEASE_ID=E.PO_BD_RELEASE_ID
                INNER JOIN DIM_PO_BD F
                   ON E.PO_BD_ID=F.PO_BD_ID
                WHERE A.PO_NUMBER = F.PO_NUMBER
                AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)) OR
            EXISTS
            (SELECT 1
               FROM FACT_PO_RELEASE_RESERVE B
              INNER JOIN DIM_PO_RELEASE C
                 ON B.PO_RELEASE_ID = C.PO_RELEASE_ID
              INNER JOIN DIM_PO_ALLOCATE D
                 ON C.PO_ALLOCATE_ID = D.PO_ALLOCATE_ID
                INNER JOIN DIM_PO_BD_RELEASE E
                   ON D.PO_BD_RELEASE_ID=E.PO_BD_RELEASE_ID
                INNER JOIN DIM_PO_BD F
                   ON E.PO_BD_ID=F.PO_BD_ID
                WHERE A.PO_NUMBER = F.PO_NUMBER
                AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)));

    SELECT COUNT(*)
      INTO L_FAILURE_NUM
      FROM FACT_ERROR_LOG
     WHERE UPLOAD_ID = P_UPLOAD_ID;

    UPDATE DIM_UPLOAD_TRACKING
       SET AFFECTED_IDS = L_NNT_IDS,
           SUCCEED_NUM  = L_ROWCOUNT - L_FAILURE_NUM,
           FAILURE_NUM  = L_FAILURE_NUM
     WHERE UPLOAD_ID = P_UPLOAD_ID;

    INSERT INTO FACT_PO_STEP2_TEMP
      (TRANS_BUSKEY,
       PO_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST,
       ACTION_FLAG)
      SELECT MAX(A.TRANS_BUSKEY) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) TRANS_BUSKEY,
             A.PO_NUMBER,
             A.STYLE_COLOR_SIZE_GP_ID,
             A.YEAR_SEASON_ID,
             A.STORE_LOC_ID,
             A.STATUS_ID,
             MAX(A.START_DT) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) START_DT,
             MAX(A.CANCEL_DT) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) CANCEL_DT,
             MAX(A.IN_DC_DT) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) IN_DC_DT,
             MAX(A.COST) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) COST,
             MAX(A.RETAIL) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) RETAIL,
             SUM(A.TOTAL_QTY) TOTAL_QTY,
             SUM(A.TOTAL_RETAIL) TOTAL_RETAIL,
             SUM(A.TOTAL_COST) TOTAL_COST,
             SUBSTR(MAX(LPAD(A.FILE_ROW_NUM, 10, '0') || A.ACTION_FLAG),
                    11,
                    1) ACTION_FLAG
        FROM FACT_PO_STEP1_TEMP A
       GROUP BY A.PO_NUMBER,
                A.STYLE_COLOR_SIZE_GP_ID,
                A.YEAR_SEASON_ID,
                A.STORE_LOC_ID,
                A.STATUS_ID;

    POPULATE_FACT_PO;

    COMMIT;

    EXECUTE IMMEDIATE 'ALTER TABLE PO_RAW TRUNCATE PARTITION FOR(' ||
                      TO_CHAR(P_UPLOAD_ID) || ')';

  END POPULATE_PO;

  --************************************************ASN**********************************

  --VALIDATE ASN
  PROCEDURE VALIDATE_ASN(P_REC_ASN_ATTRS     REC_ASN_ATTRS) IS
  BEGIN

    IF P_REC_ASN_ATTRS.ASN_NUMBER IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_ASN_BLANK, '');
    END IF;

  END VALIDATE_ASN;

  FUNCTION RESULTSET_ASN(P_ASN_RAW_CUR IN ASN_RAW_CURSOR) RETURN NNT_ASN
    PIPELINED
    PARALLEL_ENABLE(PARTITION P_ASN_RAW_CUR BY ANY) IS

    TYPE NNT_ASN_RAW IS TABLE OF ASN_RAW%ROWTYPE;
    L_CACHE_ASN_RAW NNT_ASN_RAW;
    L_REC_ASN       REC_ASN;

    L_REC_STYLE_ATTRS      REC_STYLE_ATTRS;
    L_REC_STORE_ATTRS      REC_STORE_ATTRS;
    L_REC_ASN_ATTRS        REC_ASN_ATTRS;
    L_REC_YEARSEASON_ATTRS REC_YEARSEASON_ATTRS;
    L_REC_MEASURES         REC_MEASURES;

    L_STATUS_READY_ID DIM_COMMON.COMMON_ID%TYPE;
    L_LOC_ARRAY       LOC_ARRAY := LOC_ARRAY();
    L_STYLE_COLOR_SIZE_GP_IDS   NNT_IDS;

    L_RATIO                     NUMBER(7,4);
    L_TOTAL_RATIO               NUMBER(7,4);
  BEGIN
    L_STATUS_READY_ID := L_CACHE_STATUS(C_STATUS_READY);

    LOOP
      FETCH P_ASN_RAW_CUR BULK COLLECT
        INTO L_CACHE_ASN_RAW LIMIT C_MAX_ROWS_PER_FETCH;
      EXIT WHEN L_CACHE_ASN_RAW.COUNT = 0;

      FOR I IN L_CACHE_ASN_RAW.FIRST .. L_CACHE_ASN_RAW.LAST LOOP
        BEGIN
          L_STYLE_COLOR_SIZE_GP_IDS      := NNT_IDS();
          L_REC_ASN.ASN_NUMBER           := UPPER(L_CACHE_ASN_RAW(I).ASN_NUMBER);
          L_REC_ASN.VENDOR_REF_NUMBER    := UPPER(L_CACHE_ASN_RAW(I).VENDOR_REF_NUMBER);
          L_REC_ASN.STYLE_NUMBER         := UPPER(L_CACHE_ASN_RAW(I).STYLE_NUMBER);
          L_REC_ASN.COLOR_CODE           := UPPER(L_CACHE_ASN_RAW(I).COLOR_CODE);
          L_REC_ASN.SIZE_CODE            := UPPER(L_CACHE_ASN_RAW(I).SIZE_CODE);
          L_REC_ASN.STYLE_YEAR           := UPPER(L_CACHE_ASN_RAW(I).STYLE_YEAR);
          L_REC_ASN.STYLE_SEASON         := UPPER(L_CACHE_ASN_RAW(I).STYLE_SEASON);
          L_REC_ASN.GOLDEN_PACKAGE_CODE  := UPPER(L_CACHE_ASN_RAW(I).GOLDEN_PACKAGE_CODE);
          L_REC_ASN.LOC_ATTR1            := UPPER(L_CACHE_ASN_RAW(I).LOC_ATTR1);
          L_REC_ASN.LOC_ATTR2            := UPPER(L_CACHE_ASN_RAW(I).LOC_ATTR2);
          L_REC_ASN.LOC_ATTR3            := UPPER(L_CACHE_ASN_RAW(I).LOC_ATTR3);
          L_REC_ASN.LOC_ATTR4            := UPPER(L_CACHE_ASN_RAW(I).LOC_ATTR4);
          L_REC_ASN.LOC_ATTR5            := UPPER(L_CACHE_ASN_RAW(I).LOC_ATTR5);
          L_REC_ASN.LOC_ATTR6            := UPPER(L_CACHE_ASN_RAW(I).LOC_ATTR6);
          L_REC_ASN.LOC_ATTR7            := UPPER(L_CACHE_ASN_RAW(I).LOC_ATTR7);
          L_REC_ASN.LOC_ATTR8            := UPPER(L_CACHE_ASN_RAW(I).LOC_ATTR8);
          L_REC_ASN.LOC_ATTR9            := UPPER(L_CACHE_ASN_RAW(I).LOC_ATTR9);
          L_REC_ASN.LOC_ATTR10           := UPPER(L_CACHE_ASN_RAW(I).LOC_ATTR10);
          L_REC_ASN.START_DATE           := L_CACHE_ASN_RAW(I).START_DATE;
          L_REC_ASN.CANCEL_DATE          := L_CACHE_ASN_RAW(I).CANCEL_DATE;
          L_REC_ASN.IN_DC_DATE           := L_CACHE_ASN_RAW(I).IN_DC_DATE;
          L_REC_ASN.TOTAL_DIST_INDICATOR := UPPER(L_CACHE_ASN_RAW(I).TOTAL_DIST_INDICATOR);
          L_REC_ASN.COST                 := NVL(L_CACHE_ASN_RAW(I).COST,0);
          L_REC_ASN.RETAIL               := NVL(L_CACHE_ASN_RAW(I).RETAIL,0);
          L_REC_ASN.TOTAL_QTY            := L_CACHE_ASN_RAW(I).TOTAL_QTY;
          L_REC_ASN.TOTAL_RETAIL         := L_CACHE_ASN_RAW(I).TOTAL_RETAIL;
          L_REC_ASN.TOTAL_COST           := NVL(L_CACHE_ASN_RAW(I).TOTAL_COST,0);
          L_REC_ASN.FILE_ROW_NUM         := L_CACHE_ASN_RAW(I).FILE_ROW_NUM;
          L_REC_ASN.ACTION_FLAG          := NVL(UPPER(L_CACHE_ASN_RAW(I).ACTION_FLAG),'A');

          L_REC_ASN.TRANS_BUSKEY           := 'A' ||
                                              TO_CHAR(SEQ_TRANS_ASN.NEXTVAL);

          L_REC_ASN.STYLE_COLOR_SIZE_GP_ID := 0;
          L_REC_ASN.STYLE_COLOR_ID         := 0;
          L_REC_ASN.STORE_LOC_ID           := 0;
          L_REC_ASN.STATUS_ID              := L_STATUS_READY_ID;

          L_REC_ASN.LOG_DATE     := SYSDATE;
          L_REC_ASN.UPLOAD_ID    := L_CACHE_ASN_RAW(I).UPLOAD_ID;
          L_REC_ASN.FILE_ROW_NUM := L_CACHE_ASN_RAW(I).FILE_ROW_NUM;
          L_REC_ASN.ERROR_ID     := 0;
          L_REC_ASN.FIELD_VALUE  := '0';

          L_REC_MEASURES.COST         := L_REC_ASN.COST;
          L_REC_MEASURES.RETAIL       := L_REC_ASN.RETAIL;
          L_REC_MEASURES.TOTAL_QTY    := L_REC_ASN.TOTAL_QTY;
          L_REC_MEASURES.TOTAL_RETAIL := L_REC_ASN.TOTAL_RETAIL;
          L_REC_MEASURES.TOTAL_COST   := L_REC_ASN.TOTAL_COST;
          VALIDATE_MEASURES(L_REC_MEASURES);

          L_REC_ASN_ATTRS.ASN_NUMBER := L_CACHE_ASN_RAW(I).ASN_NUMBER;
          VALIDATE_ASN(L_REC_ASN_ATTRS);

          L_REC_STYLE_ATTRS.VENDOR_REF_NUMBER := L_REC_ASN.VENDOR_REF_NUMBER;
          L_REC_STYLE_ATTRS.STYLE_NUMBER      := L_REC_ASN.STYLE_NUMBER;
          L_REC_STYLE_ATTRS.COLOR_CODE        := L_REC_ASN.COLOR_CODE;
          L_REC_STYLE_ATTRS.SIZE_CODE         := L_REC_ASN.SIZE_CODE;
          L_REC_STYLE_ATTRS.PREPACK_CODE      := NVL(L_REC_ASN.GOLDEN_PACKAGE_CODE,C_DUMMY);
          L_REC_STYLE_ATTRS.PREPACK_TYPE := CASE
                                              WHEN L_REC_ASN.GOLDEN_PACKAGE_CODE IS NULL THEN
                                               C_PREPACK_TYPE_OPENSTOCK
                                              ELSE
                                               C_PREPACK_TYPE_ASN
                                            END;
          VALIDATE_STYLE(L_REC_STYLE_ATTRS,
                         L_STYLE_COLOR_SIZE_GP_IDS,
                         L_REC_ASN.STYLE_COLOR_ID);

          L_LOC_ARRAY :=LOC_ARRAY(L_REC_ASN.LOC_ATTR1
                      ,L_REC_ASN.LOC_ATTR2
                      ,L_REC_ASN.LOC_ATTR3
                      ,L_REC_ASN.LOC_ATTR4
                      ,L_REC_ASN.LOC_ATTR5
                      ,L_REC_ASN.LOC_ATTR6
                      ,L_REC_ASN.LOC_ATTR7
                      ,L_REC_ASN.LOC_ATTR8
                      ,L_REC_ASN.LOC_ATTR9
                      ,L_REC_ASN.LOC_ATTR10);

          L_REC_STORE_ATTRS.LOC_ATTRS            := L_LOC_ARRAY;
          L_REC_STORE_ATTRS.TOTAL_DIST_INDICATOR := L_REC_ASN.TOTAL_DIST_INDICATOR;

          VALIDATE_STORE(L_REC_STORE_ATTRS, L_REC_ASN.STORE_LOC_ID);

          L_REC_YEARSEASON_ATTRS.STYLE_YEAR   := L_REC_ASN.STYLE_YEAR;
          L_REC_YEARSEASON_ATTRS.STYLE_SEASON := L_REC_ASN.STYLE_SEASON;
          VALIDATE_YEARSEASON(L_REC_YEARSEASON_ATTRS,
                              L_REC_ASN.YEAR_SEASON_ID);

          VALIDATE_STYLE_YEAR_SEASON(L_REC_ASN.STYLE_COLOR_ID,
                                     L_REC_ASN.YEAR_SEASON_ID,
                                     L_REC_YEARSEASON_ATTRS,
                                     L_REC_STYLE_ATTRS);

          VALIDATE_MISC_DATES(L_REC_ASN.START_DATE,
                              L_REC_ASN.CANCEL_DATE,
                              L_REC_ASN.IN_DC_DATE,
                              L_REC_ASN.START_DT,
                              L_REC_ASN.CANCEL_DT,
                              L_REC_ASN.IN_DC_DT);

          FOR J IN L_STYLE_COLOR_SIZE_GP_IDS.FIRST .. L_STYLE_COLOR_SIZE_GP_IDS.LAST LOOP
            L_REC_ASN.STYLE_COLOR_SIZE_GP_ID:=L_STYLE_COLOR_SIZE_GP_IDS(J);
            L_RATIO                         :=L_CACHE_RATIO(L_REC_ASN.STYLE_COLOR_SIZE_GP_ID).RATIO;
            L_TOTAL_RATIO                   :=L_CACHE_RATIO(L_REC_ASN.STYLE_COLOR_SIZE_GP_ID).TOTAL_RATIO;

            L_REC_ASN.TOTAL_QTY             :=NVL(L_CACHE_ASN_RAW(I).TOTAL_QTY,0)*L_RATIO;
            L_REC_ASN.TOTAL_RETAIL          :=NVL(L_CACHE_ASN_RAW(I).TOTAL_RETAIL,0)*L_TOTAL_RATIO;
            L_REC_ASN.TOTAL_COST            :=NVL(L_CACHE_ASN_RAW(I).TOTAL_COST,0)*L_TOTAL_RATIO;

            PIPE ROW(L_REC_ASN);
          END LOOP;

        EXCEPTION
          WHEN OTHERS THEN
            BEGIN
              L_REC_ASN.FIELD_VALUE := REGEXP_REPLACE(SQLERRM,
                                                      'ORA-[[:digit:]]{5}: ',
                                                      '');
              L_REC_ASN.ERROR_ID    := L_CACHE_ERROR(SQLCODE);
              PIPE ROW(L_REC_ASN);
            END;
        END;
      END LOOP;

    END LOOP;

  END RESULTSET_ASN;

  --This is an sub procedure for populating ASN at country level
  PROCEDURE POPULATE_FACT_ASN IS
  BEGIN

    --1,handle D FOR COUNTRY AND EXIST IN FACT
    --D+EXIST(BREAKDOWN/READY)--UPDATE
    UPDATE FACT_ASN T
       SET T.STATUS_ID = L_STATUS_INVALID_ID
     WHERE EXISTS
     (SELECT 1
              FROM FACT_ASN_STEP2_TEMP S
             WHERE S.STORE_LOC_ID > 0
               AND S.ACTION_FLAG = 'D'
               AND S.ASN_NUMBER = T.ASN_NUMBER
               AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
               AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
               AND S.STORE_LOC_ID = T.STORE_LOC_ID)
       AND T.STATUS_ID IN (L_STATUS_BREAKDOWN_ID, L_STATUS_READY_ID);

    --2,HANDLE A/M FOR COUNTRY AND NOT EXIST IN FACT
    --A/M+NOT EXIST--INSERT
    INSERT INTO FACT_ASN
      (TRANS_BUSKEY,
       ASN_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       SOURCE_TRANS_BUSKEY,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST)
      SELECT TRANS_BUSKEY,
             ASN_NUMBER,
             STYLE_COLOR_SIZE_GP_ID,
             YEAR_SEASON_ID,
             STORE_LOC_ID,
             STATUS_ID,
             C_DUMMY,
             START_DT,
             CANCEL_DT,
             IN_DC_DT,
             COST,
             RETAIL,
             TOTAL_QTY,
             TOTAL_RETAIL,
             TOTAL_COST
        FROM FACT_ASN_STEP2_TEMP T
       WHERE T.STORE_LOC_ID > 0
         AND T.ACTION_FLAG IN ('A', 'M')
         AND NOT EXISTS
       (SELECT 1
                FROM FACT_ASN S
               WHERE S.ASN_NUMBER = T.ASN_NUMBER
                 AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
                 AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
                 AND S.STORE_LOC_ID = T.STORE_LOC_ID);

    --3,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(READY)--UPDATE
    MERGE INTO FACT_ASN T
    USING (SELECT *
             FROM FACT_ASN_STEP2_TEMP S
            WHERE S.STORE_LOC_ID > 0
              AND S.ACTION_FLAG IN ('A', 'M')) S
    ON (S.ASN_NUMBER = T.ASN_NUMBER AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID AND S.STORE_LOC_ID = T.STORE_LOC_ID AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID)
    WHEN MATCHED THEN
      UPDATE
         SET T.START_DT     = S.START_DT,
             T.CANCEL_DT    = S.CANCEL_DT,
             T.IN_DC_DT     = S.IN_DC_DT,
             T.COST         = S.COST,
             T.RETAIL       = S.RETAIL,
             T.TOTAL_QTY    = S.TOTAL_QTY,
             T.TOTAL_RETAIL = S.TOTAL_RETAIL,
             T.TOTAL_COST   = S.TOTAL_COST,
             T.TRANS_BUSKEY = S.TRANS_BUSKEY
       WHERE T.STATUS_ID = L_STATUS_READY_ID;

    --4,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(INVALID)--INSERT
    INSERT INTO FACT_ASN
      (TRANS_BUSKEY,
       ASN_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       SOURCE_TRANS_BUSKEY,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST)
      SELECT TRANS_BUSKEY,
             ASN_NUMBER,
             STYLE_COLOR_SIZE_GP_ID,
             YEAR_SEASON_ID,
             STORE_LOC_ID,
             STATUS_ID,
             C_DUMMY,
             START_DT,
             CANCEL_DT,
             IN_DC_DT,
             COST,
             RETAIL,
             TOTAL_QTY,
             TOTAL_RETAIL,
             TOTAL_COST
        FROM FACT_ASN_STEP2_TEMP T
       WHERE T.STORE_LOC_ID > 0
         AND T.ACTION_FLAG IN ('A', 'M')
         AND EXISTS
       (SELECT 1
                FROM FACT_ASN S
               WHERE S.ASN_NUMBER = T.ASN_NUMBER
                 AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
                 AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
                 AND S.STORE_LOC_ID = T.STORE_LOC_ID
                 AND S.STATUS_ID = L_STATUS_INVALID_ID);

    --5.1,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(BREAKDOWN)--UPDATE
    UPDATE FACT_ASN T
       SET T.STATUS_ID = L_STATUS_INVALID_ID
     WHERE EXISTS
     (SELECT 1
              FROM FACT_ASN_STEP2_TEMP S
             WHERE S.STORE_LOC_ID > 0
               AND S.ACTION_FLAG IN ('A', 'M')
               AND S.ASN_NUMBER = T.ASN_NUMBER
               AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
               AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
               AND S.STORE_LOC_ID = T.STORE_LOC_ID)
       AND T.STATUS_ID = L_STATUS_BREAKDOWN_ID;

    --5.1,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(BREAKDOWN)--INSERT
    INSERT INTO FACT_ASN
      (TRANS_BUSKEY,
       ASN_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       SOURCE_TRANS_BUSKEY,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST)
      SELECT TRANS_BUSKEY,
             ASN_NUMBER,
             STYLE_COLOR_SIZE_GP_ID,
             YEAR_SEASON_ID,
             STORE_LOC_ID,
             STATUS_ID,
             C_DUMMY,
             START_DT,
             CANCEL_DT,
             IN_DC_DT,
             COST,
             RETAIL,
             TOTAL_QTY,
             TOTAL_RETAIL,
             TOTAL_COST
        FROM FACT_ASN_STEP2_TEMP T
       WHERE T.STORE_LOC_ID > 0
         AND T.ACTION_FLAG IN ('A', 'M')
         AND EXISTS
       (SELECT 1
                FROM FACT_ASN S
               WHERE S.ASN_NUMBER = T.ASN_NUMBER
                 AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
                 AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
                 AND S.STORE_LOC_ID = T.STORE_LOC_ID
                 AND S.STATUS_ID = L_STATUS_BREAKDOWN_ID);

  END POPULATE_FACT_ASN;

  PROCEDURE POPULATE_ASN(P_UPLOAD_ID ASN_RAW.UPLOAD_ID%TYPE) IS
    L_ROWCOUNT    PLS_INTEGER;
    L_FAILURE_NUM PLS_INTEGER;
    L_NNT_IDS     NNT_IDS := NNT_IDS();

  BEGIN

    INSERT INTO DIM_UPLOAD_TRACKING
      (UPLOAD_ID, UPLOAD_TYPE, AFFECTED_IDS, SUCCEED_NUM, FAILURE_NUM)
    VALUES
      (P_UPLOAD_ID, 'ASN', NULL, 0, 0);

    EXECUTE IMMEDIATE '
    INSERT
    ALL WHEN ERROR_ID = 0 THEN INTO FACT_ASN_STEP1_TEMP(
      ACTION_FLAG,
      FILE_ROW_NUM,
      TRANS_BUSKEY,
      ASN_NUMBER,
      STYLE_COLOR_SIZE_GP_ID,
      YEAR_SEASON_ID,
      STORE_LOC_ID,
      STATUS_ID,
      START_DT,
      CANCEL_DT,
      IN_DC_DT,
      COST,
      RETAIL,
      TOTAL_QTY,
      TOTAL_RETAIL,
      TOTAL_COST)
    VALUES(
      ACTION_FLAG,
      FILE_ROW_NUM,
      TRANS_BUSKEY,
      ASN_NUMBER,
      STYLE_COLOR_SIZE_GP_ID,
      YEAR_SEASON_ID,
      STORE_LOC_ID,
      STATUS_ID,
      START_DT,
      CANCEL_DT,
      IN_DC_DT,
      COST,
      RETAIL,
      TOTAL_QTY,
      TOTAL_RETAIL,
      TOTAL_COST)
   ELSE INTO FACT_ERROR_LOG PARTITION FOR(' ||
                      TO_CHAR(P_UPLOAD_ID) || ')
      (DATE_ID,
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
    VALUES
      (TO_NUMBER(TO_CHAR(LOG_DATE,''YYYYMMDD'')),
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
      SELECT /*+PARALLEL*/*
        FROM TABLE(ALLOCATE_POPULATE_PACK.RESULTSET_ASN(CURSOR
                                                         (SELECT *
                                                            FROM ASN_RAW P
                                                           WHERE UPLOAD_ID=' ||
                      TO_CHAR(P_UPLOAD_ID) || ')))';

    L_ROWCOUNT := SQL%ROWCOUNT;

    --1.WHILE THE INTENDED ACTION IS D, CHECK IF THE CORRESPONDING ASN EXISTS IN ADVANCE.

    INSERT INTO FACT_ERROR_LOG
      (DATE_ID, UPLOAD_ID, ERROR_ID, FIELD_VALUE, LOG_DATE, FILE_ROW_NUM)
      SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDD')),
             P_UPLOAD_ID UPLOAD_ID,
             L_CACHE_ERROR(DIM_POPULATE_PACK.C_ASN_TRANS_NOTEXIST) ERROR_ID,
             FILE_ROW_NUM FIELD_VALUE,
             SYSDATE LOG_DATE,
             FILE_ROW_NUM
        FROM FACT_ASN_STEP1_TEMP A
       WHERE NOT EXISTS
       (SELECT 1
                FROM FACT_ASN B
               WHERE A.ASN_NUMBER = B.ASN_NUMBER
                 AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                 AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                 AND A.STORE_LOC_ID = B.STORE_LOC_ID
                 AND B.STATUS_ID IN
                     (L_STATUS_BREAKDOWN_ID, L_STATUS_READY_ID))
         AND A.ACTION_FLAG = 'D';

    DELETE FROM FACT_ASN_STEP1_TEMP A
     WHERE NOT EXISTS
     (SELECT 1
              FROM FACT_ASN B
             WHERE A.ASN_NUMBER = B.ASN_NUMBER
               AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
               AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
               AND A.STORE_LOC_ID = B.STORE_LOC_ID
               AND B.STATUS_ID IN (L_STATUS_BREAKDOWN_ID, L_STATUS_READY_ID))
       AND A.ACTION_FLAG = 'D';

    --2.WHILE THE INTENDED ACTION IS D, CHECK IF THE CORRESPONDING RELEASE IN ADVANCE.

    INSERT INTO FACT_ERROR_LOG
      (DATE_ID, UPLOAD_ID, ERROR_ID, FIELD_VALUE, LOG_DATE, FILE_ROW_NUM)
      SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDD')),
             P_UPLOAD_ID UPLOAD_ID,
             L_CACHE_ERROR(DIM_POPULATE_PACK.C_ASN_RELEASED_TRANS_EXIST) ERROR_ID,
             FILE_ROW_NUM FIELD_VALUE,
             SYSDATE LOG_DATE,
             FILE_ROW_NUM
        FROM FACT_ASN_STEP1_TEMP A
       WHERE A.ACTION_FLAG = 'D'
         AND (EXISTS
              (SELECT 1
                 FROM FACT_ASN_RELEASE B
                INNER JOIN DIM_ASN_RELEASE C
                   ON B.ASN_RELEASE_ID = C.ASN_RELEASE_ID
                INNER JOIN DIM_ASN_ALLOCATE D
                   ON C.ASN_ALLOCATE_ID = D.ASN_ALLOCATE_ID
                INNER JOIN DIM_ASN_BD_RELEASE E
                   ON D.ASN_BD_RELEASE_ID=E.ASN_BD_RELEASE_ID
                INNER JOIN DIM_ASN_BD F
                   ON E.ASN_BD_ID=F.ASN_BD_ID
                WHERE A.ASN_NUMBER = F.ASN_NUMBER
                  AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                  AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                  AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)) OR
              EXISTS
              (SELECT 1
                 FROM FACT_ASN_RELEASE_RESERVE B
                INNER JOIN DIM_ASN_RELEASE C
                   ON B.ASN_RELEASE_ID = C.ASN_RELEASE_ID
                INNER JOIN DIM_ASN_ALLOCATE D
                   ON C.ASN_ALLOCATE_ID = D.ASN_ALLOCATE_ID
                INNER JOIN DIM_ASN_BD_RELEASE E
                   ON D.ASN_BD_RELEASE_ID=E.ASN_BD_RELEASE_ID
                INNER JOIN DIM_ASN_BD F
                   ON E.ASN_BD_ID=F.ASN_BD_ID
                WHERE A.ASN_NUMBER = F.ASN_NUMBER
                  AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                  AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                  AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)));

    DELETE FROM FACT_ASN_STEP1_TEMP A
     WHERE A.ACTION_FLAG = 'D'
       AND (EXISTS
            (SELECT 1
               FROM FACT_ASN_RELEASE B
              INNER JOIN DIM_ASN_RELEASE C
                 ON B.ASN_RELEASE_ID = C.ASN_RELEASE_ID
              INNER JOIN DIM_ASN_ALLOCATE D
                 ON C.ASN_ALLOCATE_ID = D.ASN_ALLOCATE_ID
                INNER JOIN DIM_ASN_BD_RELEASE E
                   ON D.ASN_BD_RELEASE_ID=E.ASN_BD_RELEASE_ID
                INNER JOIN DIM_ASN_BD F
                   ON E.ASN_BD_ID=F.ASN_BD_ID
                WHERE A.ASN_NUMBER = F.ASN_NUMBER
                AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)) OR
            EXISTS
            (SELECT 1
               FROM FACT_ASN_RELEASE_RESERVE B
              INNER JOIN DIM_ASN_RELEASE C
                 ON B.ASN_RELEASE_ID = C.ASN_RELEASE_ID
              INNER JOIN DIM_ASN_ALLOCATE D
                 ON C.ASN_ALLOCATE_ID = D.ASN_ALLOCATE_ID
                INNER JOIN DIM_ASN_BD_RELEASE E
                   ON D.ASN_BD_RELEASE_ID=E.ASN_BD_RELEASE_ID
                INNER JOIN DIM_ASN_BD F
                   ON E.ASN_BD_ID=F.ASN_BD_ID
                WHERE A.ASN_NUMBER = F.ASN_NUMBER
                AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)));

    SELECT COUNT(*)
      INTO L_FAILURE_NUM
      FROM FACT_ERROR_LOG
     WHERE UPLOAD_ID = P_UPLOAD_ID;

    UPDATE DIM_UPLOAD_TRACKING
       SET AFFECTED_IDS = L_NNT_IDS,
           SUCCEED_NUM  = L_ROWCOUNT - L_FAILURE_NUM,
           FAILURE_NUM  = L_FAILURE_NUM
     WHERE UPLOAD_ID = P_UPLOAD_ID;

    INSERT INTO FACT_ASN_STEP2_TEMP
      (TRANS_BUSKEY,
       ASN_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST,
       ACTION_FLAG)
      SELECT MAX(A.TRANS_BUSKEY) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) TRANS_BUSKEY,
             A.ASN_NUMBER,
             A.STYLE_COLOR_SIZE_GP_ID,
             A.YEAR_SEASON_ID,
             A.STORE_LOC_ID,
             A.STATUS_ID,
             MAX(A.START_DT) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) START_DT,
             MAX(A.CANCEL_DT) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) CANCEL_DT,
             MAX(A.IN_DC_DT) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) IN_DC_DT,
             MAX(A.COST) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) COST,
             MAX(A.RETAIL) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) RETAIL,
             SUM(A.TOTAL_QTY) TOTAL_QTY,
             SUM(A.TOTAL_RETAIL) TOTAL_RETAIL,
             SUM(A.TOTAL_COST) TOTAL_COST,
             SUBSTR(MAX(LPAD(A.FILE_ROW_NUM, 10, '0') || A.ACTION_FLAG),
                    11,
                    1) ACTION_FLAG
        FROM FACT_ASN_STEP1_TEMP A
       GROUP BY A.ASN_NUMBER,
                A.STYLE_COLOR_SIZE_GP_ID,
                A.YEAR_SEASON_ID,
                A.STORE_LOC_ID,
                A.STATUS_ID;

    POPULATE_FACT_ASN;

    COMMIT;

    EXECUTE IMMEDIATE 'ALTER TABLE ASN_RAW TRUNCATE PARTITION FOR(' ||
                      TO_CHAR(P_UPLOAD_ID) || ')';

  END POPULATE_ASN;

  --************************************************RECEIVER**********************************

  --VALIDATE RECEIVER
  PROCEDURE VALIDATE_RECEIVER(P_REC_RECEIVER_ATTRS     REC_RECEIVER_ATTRS) IS

  BEGIN

    IF P_REC_RECEIVER_ATTRS.RECEIVER_NUMBER IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_RECEIVER_BLANK, '');
    END IF;

  END VALIDATE_RECEIVER;

  FUNCTION RESULTSET_RECEIVER(P_RECEIVER_RAW_CUR IN RECEIVER_RAW_CURSOR)
    RETURN NNT_RECEIVER
    PIPELINED
    PARALLEL_ENABLE(PARTITION P_RECEIVER_RAW_CUR BY ANY) IS

    TYPE NNT_RECEIVER_RAW IS TABLE OF RECEIVER_RAW%ROWTYPE;
    L_CACHE_RECEIVER_RAW NNT_RECEIVER_RAW;
    L_REC_RECEIVER       REC_RECEIVER;

    L_REC_STYLE_ATTRS      REC_STYLE_ATTRS;
    L_REC_STORE_ATTRS      REC_STORE_ATTRS;
    L_REC_RECEIVER_ATTRS   REC_RECEIVER_ATTRS;
    L_REC_YEARSEASON_ATTRS REC_YEARSEASON_ATTRS;

    L_REC_MEASURES REC_MEASURES;

    L_STATUS_READY_ID DIM_COMMON.COMMON_ID%TYPE;
    L_LOC_ARRAY       LOC_ARRAY := LOC_ARRAY();
    L_STYLE_COLOR_SIZE_GP_IDS   NNT_IDS;

    L_RATIO                     NUMBER(7,4);
    L_TOTAL_RATIO               NUMBER(7,4);
  BEGIN
    L_STATUS_READY_ID := L_CACHE_STATUS(C_STATUS_READY);

    LOOP
      FETCH P_RECEIVER_RAW_CUR BULK COLLECT
        INTO L_CACHE_RECEIVER_RAW LIMIT C_MAX_ROWS_PER_FETCH;
      EXIT WHEN L_CACHE_RECEIVER_RAW.COUNT = 0;

      FOR I IN L_CACHE_RECEIVER_RAW.FIRST .. L_CACHE_RECEIVER_RAW.LAST LOOP
        BEGIN
          L_STYLE_COLOR_SIZE_GP_IDS           := NNT_IDS();
          L_REC_RECEIVER.RECEIVER_NUMBER      := UPPER(L_CACHE_RECEIVER_RAW(I).RECEIVER_NUMBER);
          L_REC_RECEIVER.VENDOR_REF_NUMBER    := UPPER(L_CACHE_RECEIVER_RAW(I).VENDOR_REF_NUMBER);
          L_REC_RECEIVER.STYLE_NUMBER         := UPPER(L_CACHE_RECEIVER_RAW(I).STYLE_NUMBER);
          L_REC_RECEIVER.COLOR_CODE           := UPPER(L_CACHE_RECEIVER_RAW(I).COLOR_CODE);
          L_REC_RECEIVER.SIZE_CODE            := UPPER(L_CACHE_RECEIVER_RAW(I).SIZE_CODE);
          L_REC_RECEIVER.STYLE_YEAR           := UPPER(L_CACHE_RECEIVER_RAW(I).STYLE_YEAR);
          L_REC_RECEIVER.STYLE_SEASON         := UPPER(L_CACHE_RECEIVER_RAW(I).STYLE_SEASON);
          L_REC_RECEIVER.GOLDEN_PACKAGE_CODE  := UPPER(L_CACHE_RECEIVER_RAW(I).GOLDEN_PACKAGE_CODE);
          L_REC_RECEIVER.LOC_ATTR1            := UPPER(L_CACHE_RECEIVER_RAW(I).LOC_ATTR1);
          L_REC_RECEIVER.LOC_ATTR2            := UPPER(L_CACHE_RECEIVER_RAW(I).LOC_ATTR2);
          L_REC_RECEIVER.LOC_ATTR3            := UPPER(L_CACHE_RECEIVER_RAW(I).LOC_ATTR3);
          L_REC_RECEIVER.LOC_ATTR4            := UPPER(L_CACHE_RECEIVER_RAW(I).LOC_ATTR4);
          L_REC_RECEIVER.LOC_ATTR5            := UPPER(L_CACHE_RECEIVER_RAW(I).LOC_ATTR5);
          L_REC_RECEIVER.LOC_ATTR6            := UPPER(L_CACHE_RECEIVER_RAW(I).LOC_ATTR6);
          L_REC_RECEIVER.LOC_ATTR7            := UPPER(L_CACHE_RECEIVER_RAW(I).LOC_ATTR7);
          L_REC_RECEIVER.LOC_ATTR8            := UPPER(L_CACHE_RECEIVER_RAW(I).LOC_ATTR8);
          L_REC_RECEIVER.LOC_ATTR9            := UPPER(L_CACHE_RECEIVER_RAW(I).LOC_ATTR9);
          L_REC_RECEIVER.LOC_ATTR10           := UPPER(L_CACHE_RECEIVER_RAW(I).LOC_ATTR10);
          L_REC_RECEIVER.START_DATE           := L_CACHE_RECEIVER_RAW(I).START_DATE;
          L_REC_RECEIVER.CANCEL_DATE          := L_CACHE_RECEIVER_RAW(I).CANCEL_DATE;
          L_REC_RECEIVER.IN_DC_DATE           := L_CACHE_RECEIVER_RAW(I).IN_DC_DATE;
          L_REC_RECEIVER.TOTAL_DIST_INDICATOR := UPPER(L_CACHE_RECEIVER_RAW(I).TOTAL_DIST_INDICATOR);
          L_REC_RECEIVER.COST                 := NVL(L_CACHE_RECEIVER_RAW(I).COST,0);
          L_REC_RECEIVER.RETAIL               := NVL(L_CACHE_RECEIVER_RAW(I).RETAIL,0);
          L_REC_RECEIVER.TOTAL_QTY            := L_CACHE_RECEIVER_RAW(I).TOTAL_QTY;
          L_REC_RECEIVER.TOTAL_RETAIL         := L_CACHE_RECEIVER_RAW(I).TOTAL_RETAIL;
          L_REC_RECEIVER.TOTAL_COST           := NVL(L_CACHE_RECEIVER_RAW(I).TOTAL_COST,0);
          L_REC_RECEIVER.FILE_ROW_NUM         := L_CACHE_RECEIVER_RAW(I).FILE_ROW_NUM;
          L_REC_RECEIVER.ACTION_FLAG          := NVL(UPPER(L_CACHE_RECEIVER_RAW(I).ACTION_FLAG),'A');
          L_REC_RECEIVER.TRANS_BUSKEY           := 'R' ||
                                                   TO_CHAR(SEQ_TRANS_RECEIVER.NEXTVAL);

          L_REC_RECEIVER.STYLE_COLOR_SIZE_GP_ID := 0;
          L_REC_RECEIVER.STYLE_COLOR_ID         := 0;
          L_REC_RECEIVER.STORE_LOC_ID           := 0;
          L_REC_RECEIVER.STATUS_ID              := L_STATUS_READY_ID;

          L_REC_RECEIVER.LOG_DATE     := SYSDATE;
          L_REC_RECEIVER.UPLOAD_ID    := L_CACHE_RECEIVER_RAW(I).UPLOAD_ID;
          L_REC_RECEIVER.FILE_ROW_NUM := L_CACHE_RECEIVER_RAW(I).FILE_ROW_NUM;
          L_REC_RECEIVER.ERROR_ID     := 0;
          L_REC_RECEIVER.FIELD_VALUE  := '0';

          L_REC_MEASURES.COST         := L_REC_RECEIVER.COST;
          L_REC_MEASURES.RETAIL       := L_REC_RECEIVER.RETAIL;
          L_REC_MEASURES.TOTAL_QTY    := L_REC_RECEIVER.TOTAL_QTY;
          L_REC_MEASURES.TOTAL_RETAIL := L_REC_RECEIVER.TOTAL_RETAIL;
          L_REC_MEASURES.TOTAL_COST   := L_REC_RECEIVER.TOTAL_COST;
          VALIDATE_MEASURES(L_REC_MEASURES);

          L_REC_RECEIVER_ATTRS.RECEIVER_NUMBER := L_CACHE_RECEIVER_RAW(I).RECEIVER_NUMBER;
          VALIDATE_RECEIVER(L_REC_RECEIVER_ATTRS);

          L_REC_STYLE_ATTRS.VENDOR_REF_NUMBER := L_REC_RECEIVER.VENDOR_REF_NUMBER;
          L_REC_STYLE_ATTRS.STYLE_NUMBER      := L_REC_RECEIVER.STYLE_NUMBER;
          L_REC_STYLE_ATTRS.COLOR_CODE        := L_REC_RECEIVER.COLOR_CODE;
          L_REC_STYLE_ATTRS.SIZE_CODE         := L_REC_RECEIVER.SIZE_CODE;
          L_REC_STYLE_ATTRS.PREPACK_CODE      := NVL(L_REC_RECEIVER.GOLDEN_PACKAGE_CODE,C_DUMMY);
          L_REC_STYLE_ATTRS.PREPACK_TYPE := CASE
                                              WHEN L_REC_RECEIVER.GOLDEN_PACKAGE_CODE IS NULL THEN
                                               C_PREPACK_TYPE_OPENSTOCK
                                              ELSE
                                               C_PREPACK_TYPE_RECEIVER
                                            END;
          VALIDATE_STYLE(L_REC_STYLE_ATTRS,
                         L_STYLE_COLOR_SIZE_GP_IDS,
                         L_REC_RECEIVER.STYLE_COLOR_ID);

          L_LOC_ARRAY :=LOC_ARRAY(L_REC_RECEIVER.LOC_ATTR1
                      ,L_REC_RECEIVER.LOC_ATTR2
                      ,L_REC_RECEIVER.LOC_ATTR3
                      ,L_REC_RECEIVER.LOC_ATTR4
                      ,L_REC_RECEIVER.LOC_ATTR5
                      ,L_REC_RECEIVER.LOC_ATTR6
                      ,L_REC_RECEIVER.LOC_ATTR7
                      ,L_REC_RECEIVER.LOC_ATTR8
                      ,L_REC_RECEIVER.LOC_ATTR9
                      ,L_REC_RECEIVER.LOC_ATTR10);

          L_REC_STORE_ATTRS.LOC_ATTRS            := L_LOC_ARRAY;
          L_REC_STORE_ATTRS.TOTAL_DIST_INDICATOR := L_REC_RECEIVER.TOTAL_DIST_INDICATOR;
          VALIDATE_STORE(L_REC_STORE_ATTRS, L_REC_RECEIVER.STORE_LOC_ID);

          L_REC_YEARSEASON_ATTRS.STYLE_YEAR   := L_REC_RECEIVER.STYLE_YEAR;
          L_REC_YEARSEASON_ATTRS.STYLE_SEASON := L_REC_RECEIVER.STYLE_SEASON;
          VALIDATE_YEARSEASON(L_REC_YEARSEASON_ATTRS,
                              L_REC_RECEIVER.YEAR_SEASON_ID);

          VALIDATE_STYLE_YEAR_SEASON(L_REC_RECEIVER.STYLE_COLOR_ID,
                                     L_REC_RECEIVER.YEAR_SEASON_ID,
                                     L_REC_YEARSEASON_ATTRS,
                                     L_REC_STYLE_ATTRS);

          VALIDATE_MISC_DATES(L_REC_RECEIVER.START_DATE,
                              L_REC_RECEIVER.CANCEL_DATE,
                              L_REC_RECEIVER.IN_DC_DATE,
                              L_REC_RECEIVER.START_DT,
                              L_REC_RECEIVER.CANCEL_DT,
                              L_REC_RECEIVER.IN_DC_DT);

          FOR J IN L_STYLE_COLOR_SIZE_GP_IDS.FIRST .. L_STYLE_COLOR_SIZE_GP_IDS.LAST LOOP
            L_REC_RECEIVER.STYLE_COLOR_SIZE_GP_ID:=L_STYLE_COLOR_SIZE_GP_IDS(J);

            L_RATIO                         :=L_CACHE_RATIO(L_REC_RECEIVER.STYLE_COLOR_SIZE_GP_ID).RATIO;
            L_TOTAL_RATIO                   :=L_CACHE_RATIO(L_REC_RECEIVER.STYLE_COLOR_SIZE_GP_ID).TOTAL_RATIO;

            L_REC_RECEIVER.TOTAL_QTY        :=NVL(L_CACHE_RECEIVER_RAW(I).TOTAL_QTY,0)*L_RATIO;
            L_REC_RECEIVER.TOTAL_RETAIL     :=NVL(L_CACHE_RECEIVER_RAW(I).TOTAL_RETAIL,0)*L_TOTAL_RATIO;
            L_REC_RECEIVER.TOTAL_COST       :=NVL(L_CACHE_RECEIVER_RAW(I).TOTAL_COST,0)*L_TOTAL_RATIO;

            PIPE ROW(L_REC_RECEIVER);
          END LOOP;

        EXCEPTION
          WHEN OTHERS THEN
            BEGIN
              L_REC_RECEIVER.FIELD_VALUE := REGEXP_REPLACE(SQLERRM,
                                                           'ORA-[[:digit:]]{5}: ',
                                                           '');
              L_REC_RECEIVER.ERROR_ID    := L_CACHE_ERROR(SQLCODE);
              PIPE ROW(L_REC_RECEIVER);
            END;
        END;
      END LOOP;

    END LOOP;

  END RESULTSET_RECEIVER;

  --This is an sub procedure for populating RECEIVER at country level
  PROCEDURE POPULATE_FACT_RECEIVER IS
  BEGIN

    --1,handle D FOR COUNTRY AND EXIST IN FACT
    --D+EXIST(BREAKDOWN/READY)--UPDATE
    UPDATE FACT_RECEIVER T
       SET T.STATUS_ID = L_STATUS_INVALID_ID
     WHERE EXISTS
     (SELECT 1
              FROM FACT_RECEIVER_STEP2_TEMP S
             WHERE S.STORE_LOC_ID > 0
               AND S.ACTION_FLAG = 'D'
               AND S.RECEIVER_NUMBER = T.RECEIVER_NUMBER
               AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
               AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
               AND S.STORE_LOC_ID = T.STORE_LOC_ID)
       AND T.STATUS_ID IN (L_STATUS_BREAKDOWN_ID, L_STATUS_READY_ID);

    --2,HANDLE A/M FOR COUNTRY AND NOT EXIST IN FACT
    --A/M+NOT EXIST--INSERT
    INSERT INTO FACT_RECEIVER
      (TRANS_BUSKEY,
       RECEIVER_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       SOURCE_TRANS_BUSKEY,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST)
      SELECT TRANS_BUSKEY,
             RECEIVER_NUMBER,
             STYLE_COLOR_SIZE_GP_ID,
             YEAR_SEASON_ID,
             STORE_LOC_ID,
             STATUS_ID,
             C_DUMMY,
             START_DT,
             CANCEL_DT,
             IN_DC_DT,
             COST,
             RETAIL,
             TOTAL_QTY,
             TOTAL_RETAIL,
             TOTAL_COST
        FROM FACT_RECEIVER_STEP2_TEMP T
       WHERE T.STORE_LOC_ID > 0
         AND T.ACTION_FLAG IN ('A', 'M')
         AND NOT EXISTS
       (SELECT 1
                FROM FACT_RECEIVER S
               WHERE S.RECEIVER_NUMBER = T.RECEIVER_NUMBER
                 AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
                 AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
                 AND S.STORE_LOC_ID = T.STORE_LOC_ID);

    --3,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(READY)--UPDATE
    MERGE INTO FACT_RECEIVER T
    USING (SELECT *
             FROM FACT_RECEIVER_STEP2_TEMP S
            WHERE S.STORE_LOC_ID > 0
              AND S.ACTION_FLAG IN ('A', 'M')) S
    ON (S.RECEIVER_NUMBER = T.RECEIVER_NUMBER AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID AND S.STORE_LOC_ID = T.STORE_LOC_ID AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID)
    WHEN MATCHED THEN
      UPDATE
         SET T.START_DT     = S.START_DT,
             T.CANCEL_DT    = S.CANCEL_DT,
             T.IN_DC_DT     = S.IN_DC_DT,
             T.COST         = S.COST,
             T.RETAIL       = S.RETAIL,
             T.TOTAL_QTY    = S.TOTAL_QTY,
             T.TOTAL_RETAIL = S.TOTAL_RETAIL,
             T.TOTAL_COST   = S.TOTAL_COST,
             T.TRANS_BUSKEY = S.TRANS_BUSKEY
       WHERE T.STATUS_ID = L_STATUS_READY_ID;

    --4,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(INVALID)--INSERT
    INSERT INTO FACT_RECEIVER
      (TRANS_BUSKEY,
       RECEIVER_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       SOURCE_TRANS_BUSKEY,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST)
      SELECT TRANS_BUSKEY,
             RECEIVER_NUMBER,
             STYLE_COLOR_SIZE_GP_ID,
             YEAR_SEASON_ID,
             STORE_LOC_ID,
             STATUS_ID,
             C_DUMMY,
             START_DT,
             CANCEL_DT,
             IN_DC_DT,
             COST,
             RETAIL,
             TOTAL_QTY,
             TOTAL_RETAIL,
             TOTAL_COST
        FROM FACT_RECEIVER_STEP2_TEMP T
       WHERE T.STORE_LOC_ID > 0
         AND T.ACTION_FLAG IN ('A', 'M')
         AND EXISTS
       (SELECT 1
                FROM FACT_RECEIVER S
               WHERE S.RECEIVER_NUMBER = T.RECEIVER_NUMBER
                 AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
                 AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
                 AND S.STORE_LOC_ID = T.STORE_LOC_ID
                 AND S.STATUS_ID = L_STATUS_INVALID_ID);

    --5.1,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(BREAKDOWN)--UPDATE
    UPDATE FACT_RECEIVER T
       SET T.STATUS_ID = L_STATUS_INVALID_ID
     WHERE EXISTS
     (SELECT 1
              FROM FACT_RECEIVER_STEP2_TEMP S
             WHERE S.STORE_LOC_ID > 0
               AND S.ACTION_FLAG IN ('A', 'M')
               AND S.RECEIVER_NUMBER = T.RECEIVER_NUMBER
               AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
               AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
               AND S.STORE_LOC_ID = T.STORE_LOC_ID)
       AND T.STATUS_ID = L_STATUS_BREAKDOWN_ID;

    --5.1,HANDLE A/M FOR COUNTRY AND EXIST IN FACT
    --A/M+EXIST(BREAKDOWN)--INSERT
    INSERT INTO FACT_RECEIVER
      (TRANS_BUSKEY,
       RECEIVER_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       SOURCE_TRANS_BUSKEY,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST)
      SELECT TRANS_BUSKEY,
             RECEIVER_NUMBER,
             STYLE_COLOR_SIZE_GP_ID,
             YEAR_SEASON_ID,
             STORE_LOC_ID,
             STATUS_ID,
             C_DUMMY,
             START_DT,
             CANCEL_DT,
             IN_DC_DT,
             COST,
             RETAIL,
             TOTAL_QTY,
             TOTAL_RETAIL,
             TOTAL_COST
        FROM FACT_RECEIVER_STEP2_TEMP T
       WHERE T.STORE_LOC_ID > 0
         AND T.ACTION_FLAG IN ('A', 'M')
         AND EXISTS
       (SELECT 1
                FROM FACT_RECEIVER S
               WHERE S.RECEIVER_NUMBER = T.RECEIVER_NUMBER
                 AND S.STYLE_COLOR_SIZE_GP_ID = T.STYLE_COLOR_SIZE_GP_ID
                 AND S.YEAR_SEASON_ID = T.YEAR_SEASON_ID
                 AND S.STORE_LOC_ID = T.STORE_LOC_ID
                 AND S.STATUS_ID = L_STATUS_BREAKDOWN_ID);

  END POPULATE_FACT_RECEIVER;

  PROCEDURE POPULATE_RECEIVER(P_UPLOAD_ID RECEIVER_RAW.UPLOAD_ID%TYPE) IS
    L_ROWCOUNT    PLS_INTEGER;
    L_FAILURE_NUM PLS_INTEGER;
    L_NNT_IDS     NNT_IDS := NNT_IDS();

  BEGIN

    INSERT INTO DIM_UPLOAD_TRACKING
      (UPLOAD_ID, UPLOAD_TYPE, AFFECTED_IDS, SUCCEED_NUM, FAILURE_NUM)
    VALUES
      (P_UPLOAD_ID, 'RECEIVER', NULL, 0, 0);

    EXECUTE IMMEDIATE '
    INSERT
    ALL WHEN ERROR_ID = 0 THEN INTO FACT_RECEIVER_STEP1_TEMP(
      ACTION_FLAG,
      FILE_ROW_NUM,
      TRANS_BUSKEY,
      RECEIVER_NUMBER,
      STYLE_COLOR_SIZE_GP_ID,
      YEAR_SEASON_ID,
      STORE_LOC_ID,
      STATUS_ID,
      START_DT,
      CANCEL_DT,
      IN_DC_DT,
      COST,
      RETAIL,
      TOTAL_QTY,
      TOTAL_RETAIL,
      TOTAL_COST)
    VALUES(
      ACTION_FLAG,
      FILE_ROW_NUM,
      TRANS_BUSKEY,
      RECEIVER_NUMBER,
      STYLE_COLOR_SIZE_GP_ID,
      YEAR_SEASON_ID,
      STORE_LOC_ID,
      STATUS_ID,
      START_DT,
      CANCEL_DT,
      IN_DC_DT,
      COST,
      RETAIL,
      TOTAL_QTY,
      TOTAL_RETAIL,
      TOTAL_COST)
   ELSE INTO FACT_ERROR_LOG PARTITION FOR(' ||
                      TO_CHAR(P_UPLOAD_ID) || ')
      (DATE_ID,
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
    VALUES
      (TO_NUMBER(TO_CHAR(LOG_DATE,''YYYYMMDD'')),
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
      SELECT /*+PARALLEL*/*
        FROM TABLE(ALLOCATE_POPULATE_PACK.RESULTSET_RECEIVER(CURSOR
                                                         (SELECT *
                                                            FROM RECEIVER_RAW P
                                                           WHERE UPLOAD_ID=' ||
                      TO_CHAR(P_UPLOAD_ID) || ')))';

    L_ROWCOUNT := SQL%ROWCOUNT;

    --1.WHILE THE INTENDED ACTION IS D, CHECK IF THE CORRESPONDING RECEIVER EXISTS IN ADVANCE.

    INSERT INTO FACT_ERROR_LOG
      (DATE_ID, UPLOAD_ID, ERROR_ID, FIELD_VALUE, LOG_DATE, FILE_ROW_NUM)
      SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDD')),
             P_UPLOAD_ID UPLOAD_ID,
             L_CACHE_ERROR(DIM_POPULATE_PACK.C_REC_TRANS_NOTEXIST) ERROR_ID,
             FILE_ROW_NUM FIELD_VALUE,
             SYSDATE LOG_DATE,
             FILE_ROW_NUM
        FROM FACT_RECEIVER_STEP1_TEMP A
       WHERE NOT EXISTS
       (SELECT 1
                FROM FACT_RECEIVER B
               WHERE A.RECEIVER_NUMBER = B.RECEIVER_NUMBER
                 AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                 AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                 AND A.STORE_LOC_ID = B.STORE_LOC_ID
                 AND B.STATUS_ID IN
                     (L_STATUS_BREAKDOWN_ID, L_STATUS_READY_ID))
         AND A.ACTION_FLAG = 'D';

    DELETE FROM FACT_RECEIVER_STEP1_TEMP A
     WHERE NOT EXISTS
     (SELECT 1
              FROM FACT_RECEIVER B
             WHERE A.RECEIVER_NUMBER = B.RECEIVER_NUMBER
               AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
               AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
               AND A.STORE_LOC_ID = B.STORE_LOC_ID
               AND B.STATUS_ID IN (L_STATUS_BREAKDOWN_ID, L_STATUS_READY_ID))
       AND A.ACTION_FLAG = 'D';

    --2.WHILE THE INTENDED ACTION IS D, CHECK IF THE CORRESPONDING RELEASE IN ADVANCE.

    INSERT INTO FACT_ERROR_LOG
      (DATE_ID, UPLOAD_ID, ERROR_ID, FIELD_VALUE, LOG_DATE, FILE_ROW_NUM)
      SELECT TO_NUMBER(TO_CHAR(SYSDATE, 'YYYYMMDD')),
             P_UPLOAD_ID UPLOAD_ID,
             L_CACHE_ERROR(DIM_POPULATE_PACK.C_REC_RELEASED_TRANS_EXIST) ERROR_ID,
             FILE_ROW_NUM FIELD_VALUE,
             SYSDATE LOG_DATE,
             FILE_ROW_NUM
        FROM FACT_RECEIVER_STEP1_TEMP A
       WHERE A.ACTION_FLAG = 'D'
         AND (EXISTS
              (SELECT 1
                 FROM FACT_RECEIVER_RELEASE B
                INNER JOIN DIM_RECEIVER_RELEASE C
                   ON B.RECEIVER_RELEASE_ID = C.RECEIVER_RELEASE_ID
                INNER JOIN DIM_RECEIVER_ALLOCATE D
                   ON C.RECEIVER_ALLOCATE_ID = D.RECEIVER_ALLOCATE_ID
                INNER JOIN DIM_RECEIVER_BD_RELEASE E
                   ON D.RECEIVER_BD_RELEASE_ID=E.RECEIVER_BD_RELEASE_ID
                INNER JOIN DIM_RECEIVER_BD F
                   ON E.RECEIVER_BD_ID=F.RECEIVER_BD_ID
                WHERE A.RECEIVER_NUMBER = F.RECEIVER_NUMBER
                  AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                  AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                  AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)) OR
              EXISTS
              (SELECT 1
                 FROM FACT_RECEIVER_RELEASE_RESERVE B
                INNER JOIN DIM_RECEIVER_RELEASE C
                   ON B.RECEIVER_RELEASE_ID = C.RECEIVER_RELEASE_ID
                INNER JOIN DIM_RECEIVER_ALLOCATE D
                   ON C.RECEIVER_ALLOCATE_ID = D.RECEIVER_ALLOCATE_ID
                INNER JOIN DIM_RECEIVER_BD_RELEASE E
                   ON D.RECEIVER_BD_RELEASE_ID=E.RECEIVER_BD_RELEASE_ID
                INNER JOIN DIM_RECEIVER_BD F
                   ON E.RECEIVER_BD_ID=F.RECEIVER_BD_ID
                WHERE A.RECEIVER_NUMBER = F.RECEIVER_NUMBER
                  AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                  AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                  AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)));

    DELETE FROM FACT_RECEIVER_STEP1_TEMP A
     WHERE A.ACTION_FLAG = 'D'
       AND (EXISTS
            (SELECT 1
               FROM FACT_RECEIVER_RELEASE B
              INNER JOIN DIM_RECEIVER_RELEASE C
                 ON B.RECEIVER_RELEASE_ID = C.RECEIVER_RELEASE_ID
              INNER JOIN DIM_RECEIVER_ALLOCATE D
                 ON C.RECEIVER_ALLOCATE_ID = D.RECEIVER_ALLOCATE_ID
                INNER JOIN DIM_RECEIVER_BD_RELEASE E
                   ON D.RECEIVER_BD_RELEASE_ID=E.RECEIVER_BD_RELEASE_ID
                INNER JOIN DIM_RECEIVER_BD F
                   ON E.RECEIVER_BD_ID=F.RECEIVER_BD_ID
                WHERE A.RECEIVER_NUMBER = F.RECEIVER_NUMBER
                AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)) OR
            EXISTS
            (SELECT 1
               FROM FACT_RECEIVER_RELEASE_RESERVE B
              INNER JOIN DIM_RECEIVER_RELEASE C
                 ON B.RECEIVER_RELEASE_ID = C.RECEIVER_RELEASE_ID
              INNER JOIN DIM_RECEIVER_ALLOCATE D
                 ON C.RECEIVER_ALLOCATE_ID = D.RECEIVER_ALLOCATE_ID
                INNER JOIN DIM_RECEIVER_BD_RELEASE E
                   ON D.RECEIVER_BD_RELEASE_ID=E.RECEIVER_BD_RELEASE_ID
                INNER JOIN DIM_RECEIVER_BD F
                   ON E.RECEIVER_BD_ID=F.RECEIVER_BD_ID
                WHERE A.RECEIVER_NUMBER = F.RECEIVER_NUMBER
                AND A.STYLE_COLOR_SIZE_GP_ID = B.STYLE_COLOR_SIZE_GP_ID
                AND A.YEAR_SEASON_ID = B.YEAR_SEASON_ID
                AND B.STATUS_ID IN (L_STATUS_RELEASED_ID, L_STATUS_APO_ID)));

    SELECT COUNT(*)
      INTO L_FAILURE_NUM
      FROM FACT_ERROR_LOG
     WHERE UPLOAD_ID = P_UPLOAD_ID;


    UPDATE DIM_UPLOAD_TRACKING
       SET AFFECTED_IDS = L_NNT_IDS,
           SUCCEED_NUM  = L_ROWCOUNT - L_FAILURE_NUM,
           FAILURE_NUM  = L_FAILURE_NUM
     WHERE UPLOAD_ID = P_UPLOAD_ID;

    INSERT INTO FACT_RECEIVER_STEP2_TEMP
      (TRANS_BUSKEY,
       RECEIVER_NUMBER,
       STYLE_COLOR_SIZE_GP_ID,
       YEAR_SEASON_ID,
       STORE_LOC_ID,
       STATUS_ID,
       START_DT,
       CANCEL_DT,
       IN_DC_DT,
       COST,
       RETAIL,
       TOTAL_QTY,
       TOTAL_RETAIL,
       TOTAL_COST,
       ACTION_FLAG)
      SELECT MAX(A.TRANS_BUSKEY) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) TRANS_BUSKEY,
             A.RECEIVER_NUMBER,
             A.STYLE_COLOR_SIZE_GP_ID,
             A.YEAR_SEASON_ID,
             A.STORE_LOC_ID,
             A.STATUS_ID,
             MAX(A.START_DT) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) START_DT,
             MAX(A.CANCEL_DT) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) CANCEL_DT,
             MAX(A.IN_DC_DT) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) IN_DC_DT,
             MAX(A.COST) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) COST,
             MAX(A.RETAIL) KEEP(DENSE_RANK LAST ORDER BY A.FILE_ROW_NUM) RETAIL,
             SUM(A.TOTAL_QTY) TOTAL_QTY,
             SUM(A.TOTAL_RETAIL) TOTAL_RETAIL,
             SUM(A.TOTAL_COST) TOTAL_COST,
             SUBSTR(MAX(LPAD(A.FILE_ROW_NUM, 10, '0') || A.ACTION_FLAG),
                    11,
                    1) ACTION_FLAG
        FROM FACT_RECEIVER_STEP1_TEMP A
       GROUP BY A.RECEIVER_NUMBER,
                A.STYLE_COLOR_SIZE_GP_ID,
                A.YEAR_SEASON_ID,
                A.STORE_LOC_ID,
                A.STATUS_ID;

    POPULATE_FACT_RECEIVER;

    COMMIT;

    EXECUTE IMMEDIATE 'ALTER TABLE RECEIVER_RAW TRUNCATE PARTITION FOR(' ||
                      TO_CHAR(P_UPLOAD_ID) || ')';

  END POPULATE_RECEIVER;

BEGIN

  SELECT S.ERROR_ID ID, S.ERROR_CODE SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_ERROR S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_ERROR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.STORE_LOC_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_STORE_LOC S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STORE_LOC(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;


  SELECT S.YEAR_SEASON_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_YEAR_SEASON S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_YEAR_SEASON(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.STYLE_COLOR_SIZE_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_STYLE_COLOR_SIZE S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STYLE_COLOR_SIZE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.STYLE_COLOR_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_STYLE_COLOR S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STYLE_COLOR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.STYLE_ID ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_STYLE S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STYLE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT V.VENDOR_ID ID, V.SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_VENDOR V;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_VENDOR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  --CACHED FOR OPENSTOCK
  SELECT S.STYLE_COLOR_SIZE_GP_ID ID, S.SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_STYLE_COLOR_SIZE_GP S
    WHERE S.PREPACK_TYPE=C_PREPACK_TYPE_OPENSTOCK;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STYLE_COLOR_SIZE_GP(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.COMMON_ID ID, S.COMMON_VALUE SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_COMMON S
   WHERE S.COMMON_CODE IN
         ('PO-ASN-RECEIVER_STATUS_IND', 'PO-ASN-RECEIVER_SOURCE_IND');

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STATUS(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.ID, S.SOURCE_BUSKEY SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM (SELECT STYLE_COLOR_ID ID,
                 LISTAGG(REAL_YEAR_SEASON_ID, ',') WITHIN GROUP(ORDER BY REAL_YEAR_SEASON_ID) SOURCE_BUSKEY
            FROM (SELECT DISTINCT S.STYLE_COLOR_ID, S.REAL_YEAR_SEASON_ID
                    FROM DIM_STYLE_YEAR_SEASON S
                   WHERE S.REAL_YEAR_SEASON_ID > 0)
           GROUP BY STYLE_COLOR_ID) S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STYLE_YEAR_SEASON(L_TEMP_CACHE(J).ID) := L_TEMP_CACHE(J).SOURCE_BUSKEY;
  END LOOP;

  FOR ITEM IN (SELECT DISTINCT NVL(TOTAL_DIST_INDICATOR, LEVEL_SEQ) TOTAL_DIST_INDICATOR,
                               UPLOAD_FORMAT_SETUP
                 FROM COMPANY_HIERARCHY_LEVEL@MYLINKAPP
                WHERE DIM_NAME = C_STORE_DIM) LOOP

    L_CACHE_TOTAL_INDICATOR(ITEM.TOTAL_DIST_INDICATOR) := ITEM.UPLOAD_FORMAT_SETUP;

  END LOOP;

  --CACHED FOR GOLDEN PACKAGE
  SELECT C.SOURCE_BUSKEY || C_DELIMITER || G.PREPACK_CODE || C_DELIMITER || G.PREPACK_TYPE SOURCE_BUSKEY,
         CAST(COLLECT(G.STYLE_COLOR_SIZE_GP_ID) AS NNT_IDS) IDS
    BULK COLLECT
    INTO L_TEMP_CACHE_GP
    FROM DIM_STYLE_COLOR_SIZE_GP G
   INNER JOIN DIM_STYLE_COLOR_SIZE S
      ON G.STYLE_COLOR_SIZE_ID = S.STYLE_COLOR_SIZE_ID
   INNER JOIN DIM_STYLE_COLOR C
      ON S.STYLE_COLOR_ID = C.STYLE_COLOR_ID
   WHERE G.PREPACK_TYPE <> C_PREPACK_TYPE_OPENSTOCK
   GROUP BY C.SOURCE_BUSKEY || C_DELIMITER || G.PREPACK_CODE || C_DELIMITER ||
            G.PREPACK_TYPE;

  FOR J IN L_TEMP_CACHE_GP.FIRST .. L_TEMP_CACHE_GP.LAST LOOP
    L_CACHE_STYLE_GP_SIZE(L_TEMP_CACHE_GP(J).SOURCE_BUSKEY) := L_TEMP_CACHE_GP(J).IDS;
  END LOOP;

  SELECT G.STYLE_COLOR_SIZE_GP_ID,
       CASE WHEN S.GP_GP_ID=0 THEN 1 ELSE RATIO END RATIO,
       CASE WHEN S.GP_GP_ID=0 THEN 1 ELSE RATIO_TO_REPORT(RATIO) OVER(PARTITION BY C.STYLE_COLOR_ID,S.GP_GP_ID,G.PREPACK_TYPE) END TOTAL_RATIO
       BULK COLLECT INTO L_TEMP_CACHE_RATIO
  FROM DIM_STYLE_COLOR_SIZE_GP G
  INNER JOIN DIM_STYLE_COLOR_SIZE C
  ON G.STYLE_COLOR_SIZE_ID=C.STYLE_COLOR_SIZE_ID
  INNER JOIN DIM_GP_SIZE S
  ON G.GP_SIZE_ID = S.GP_SIZE_ID;

  FOR J IN L_TEMP_CACHE_RATIO.FIRST .. L_TEMP_CACHE_RATIO.LAST LOOP
    L_CACHE_RATIO(L_TEMP_CACHE_RATIO(J).STYLE_COLOR_SIZE_GP_ID).RATIO         := L_TEMP_CACHE_RATIO(J).RATIO;
    L_CACHE_RATIO(L_TEMP_CACHE_RATIO(J).STYLE_COLOR_SIZE_GP_ID).TOTAL_RATIO   := L_TEMP_CACHE_RATIO(J).TOTAL_RATIO;
  END LOOP;

  L_STATUS_INVALID_ID   := L_CACHE_STATUS(C_STATUS_INVALID);
  L_STATUS_BREAKDOWN_ID := L_CACHE_STATUS(C_STATUS_BREAKDOWN);
  L_STATUS_READY_ID     := L_CACHE_STATUS(C_STATUS_READY);
  L_STATUS_RELEASED_ID  := L_CACHE_STATUS(C_STATUS_RELEASED);
  L_STATUS_APO_ID       := L_CACHE_STATUS(C_STATUS_APO);

END ALLOCATE_POPULATE_PACK;
/
