CREATE OR REPLACE PACKAGE POS_POPULATE_PACK IS

  -- Author  : FZHANG
  -- Created : 7/15/2015 10:05:23 AM
  -- Purpose : populate pos_sales and pos_inventory

  TYPE REC_POS_SALES IS RECORD(
    --ALL COLUMNS REQUIRED IN FACT_POS_SALES
    DATE_ID                    FACT_POS_SALES.DATE_ID%TYPE,
    STYLE_COLOR_SIZE_ID        FACT_POS_SALES.STYLE_COLOR_SIZE_ID%TYPE,
    STYLE_YEAR_SEASON_ID       FACT_POS_SALES.STYLE_YEAR_SEASON_ID%TYPE,
    STORE_ID                   FACT_POS_SALES.STORE_ID%TYPE,
    SALES_STYLE_ID             FACT_POS_SALES.SALES_STYLE_ID%TYPE,
    SALES_UNIT                 FACT_POS_SALES.SALES_UNIT%TYPE,
    SALES_RETAIL               FACT_POS_SALES.SALES_RETAIL%TYPE,
    SALES_COST                 FACT_POS_SALES.SALES_COST%TYPE,
    PROMO_RETAIL               FACT_POS_SALES.PROMO_RETAIL%TYPE,
    PROMO_PERCENT              FACT_POS_SALES.PROMO_PERCENT%TYPE,
    PROFIT_DOLLAR              FACT_POS_SALES.PROFIT_DOLLAR%TYPE,
    OWNED_RETAIL               FACT_POS_SALES.OWNED_RETAIL%TYPE,
    OWNED_COST                 FACT_POS_SALES.OWNED_COST%TYPE,
    MSRP                       FACT_POS_SALES.MSRP%TYPE,
    DEMAND_SALES_UNIT          FACT_POS_SALES.DEMAND_SALES_UNIT%TYPE,
    DEMAND_SALES_COST          FACT_POS_SALES.DEMAND_SALES_COST%TYPE,
    DEMAND_SALES_RETAIL        FACT_POS_SALES.DEMAND_SALES_RETAIL%TYPE,
    RETURN_UNIT                FACT_POS_SALES.RETURN_UNIT%TYPE,
    RETURN_COST                FACT_POS_SALES.RETURN_COST%TYPE,
    RETURN_RETAIL              FACT_POS_SALES.RETURN_RETAIL%TYPE,
    BACK_ORDER_UNIT            FACT_POS_SALES.BACK_ORDER_UNIT%TYPE,
    BACK_ORDER_COST            FACT_POS_SALES.BACK_ORDER_COST%TYPE,
    BACK_ORDER_RETAIL          FACT_POS_SALES.BACK_ORDER_RETAIL%TYPE,
    --COLUMNS REQUIRED IN POS_SALES_RAW
    CORPORATE_DIVISION         POS_SALES_RAW.CORPORATE_DIVISION%TYPE,
    BUYER_DEPT_NUM             POS_SALES_RAW.BUYER_DEPT_NUM%TYPE,
    BODY_CLASSIFICATION_CODE   POS_SALES_RAW.BODY_CLASSIFICATION_CODE%TYPE,
    DOOR_NUM                   POS_SALES_RAW.DOOR_NUM%TYPE,
    SALES_STYLE                POS_SALES_RAW.SALES_STYLE%TYPE,
    SIZE_CODE                  POS_SALES_RAW.SIZE_CODE%TYPE,
    SIZE_DESC1                 POS_SALES_RAW.SIZE_DESC1%TYPE,
    SIZE_DESC2                 POS_SALES_RAW.SIZE_DESC2%TYPE,
    STYLE_NUMBER               POS_SALES_RAW.STYLE_NUMBER%TYPE,
    COLOR_CODE                 POS_SALES_RAW.COLOR_CODE%TYPE,
    UPC                        POS_SALES_RAW.UPC%TYPE,
    ARTICLE_NUMBER             POS_SALES_RAW.ARTICLE_NUMBER%TYPE,
    VENDOR_REF_NUMBER          POS_SALES_RAW.VENDOR_REF_NUMBER%TYPE,
    TRANSACTION_DATE           POS_SALES_RAW.TRANSACTION_DATE%TYPE,
    DAY                        POS_SALES_RAW.DAY%TYPE,
    WEEK                       POS_SALES_RAW.WEEK%TYPE,
    MONTH                      POS_SALES_RAW.MONTH%TYPE,
    YEAR                       POS_SALES_RAW.YEAR%TYPE,
    --FACT_ERROR_LOG COLUMNS
    LOG_DATE                   FACT_ERROR_LOG.LOG_DATE%TYPE,
    UPLOAD_ID                  FACT_ERROR_LOG.UPLOAD_ID%TYPE,
    FILE_ROW_NUM               FACT_ERROR_LOG.FILE_ROW_NUM%TYPE,
    ERROR_ID                   FACT_ERROR_LOG.ERROR_ID%TYPE,
    FIELD_VALUE                FACT_ERROR_LOG.FIELD_VALUE%TYPE
    );

  TYPE REC_POS_INVENTORY IS RECORD(
    DATE_ID                    FACT_POS_INVENTORY.DATE_ID%TYPE,
    STYLE_COLOR_SIZE_ID        FACT_POS_SALES.STYLE_COLOR_SIZE_ID%TYPE,
    STYLE_YEAR_SEASON_ID       FACT_POS_SALES.STYLE_YEAR_SEASON_ID%TYPE,
    STORE_ID                   FACT_POS_INVENTORY.STORE_ID%TYPE,
    BEGIN_INVENTORY_UNIT       FACT_POS_INVENTORY.BEGIN_INVENTORY_UNIT%TYPE,
    BEGIN_INVENTORY_RETAIL     FACT_POS_INVENTORY.BEGIN_INVENTORY_RETAIL%TYPE,
    BEGIN_INVENTORY_COST       FACT_POS_INVENTORY.BEGIN_INVENTORY_COST%TYPE,
    RECEIPT_UNIT               FACT_POS_INVENTORY.RECEIPT_UNIT%TYPE,
    RECEIPT_RETAIL             FACT_POS_INVENTORY.RECEIPT_RETAIL%TYPE,
    RECEIPT_COST               FACT_POS_INVENTORY.RECEIPT_COST%TYPE,
    END_INVENTORY_UNIT         FACT_POS_INVENTORY.END_INVENTORY_UNIT%TYPE,
    END_INVENTORY_RETAIL       FACT_POS_INVENTORY.END_INVENTORY_RETAIL%TYPE,
    END_INVENTORY_COST         FACT_POS_INVENTORY.END_INVENTORY_COST%TYPE,
    TRANSFER_IN_UNIT           FACT_POS_INVENTORY.TRANSFER_IN_UNIT%TYPE,
    TRANSFER_IN_RETAIL         FACT_POS_INVENTORY.TRANSFER_IN_RETAIL%TYPE,
    TRANSFER_IN_COST           FACT_POS_INVENTORY.TRANSFER_IN_COST%TYPE,
    TRANSFER_OUT_UNIT          FACT_POS_INVENTORY.TRANSFER_OUT_UNIT%TYPE,
    TRANSFER_OUT_RETAIL        FACT_POS_INVENTORY.TRANSFER_OUT_RETAIL%TYPE,
    TRANSFER_OUT_COST          FACT_POS_INVENTORY.TRANSFER_OUT_COST%TYPE,
    ADJUSTMENT_UNIT            FACT_POS_INVENTORY.ADJUSTMENT_UNIT%TYPE,
    ADJUSTMENT_RETAIL          FACT_POS_INVENTORY.ADJUSTMENT_RETAIL%TYPE,
    ADJUSTMENT_COST            FACT_POS_INVENTORY.ADJUSTMENT_COST%TYPE,
    OWNED_COST                 FACT_POS_INVENTORY.OWNED_COST%TYPE,
    MSRP                       FACT_POS_INVENTORY.OWNED_COST%TYPE,
    OWNED_RETAIL               FACT_POS_INVENTORY.MSRP%TYPE,
    MKD_RETAIL                 FACT_POS_INVENTORY.MKD_RETAIL%TYPE,
    MKD_PERCENT                FACT_POS_INVENTORY.MKD_PERCENT%TYPE,

    CORPORATE_DIVISION         POS_INVENTORY_RAW.CORPORATE_DIVISION%TYPE,
    BUYER_DEPT_NUM             POS_INVENTORY_RAW.BUYER_DEPT_NUM%TYPE,
    BODY_CLASSIFICATION_CODE   POS_INVENTORY_RAW.BODY_CLASSIFICATION_CODE%TYPE,
    DOOR_NUM                   POS_INVENTORY_RAW.DOOR_NUM%TYPE,
    SIZE_CODE                  POS_INVENTORY_RAW.SIZE_CODE%TYPE,
    SIZE_DESC1                 POS_INVENTORY_RAW.SIZE_DESC1%TYPE,
    SIZE_DESC2                 POS_INVENTORY_RAW.SIZE_DESC2%TYPE,
    STYLE_NUMBER               POS_INVENTORY_RAW.STYLE_NUMBER%TYPE,
    COLOR_CODE                 POS_INVENTORY_RAW.COLOR_CODE%TYPE,
    UPC                        POS_INVENTORY_RAW.UPC%TYPE,
    ARTICLE_NUMBER             POS_INVENTORY_RAW.ARTICLE_NUMBER%TYPE,
    VENDOR_REF_NUMBER          POS_INVENTORY_RAW.VENDOR_REF_NUMBER%TYPE,
    TRANSACTION_DATE           POS_INVENTORY_RAW.TRANSACTION_DATE%TYPE,
    DAY                        POS_INVENTORY_RAW.DAY%TYPE,
    WEEK                       POS_INVENTORY_RAW.WEEK%TYPE,
    MONTH                      POS_INVENTORY_RAW.MONTH%TYPE,
    YEAR                       POS_INVENTORY_RAW.YEAR%TYPE,
    --FACT_ERROR_LOG COLUMNS
    LOG_DATE                   FACT_ERROR_LOG.LOG_DATE%TYPE,
    UPLOAD_ID                  FACT_ERROR_LOG.UPLOAD_ID%TYPE,
    FILE_ROW_NUM               FACT_ERROR_LOG.FILE_ROW_NUM%TYPE,
    ERROR_ID                   FACT_ERROR_LOG.ERROR_ID%TYPE,
    FIELD_VALUE                FACT_ERROR_LOG.FIELD_VALUE%TYPE
    );

  TYPE NNT_POS_SALES IS TABLE OF REC_POS_SALES;
  TYPE NNT_POS_INVENTORY IS TABLE OF REC_POS_INVENTORY;

  TYPE POS_SALES_RAW_CURSOR IS REF CURSOR RETURN POS_SALES_RAW%ROWTYPE;
  TYPE POS_VENTORY_RAW_CURSOR IS REF CURSOR RETURN POS_INVENTORY_RAW%ROWTYPE;

  FUNCTION RESULTSET_POS_SALES(P_POS_SALES_RAW_CUR IN POS_SALES_RAW_CURSOR)
    RETURN NNT_POS_SALES
    PIPELINED
    PARALLEL_ENABLE(PARTITION P_POS_SALES_RAW_CUR BY ANY);

  PROCEDURE POPULATE_POS_SALES(P_UPLOAD_ID POS_SALES_RAW.UPLOAD_ID%TYPE);

  PROCEDURE CORRECT_POS_SALES(P_UPLOAD_ID POS_SALES_RAW.UPLOAD_ID%TYPE);

  FUNCTION RESULTSET_POS_INVENTORY(P_POS_INVENTORY_RAW_CUR IN POS_VENTORY_RAW_CURSOR)
    RETURN NNT_POS_INVENTORY
    PIPELINED
    PARALLEL_ENABLE(PARTITION P_POS_INVENTORY_RAW_CUR BY ANY);

  PROCEDURE POPULATE_POS_INVENTORY(P_UPLOAD_ID POS_INVENTORY_RAW.UPLOAD_ID%TYPE);

  PROCEDURE CORRECT_POS_INVENTORY(P_UPLOAD_ID POS_INVENTORY_RAW.UPLOAD_ID%TYPE);

END POS_POPULATE_PACK;
/
CREATE OR REPLACE PACKAGE BODY POS_POPULATE_PACK IS

  C_DELIMITER                 CONSTANT CHAR := '-';
  C_MAX_ROWS_PER_FETCH        CONSTANT PLS_INTEGER := 100000;
  C_MAX_PARTITIONS_NUM        CONSTANT PLS_INTEGER :=30;

--  L_INTEGRITY_CHECK_NUM       NUMBER(3) := 0;
  DATA_INVALID                EXCEPTION;

  TYPE NNT_CACHE IS TABLE OF NUMBER(8) INDEX BY VARCHAR2(60);
  L_CACHE_SALES_STYLE        NNT_CACHE;
  L_CACHE_STORE              NNT_CACHE;
  L_CACHE_DATE               NNT_CACHE;
  L_CACHE_MONTH              NNT_CACHE;
  L_CACHE_YEAR               NNT_CACHE;
  L_CACHE_VENDOR             NNT_CACHE;
  L_CACHE_STYLE              NNT_CACHE;
  L_CACHE_STYLE_COLOR        NNT_CACHE;
  L_CACHE_STYLE_COLOR_SIZE   NNT_CACHE;
  L_CACHE_YEARSEASON         NNT_CACHE;
  L_CACHE_ERROR              NNT_CACHE;
  L_CACHE_SMONTH_BY_DAY             NNT_CACHE;

  TYPE TEMP_REC IS RECORD(ID NUMBER(8),SOURCE_BUSKEY VARCHAR2(60));
  TYPE TEMP_CACHE IS TABLE OF TEMP_REC;
  L_TEMP_CACHE               TEMP_CACHE;

  TYPE REC_STYLE_ATTRS IS RECORD(
    CORPORATE_DIVISION       POS_SALES_RAW.CORPORATE_DIVISION%TYPE,
    UPC                      POS_SALES_RAW.UPC%TYPE,
    BUYER_DEPT_NUM           POS_SALES_RAW.BUYER_DEPT_NUM%TYPE,
    BODY_CLASSIFICATION_CODE POS_SALES_RAW.BODY_CLASSIFICATION_CODE%TYPE,
    VENDOR_REF_NUMBER        POS_SALES_RAW.VENDOR_REF_NUMBER%TYPE,
    STYLE_NUMBER             POS_SALES_RAW.STYLE_NUMBER%TYPE,
    COLOR_CODE               POS_SALES_RAW.COLOR_CODE%TYPE,
    SIZE_CODE                POS_SALES_RAW.SIZE_CODE%TYPE,
    SIZE_DESC1               POS_SALES_RAW.SIZE_DESC1%TYPE,
    SIZE_DESC2               POS_SALES_RAW.SIZE_DESC2%TYPE);

  TYPE REC_DATE_ATTRS IS RECORD(
    YEAR             POS_SALES_RAW.YEAR%TYPE,
    MONTH            POS_SALES_RAW.MONTH%TYPE,
    WEEK             POS_SALES_RAW.WEEK%TYPE,
    DAY              POS_SALES_RAW.DAY%TYPE,
    TRANSACTION_DATE POS_SALES_RAW.TRANSACTION_DATE%TYPE);

  TYPE REC_YEARSEASON_ATTRS IS RECORD(
    VENDOR_REF_NUMBER        POS_SALES_RAW.VENDOR_REF_NUMBER%TYPE,
    STYLE_NUMBER             POS_SALES_RAW.STYLE_NUMBER%TYPE,
    COLOR_CODE               POS_SALES_RAW.COLOR_CODE%TYPE,
    SMONTH_ID                DIM_DATE_SMONTH.SMONTH_ID%TYPE);

  TYPE NNT_MEASURES IS TABLE OF NUMBER(15, 4);


  --gather table stats for the updated partitions
  PROCEDURE GATHER_TAB_PARTITIONS_STATS(
            P_TABLE_NAME USER_TABLES.TABLE_NAME%TYPE,
            P_NNT_IDS NNT_IDS)
            IS
            TYPE NNT_PARTITIONS IS TABLE OF VARCHAR2(30);
            TYPE NNT_PARTITIONS_BYNAME IS TABLE OF PLS_INTEGER INDEX BY VARCHAR2(30);
            L_CACHE_PARTITIONS NNT_PARTITIONS:=NNT_PARTITIONS();
            L_CACHE_PARTITIONS_BYNAME NNT_PARTITIONS_BYNAME;
            L_OWNER VARCHAR2(30):=SYS_CONTEXT('USERENV','CURRENT_SCHEMA');

  BEGIN

    IF P_NNT_IDS.COUNT >=C_MAX_PARTITIONS_NUM THEN
      DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => L_OWNER,TABNAME => P_TABLE_NAME);
    ELSE

      SELECT PARTITION_NAME BULK COLLECT INTO L_CACHE_PARTITIONS
    FROM USER_TAB_PARTITIONS
    WHERE TABLE_NAME=P_TABLE_NAME;

      FOR I IN 1 .. L_CACHE_PARTITIONS.COUNT LOOP
      L_CACHE_PARTITIONS_BYNAME(L_CACHE_PARTITIONS(I)):=1;
    END LOOP;

      FOR I IN 1 .. P_NNT_IDS.COUNT LOOP
        EXECUTE IMMEDIATE 'LOCK TABLE '||P_TABLE_NAME||' PARTITION FOR('||TO_CHAR(P_NNT_IDS(I))||') IN ROW SHARE MODE';
        COMMIT;

        IF NOT L_CACHE_PARTITIONS_BYNAME.EXISTS('P'||TO_CHAR(P_NNT_IDS(I))) THEN
           EXECUTE IMMEDIATE 'ALTER TABLE '||P_TABLE_NAME||' RENAME PARTITION FOR('||TO_CHAR(P_NNT_IDS(I))||') TO P'||TO_CHAR(P_NNT_IDS(I));
        END IF;
        DBMS_STATS.GATHER_TABLE_STATS(OWNNAME => L_OWNER,TABNAME => P_TABLE_NAME,PARTNAME => 'P'||TO_CHAR(P_NNT_IDS(I)));
      END LOOP;
    END IF;

  END GATHER_TAB_PARTITIONS_STATS;

  --validate all measures
  PROCEDURE VALIDATE_MEASURES(
            P_NNT_MEASURES NNT_MEASURES) IS
    L_SQLCODE VARCHAR2(10);
  BEGIN
    L_SQLCODE:=DIM_POPULATE_PACK.C_MEASUREMENTS_BLANK;

    FOR I IN P_NNT_MEASURES.FIRST .. P_NNT_MEASURES.LAST LOOP
      IF NVL(P_NNT_MEASURES(I), 0) != 0 THEN
        L_SQLCODE := 0;
        EXIT;
      END IF;
    END LOOP;

    IF L_SQLCODE != 0 THEN
      RAISE_APPLICATION_ERROR(L_SQLCODE,'');
    END IF;

  END VALIDATE_MEASURES;

  PROCEDURE VALIDATE_STYLE(
            P_REC_STYLE_ATTRS            REC_STYLE_ATTRS,
            P_STYLE_COLOR_SIZE_ID OUT DIM_STYLE_COLOR_SIZE.STYLE_COLOR_SIZE_ID%TYPE) IS
    L_SOURCE_BUSKEY       VARCHAR2(40);
  BEGIN
    P_STYLE_COLOR_SIZE_ID := 0;

    --STYLE_NUMBER
    IF P_REC_STYLE_ATTRS.STYLE_NUMBER IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_NUMBER_BLANK,'');
    END IF;

    --COLOR_CODE
    IF P_REC_STYLE_ATTRS.COLOR_CODE IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_COLOR_CODE_BLANK,'');
    END IF;

    --SIZE_CODE
    IF P_REC_STYLE_ATTRS.SIZE_CODE IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_SIZE_CODE_BLANK,'');
    END IF;

    --VENDOR_REF_NUMBER
    IF P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_VENDOR_REF_NUM_BLANK,'');
    END IF;

    --CHECK EXISTENCE
    L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER) || C_DELIMITER ||
                       UPPER(P_REC_STYLE_ATTRS.STYLE_NUMBER) || C_DELIMITER ||
                       UPPER(P_REC_STYLE_ATTRS.COLOR_CODE) || C_DELIMITER ||
                       UPPER(P_REC_STYLE_ATTRS.SIZE_CODE);
    IF L_CACHE_STYLE_COLOR_SIZE.EXISTS(L_SOURCE_BUSKEY) THEN
      P_STYLE_COLOR_SIZE_ID := L_CACHE_STYLE_COLOR_SIZE(L_SOURCE_BUSKEY);
    ELSE
      L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER) || C_DELIMITER ||
                      UPPER(P_REC_STYLE_ATTRS.STYLE_NUMBER) ||C_DELIMITER ||
                      UPPER(P_REC_STYLE_ATTRS.COLOR_CODE);
      IF NOT L_CACHE_STYLE_COLOR.EXISTS(L_SOURCE_BUSKEY) THEN
        L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER) || C_DELIMITER ||
                        UPPER(P_REC_STYLE_ATTRS.STYLE_NUMBER);
        IF NOT L_CACHE_STYLE.EXISTS(L_SOURCE_BUSKEY) THEN
          L_SOURCE_BUSKEY := UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER);
          IF NOT L_CACHE_VENDOR.EXISTS(L_SOURCE_BUSKEY) THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_VENDOR_REF_NUM_NOTEXIST,L_SOURCE_BUSKEY);
          ELSE
             RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_NUMBER_NOTEXIST,UPPER(P_REC_STYLE_ATTRS.VENDOR_REF_NUMBER ||
                                                                                     C_DELIMITER ||
                                                                                     P_REC_STYLE_ATTRS.STYLE_NUMBER));
          END IF;
        END IF;

        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_COLOR_CODE_NOTEXIST,UPPER(P_REC_STYLE_ATTRS.COLOR_CODE));
      END IF;

      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_SIZE_CODE_NOTEXIST,UPPER(P_REC_STYLE_ATTRS.SIZE_CODE));
    END IF;

  END VALIDATE_STYLE;

  PROCEDURE VALIDATE_TIME(P_REC_DATE_ATTRS          REC_DATE_ATTRS,
                          P_DATE_ID                 IN OUT DIM_DATE_DAY.DATE_ID%TYPE,
                          P_SMONTH_ID               IN OUT DIM_DATE_SMONTH.SMONTH_ID%TYPE) IS
    L_SOURCE_BUSKEY VARCHAR2(10);

  BEGIN
    P_DATE_ID := 0;
    P_SMONTH_ID := 0;

    IF (P_REC_DATE_ATTRS.TRANSACTION_DATE IS NULL AND
       P_REC_DATE_ATTRS.YEAR IS NULL AND P_REC_DATE_ATTRS.MONTH IS NULL AND
       P_REC_DATE_ATTRS.DAY IS NULL) THEN

      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_ALL_DATE_BLANK,'');

    ELSIF P_REC_DATE_ATTRS.TRANSACTION_DATE IS NOT NULL THEN
      L_SOURCE_BUSKEY := P_REC_DATE_ATTRS.TRANSACTION_DATE;

      IF NOT L_CACHE_DATE.EXISTS(L_SOURCE_BUSKEY) THEN
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_TRANSACTION_DATE_NOTEXIST,P_REC_DATE_ATTRS.TRANSACTION_DATE);
      ELSE
        P_DATE_ID := L_CACHE_DATE(L_SOURCE_BUSKEY);
        P_SMONTH_ID:=L_CACHE_SMONTH_BY_DAY(TO_CHAR(P_DATE_ID));
      END IF;
    ELSE

      IF P_REC_DATE_ATTRS.YEAR IS NULL THEN
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_YEAR_BLANK,'');
      END IF;

      IF P_REC_DATE_ATTRS.MONTH IS NULL THEN
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_MONTH_BLANK,'');
      END IF;

      IF P_REC_DATE_ATTRS.DAY IS NULL THEN
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_DAY_BLANK,'');
      END IF;

      L_SOURCE_BUSKEY := P_REC_DATE_ATTRS.YEAR ||
                         LPAD(P_REC_DATE_ATTRS.MONTH, 2, '0') ||
                         LPAD(P_REC_DATE_ATTRS.DAY, 2, '0');

      IF NOT L_CACHE_DATE.EXISTS(L_SOURCE_BUSKEY) THEN
        L_SOURCE_BUSKEY := P_REC_DATE_ATTRS.YEAR ||
                           LPAD(P_REC_DATE_ATTRS.MONTH, 2, '0');
        IF NOT L_CACHE_MONTH.EXISTS(L_SOURCE_BUSKEY) THEN
          L_SOURCE_BUSKEY := P_REC_DATE_ATTRS.YEAR;
          IF NOT L_CACHE_YEAR.EXISTS(L_SOURCE_BUSKEY) THEN
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_YEAR_NOTEXIST,P_REC_DATE_ATTRS.YEAR);
          ELSE
            RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_MONTH_NOTEXIST,P_REC_DATE_ATTRS.MONTH);
          END IF;
        ELSE
          RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_DAY_NOTEXIST,P_REC_DATE_ATTRS.DAY);

        END IF;
      ELSE
        P_DATE_ID := L_CACHE_DATE(L_SOURCE_BUSKEY);
        P_SMONTH_ID:=L_CACHE_SMONTH_BY_DAY(TO_CHAR(P_DATE_ID));
      END IF;
    END IF;

  END VALIDATE_TIME;

  PROCEDURE VALIDATE_YEAR_SEASON(P_REC_YEARSEASON_ATTRS REC_YEARSEASON_ATTRS,
                                 P_STYLE_YEAR_SEASON_ID OUT DIM_STYLE_YEAR_SEASON.STYLE_YEAR_SEASON_ID%TYPE)
                                 IS
                                 L_SOURCE_BUSKEY       DIM_STYLE_YEAR_SEASON.SOURCE_BUSKEY%TYPE;
   BEGIN

       P_STYLE_YEAR_SEASON_ID:=0;
       L_SOURCE_BUSKEY:=UPPER(P_REC_YEARSEASON_ATTRS.VENDOR_REF_NUMBER||
                                 C_DELIMITER||
                                 P_REC_YEARSEASON_ATTRS.STYLE_NUMBER||
                                 C_DELIMITER||
                                 P_REC_YEARSEASON_ATTRS.COLOR_CODE||
                                 C_DELIMITER||
                                 TO_CHAR(P_REC_YEARSEASON_ATTRS.SMONTH_ID));
       IF NOT L_CACHE_YEARSEASON.EXISTS(L_SOURCE_BUSKEY) THEN
         RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_STYLE_YEAR_SEASON_NOTEXIST,L_SOURCE_BUSKEY);
       ELSE
         P_STYLE_YEAR_SEASON_ID:=L_CACHE_YEARSEASON(L_SOURCE_BUSKEY);
       END IF;
   END VALIDATE_YEAR_SEASON;

  PROCEDURE VALIDATE_STORE(P_STORE_BK                 DIM_STORE_STORE.SOURCE_BUSKEY%TYPE,
                           P_STORE_ID                 IN OUT DIM_STORE_STORE.STORE_ID%TYPE) IS
  BEGIN
    P_STORE_ID := 0;
    IF P_STORE_BK IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_DOOR_NUM_BLANK,'');
    ELSE

      IF NOT L_CACHE_STORE.EXISTS(UPPER(P_STORE_BK)) THEN
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_DOOR_NUM_NOTEXIST,P_STORE_BK);
      ELSE
        P_STORE_ID := L_CACHE_STORE(UPPER(P_STORE_BK));
      END IF;
    END IF;
  END VALIDATE_STORE;

  PROCEDURE VALIDATE_SALES_STYLE(P_SALES_STYLE_BK        DIM_SALES_STYLE.SOURCE_BUSKEY%TYPE,
                                 P_SALES_STYLE_ID        IN OUT DIM_SALES_STYLE.SALES_STYLE_ID%TYPE) IS
  BEGIN
    P_SALES_STYLE_ID := 0;
    IF P_SALES_STYLE_BK IS NULL THEN
      RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_SALES_STYLE_BLANK,'');
    ELSE

      IF NOT L_CACHE_SALES_STYLE.EXISTS(UPPER(P_SALES_STYLE_BK)) THEN
        RAISE_APPLICATION_ERROR(DIM_POPULATE_PACK.C_SALES_STYLE_NOTEXIST,P_SALES_STYLE_BK);
      ELSE
        P_SALES_STYLE_ID := L_CACHE_SALES_STYLE(UPPER(P_SALES_STYLE_BK));
      END IF;
    END IF;
  END VALIDATE_SALES_STYLE;

  FUNCTION RESULTSET_POS_SALES(P_POS_SALES_RAW_CUR IN POS_SALES_RAW_CURSOR)
    RETURN NNT_POS_SALES
    PIPELINED
    PARALLEL_ENABLE(PARTITION P_POS_SALES_RAW_CUR BY ANY) IS

    TYPE NNT_POS_SALES_RAW IS TABLE OF POS_SALES_RAW%ROWTYPE;
    L_CACHE_POS_SALES_RAW NNT_POS_SALES_RAW;

    L_REC_POS_SALES        REC_POS_SALES;
    L_REC_STYLE_ATTRS      REC_STYLE_ATTRS;
    L_REC_DATE_ATTRS       REC_DATE_ATTRS;
    L_REC_YEARSEASON_ATTRS REC_YEARSEASON_ATTRS;
    L_NNT_MEASURES NNT_MEASURES;

  BEGIN
    LOOP
      FETCH P_POS_SALES_RAW_CUR BULK COLLECT
        INTO L_CACHE_POS_SALES_RAW LIMIT C_MAX_ROWS_PER_FETCH;
      EXIT WHEN L_CACHE_POS_SALES_RAW.COUNT = 0;

      FOR I IN L_CACHE_POS_SALES_RAW.FIRST .. L_CACHE_POS_SALES_RAW.LAST LOOP
        BEGIN

          L_REC_POS_SALES.SALES_UNIT               := NVL(L_CACHE_POS_SALES_RAW(I).SALES_UNIT,0);
          L_REC_POS_SALES.SALES_RETAIL             := NVL(L_CACHE_POS_SALES_RAW(I).SALES_RETAIL,0);
          L_REC_POS_SALES.SALES_COST               := NVL(L_CACHE_POS_SALES_RAW(I).SALES_COST,0);
          L_REC_POS_SALES.PROMO_RETAIL             := NVL(L_CACHE_POS_SALES_RAW(I).PROMO_RETAIL,0);
          L_REC_POS_SALES.PROMO_PERCENT            := NVL(L_CACHE_POS_SALES_RAW(I).PROMO_PERCENT,0);
          L_REC_POS_SALES.PROFIT_DOLLAR            := NVL(L_CACHE_POS_SALES_RAW(I).PROFIT_DOLLAR,0);
          L_REC_POS_SALES.OWNED_COST               := NVL(L_CACHE_POS_SALES_RAW(I).OWNED_COST,0);
          L_REC_POS_SALES.MSRP                     := NVL(L_CACHE_POS_SALES_RAW(I).MSRP,0);
          L_REC_POS_SALES.OWNED_RETAIL             := NVL(L_CACHE_POS_SALES_RAW(I).OWNED_RETAIL,0);
          L_REC_POS_SALES.DEMAND_SALES_UNIT        := NVL(L_CACHE_POS_SALES_RAW(I).DEMAND_SALES_UNIT,0);
          L_REC_POS_SALES.DEMAND_SALES_COST        := NVL(L_CACHE_POS_SALES_RAW(I).DEMAND_SALES_COST,0);
          L_REC_POS_SALES.DEMAND_SALES_RETAIL      := NVL(L_CACHE_POS_SALES_RAW(I).DEMAND_SALES_RETAIL,0);
          L_REC_POS_SALES.RETURN_UNIT              := NVL(L_CACHE_POS_SALES_RAW(I).RETURN_UNIT,0);
          L_REC_POS_SALES.RETURN_COST              := NVL(L_CACHE_POS_SALES_RAW(I).RETURN_COST,0);
          L_REC_POS_SALES.RETURN_RETAIL            := NVL(L_CACHE_POS_SALES_RAW(I).RETURN_RETAIL,0);
          L_REC_POS_SALES.BACK_ORDER_UNIT          := NVL(L_CACHE_POS_SALES_RAW(I).BACK_ORDER_UNIT,0);
          L_REC_POS_SALES.BACK_ORDER_COST          := NVL(L_CACHE_POS_SALES_RAW(I).BACK_ORDER_COST,0);
          L_REC_POS_SALES.BACK_ORDER_RETAIL        := NVL(L_CACHE_POS_SALES_RAW(I).BACK_ORDER_RETAIL,0);
          L_REC_POS_SALES.CORPORATE_DIVISION       := L_CACHE_POS_SALES_RAW(I).CORPORATE_DIVISION;
          L_REC_POS_SALES.BUYER_DEPT_NUM           := L_CACHE_POS_SALES_RAW(I).BUYER_DEPT_NUM;
          L_REC_POS_SALES.BODY_CLASSIFICATION_CODE := L_CACHE_POS_SALES_RAW(I).BODY_CLASSIFICATION_CODE;
          L_REC_POS_SALES.DOOR_NUM                 := L_CACHE_POS_SALES_RAW(I).DOOR_NUM;
          L_REC_POS_SALES.SALES_STYLE              := L_CACHE_POS_SALES_RAW(I).SALES_STYLE;
          L_REC_POS_SALES.SIZE_CODE                := L_CACHE_POS_SALES_RAW(I).SIZE_CODE;
          L_REC_POS_SALES.SIZE_DESC1               := L_CACHE_POS_SALES_RAW(I).SIZE_DESC1;
          L_REC_POS_SALES.SIZE_DESC2               := L_CACHE_POS_SALES_RAW(I).SIZE_DESC2;
          L_REC_POS_SALES.STYLE_NUMBER             := L_CACHE_POS_SALES_RAW(I).STYLE_NUMBER;
          L_REC_POS_SALES.COLOR_CODE               := L_CACHE_POS_SALES_RAW(I).COLOR_CODE;
          L_REC_POS_SALES.UPC                      := L_CACHE_POS_SALES_RAW(I).UPC;
          L_REC_POS_SALES.VENDOR_REF_NUMBER        := L_CACHE_POS_SALES_RAW(I).VENDOR_REF_NUMBER;
          L_REC_POS_SALES.TRANSACTION_DATE         := L_CACHE_POS_SALES_RAW(I).TRANSACTION_DATE;
          L_REC_POS_SALES.DAY                      := L_CACHE_POS_SALES_RAW(I).DAY;
          L_REC_POS_SALES.WEEK                     := L_CACHE_POS_SALES_RAW(I).WEEK;
          L_REC_POS_SALES.MONTH                    := L_CACHE_POS_SALES_RAW(I).MONTH;
          L_REC_POS_SALES.YEAR                     := L_CACHE_POS_SALES_RAW(I).YEAR;

          L_REC_POS_SALES.FILE_ROW_NUM             := L_CACHE_POS_SALES_RAW(I).FILE_ROW_NUM;
          L_REC_POS_SALES.UPLOAD_ID                := L_CACHE_POS_SALES_RAW(I).UPLOAD_ID;
          L_REC_POS_SALES.LOG_DATE                 := SYSDATE;
          L_REC_POS_SALES.ERROR_ID                 := 0;
          L_REC_POS_SALES.FIELD_VALUE              := '0';

          --0,Validate all measures
          L_NNT_MEASURES := NNT_MEASURES(L_REC_POS_SALES.SALES_UNIT,
                                         L_REC_POS_SALES.SALES_RETAIL,
                                         L_REC_POS_SALES.SALES_COST,
                                         L_REC_POS_SALES.PROMO_RETAIL,
                                         L_REC_POS_SALES.PROMO_PERCENT,
                                         L_REC_POS_SALES.PROFIT_DOLLAR,
                                         L_REC_POS_SALES.OWNED_COST,
                                         L_REC_POS_SALES.MSRP,
                                         L_REC_POS_SALES.OWNED_RETAIL,
                                         L_REC_POS_SALES.DEMAND_SALES_UNIT,
                                         L_REC_POS_SALES.DEMAND_SALES_COST,
                                         L_REC_POS_SALES.DEMAND_SALES_RETAIL,
                                         L_REC_POS_SALES.RETURN_UNIT,
                                         L_REC_POS_SALES.RETURN_COST,
                                         L_REC_POS_SALES.RETURN_RETAIL,
                                         L_REC_POS_SALES.BACK_ORDER_UNIT,
                                         L_REC_POS_SALES.BACK_ORDER_COST,
                                         L_REC_POS_SALES.BACK_ORDER_RETAIL);
          VALIDATE_MEASURES(L_NNT_MEASURES);

          --1,Validate time dimension
          L_REC_DATE_ATTRS.YEAR             := L_REC_POS_SALES.YEAR;
          L_REC_DATE_ATTRS.MONTH            := L_REC_POS_SALES.MONTH;
          L_REC_DATE_ATTRS.WEEK             := L_REC_POS_SALES.WEEK;
          L_REC_DATE_ATTRS.DAY              := L_REC_POS_SALES.DAY;
          L_REC_DATE_ATTRS.TRANSACTION_DATE := L_REC_POS_SALES.TRANSACTION_DATE;
          VALIDATE_TIME(L_REC_DATE_ATTRS, L_REC_POS_SALES.DATE_ID, L_REC_YEARSEASON_ATTRS.SMONTH_ID);

          --2,Validate style dimension
          L_REC_STYLE_ATTRS.CORPORATE_DIVISION       := L_REC_POS_SALES.CORPORATE_DIVISION;
          L_REC_STYLE_ATTRS.UPC                      := L_REC_POS_SALES.UPC;
          L_REC_STYLE_ATTRS.BUYER_DEPT_NUM           := L_REC_POS_SALES.BUYER_DEPT_NUM;
          L_REC_STYLE_ATTRS.BODY_CLASSIFICATION_CODE := L_REC_POS_SALES.BODY_CLASSIFICATION_CODE;
          L_REC_STYLE_ATTRS.VENDOR_REF_NUMBER        := L_REC_POS_SALES.VENDOR_REF_NUMBER;
          L_REC_STYLE_ATTRS.STYLE_NUMBER             := L_REC_POS_SALES.STYLE_NUMBER;
          L_REC_STYLE_ATTRS.COLOR_CODE               := L_REC_POS_SALES.COLOR_CODE;
          L_REC_STYLE_ATTRS.SIZE_CODE                := L_REC_POS_SALES.SIZE_CODE;
          L_REC_STYLE_ATTRS.SIZE_DESC1               := L_REC_POS_SALES.SIZE_DESC1;
          L_REC_STYLE_ATTRS.SIZE_DESC2               := L_REC_POS_SALES.SIZE_DESC2;
          VALIDATE_STYLE(L_REC_STYLE_ATTRS,
                         L_REC_POS_SALES.STYLE_COLOR_SIZE_ID);

          --3,Validate store dimension
          VALIDATE_STORE(L_REC_POS_SALES.DOOR_NUM,
                         L_REC_POS_SALES.STORE_ID);

          --4,Validate sales style dimension
          VALIDATE_SALES_STYLE(L_REC_POS_SALES.SALES_STYLE,
                               L_REC_POS_SALES.SALES_STYLE_ID);

          --5,Validate style year season dimension
          L_REC_YEARSEASON_ATTRS.VENDOR_REF_NUMBER   :=L_REC_POS_SALES.VENDOR_REF_NUMBER;
          L_REC_YEARSEASON_ATTRS.STYLE_NUMBER        :=L_REC_POS_SALES.STYLE_NUMBER;
          L_REC_YEARSEASON_ATTRS.COLOR_CODE          :=L_REC_POS_SALES.COLOR_CODE;

          VALIDATE_YEAR_SEASON(L_REC_YEARSEASON_ATTRS,L_REC_POS_SALES.STYLE_YEAR_SEASON_ID);

          PIPE ROW(L_REC_POS_SALES);

        EXCEPTION
          WHEN OTHERS THEN
            BEGIN
              L_REC_POS_SALES.FIELD_VALUE := REGEXP_REPLACE(SQLERRM,'ORA-[[:digit:]]{5}: ','');
              L_REC_POS_SALES.ERROR_ID := L_CACHE_ERROR(SQLCODE);
              PIPE ROW(L_REC_POS_SALES);
            END;
        END;
      END LOOP;

    END LOOP;
  END RESULTSET_POS_SALES;

  PROCEDURE POPULATE_POS_SALES(P_UPLOAD_ID POS_SALES_RAW.UPLOAD_ID%TYPE) IS
    L_ROWCOUNT PLS_INTEGER;
    L_FAILURE_NUM PLS_INTEGER;
    L_NNT_IDS NNT_IDS:=NNT_IDS();
  BEGIN


    EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

    INSERT INTO DIM_UPLOAD_TRACKING
    (UPLOAD_ID, UPLOAD_TYPE, AFFECTED_IDS, SUCCEED_NUM, FAILURE_NUM)
    VALUES
      (P_UPLOAD_ID, 'POS_SALES', NULL, 0, 0);


    EXECUTE IMMEDIATE
    'INSERT /*+PARALLEL(FACT_POS_SALES) PARALLEL(FACT_ERROR_LOG) */
    ALL WHEN ERROR_ID = 0 THEN INTO FACT_POS_SALES
      (DATE_ID,
       STYLE_COLOR_SIZE_ID,
       STYLE_YEAR_SEASON_ID,
       STORE_ID,
       SALES_STYLE_ID,
       SALES_UNIT,
       SALES_RETAIL,
       SALES_COST,
       PROMO_RETAIL,
       PROMO_PERCENT,
       PROFIT_DOLLAR,
       OWNED_COST,
       MSRP,
       OWNED_RETAIL,
       DEMAND_SALES_UNIT,
       DEMAND_SALES_COST,
       DEMAND_SALES_RETAIL,
       RETURN_UNIT,
       RETURN_COST,
       RETURN_RETAIL,
       BACK_ORDER_UNIT,
       BACK_ORDER_COST,
       BACK_ORDER_RETAIL)
    VALUES
      (DATE_ID,
       STYLE_COLOR_SIZE_ID,
       STYLE_YEAR_SEASON_ID,
       STORE_ID,
       SALES_STYLE_ID,
       SALES_UNIT,
       SALES_RETAIL,
       SALES_COST,
       PROMO_RETAIL,
       PROMO_PERCENT,
       PROFIT_DOLLAR,
       OWNED_COST,
       MSRP,
       OWNED_RETAIL,
       DEMAND_SALES_UNIT,
       DEMAND_SALES_COST,
       DEMAND_SALES_RETAIL,
       RETURN_UNIT,
       RETURN_COST,
       RETURN_RETAIL,
       BACK_ORDER_UNIT,
       BACK_ORDER_COST,
       BACK_ORDER_RETAIL) ELSE INTO FACT_ERROR_LOG PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')
      (DATE_ID,
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
    VALUES
      (TO_NUMBER(TO_CHAR(LOG_DATE,''YYYYMMDD'')),
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
      SELECT /*+PARALLEL*/*
        FROM TABLE(POS_POPULATE_PACK.RESULTSET_POS_SALES(CURSOR
                                                         (SELECT *
                                                            FROM POS_SALES_RAW P
                                                           WHERE UPLOAD_ID='||TO_CHAR(P_UPLOAD_ID)||')))';
     L_ROWCOUNT:=SQL%ROWCOUNT;
     COMMIT;

     SELECT COUNT(*) INTO L_FAILURE_NUM
     FROM FACT_ERROR_LOG
     WHERE UPLOAD_ID=P_UPLOAD_ID;


     SELECT /*+PARALLEL(P)*/
            SET(CAST(COLLECT(D.DATE_ID) AS NNT_IDS)) INTO L_NNT_IDS
     FROM POS_SALES_RAW P
     INNER JOIN DIM_DATE_DAY D
     ON NVL(P.TRANSACTION_DATE,P.YEAR*10000+P.MONTH*100+P.DAY)=TO_CHAR(D.DATE_ID)
     WHERE UPLOAD_ID=P_UPLOAD_ID;


/*    INSERT INTO DIM_UPLOAD_TRACKING
      (UPLOAD_ID, UPLOAD_TYPE, AFFECTED_IDS, SUCCEED_NUM, FAILURE_NUM)
    VALUES
      (P_UPLOAD_ID,
       'POS_SALES',
       L_NNT_IDS,
       L_ROWCOUNT - L_FAILURE_NUM,
       L_FAILURE_NUM);*/

     UPDATE DIM_UPLOAD_TRACKING
     SET AFFECTED_IDS=L_NNT_IDS,
         SUCCEED_NUM=L_ROWCOUNT - L_FAILURE_NUM,
         FAILURE_NUM=L_FAILURE_NUM
     WHERE UPLOAD_ID=P_UPLOAD_ID;

    COMMIT;
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';

    EXECUTE IMMEDIATE 'ALTER TABLE POS_SALES_RAW TRUNCATE PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')';
    EXECUTE IMMEDIATE 'ALTER TABLE POS_SALES_RAW DROP PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')';

    GATHER_TAB_PARTITIONS_STATS('FACT_POS_SALES',L_NNT_IDS);

  END POPULATE_POS_SALES;

  PROCEDURE CORRECT_POS_SALES(P_UPLOAD_ID POS_SALES_RAW.UPLOAD_ID%TYPE) IS
    L_ROWCOUNT PLS_INTEGER;
    L_FAILURE_NUM PLS_INTEGER;
    L_NNT_IDS NNT_IDS:=NNT_IDS();
  BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE FACT_POS_SALES_TEMP';
    EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

    INSERT INTO DIM_UPLOAD_TRACKING
    (UPLOAD_ID, UPLOAD_TYPE, AFFECTED_IDS, SUCCEED_NUM, FAILURE_NUM)
    VALUES
      (P_UPLOAD_ID, 'POS_SALES', NULL, 0, 0);

    EXECUTE IMMEDIATE
    'INSERT /*+PARALLEL(FACT_POS_SALES_TEMP) PARALLEL(FACT_ERROR_LOG) */
    ALL WHEN ERROR_ID = 0 THEN INTO FACT_POS_SALES_TEMP
      (DATE_ID,
       STYLE_COLOR_SIZE_ID,
       STYLE_YEAR_SEASON_ID,
       STORE_ID,
       SALES_STYLE_ID,
       SALES_UNIT,
       SALES_RETAIL,
       SALES_COST,
       PROMO_RETAIL,
       PROMO_PERCENT,
       PROFIT_DOLLAR,
       OWNED_COST,
       MSRP,
       OWNED_RETAIL,
       DEMAND_SALES_UNIT,
       DEMAND_SALES_COST,
       DEMAND_SALES_RETAIL,
       RETURN_UNIT,
       RETURN_COST,
       RETURN_RETAIL,
       BACK_ORDER_UNIT,
       BACK_ORDER_COST,
       BACK_ORDER_RETAIL)
    VALUES
      (DATE_ID,
       STYLE_COLOR_SIZE_ID,
       STYLE_YEAR_SEASON_ID,
       STORE_ID,
       SALES_STYLE_ID,
       SALES_UNIT,
       SALES_RETAIL,
       SALES_COST,
       PROMO_RETAIL,
       PROMO_PERCENT,
       PROFIT_DOLLAR,
       OWNED_COST,
       MSRP,
       OWNED_RETAIL,
       DEMAND_SALES_UNIT,
       DEMAND_SALES_COST,
       DEMAND_SALES_RETAIL,
       RETURN_UNIT,
       RETURN_COST,
       RETURN_RETAIL,
       BACK_ORDER_UNIT,
       BACK_ORDER_COST,
       BACK_ORDER_RETAIL) ELSE INTO FACT_ERROR_LOG PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')
      (DATE_ID,
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
    VALUES
      (TO_NUMBER(TO_CHAR(LOG_DATE,''YYYYMMDD'')),
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
      SELECT /*+PARALLEL*/*
        FROM TABLE(POS_POPULATE_PACK.RESULTSET_POS_SALES(CURSOR
                                                         (SELECT *
                                                            FROM POS_SALES_RAW P
                                                           WHERE P.UPLOAD_ID='||TO_CHAR(P_UPLOAD_ID)||')))';
     L_ROWCOUNT:=SQL%ROWCOUNT;
     COMMIT;

     SELECT COUNT(*) INTO L_FAILURE_NUM
     FROM FACT_ERROR_LOG
     WHERE UPLOAD_ID=P_UPLOAD_ID;


     SELECT /*+PARALLEL(P)*/
            SET(CAST(COLLECT(D.DATE_ID) AS NNT_IDS)) INTO L_NNT_IDS
     FROM POS_SALES_RAW P
     INNER JOIN DIM_DATE_DAY D
     ON NVL(P.TRANSACTION_DATE,P.YEAR*10000+P.MONTH*100+P.DAY)=TO_CHAR(D.DATE_ID)
     WHERE UPLOAD_ID=P_UPLOAD_ID;


/*    INSERT INTO DIM_UPLOAD_TRACKING
      (UPLOAD_ID, UPLOAD_TYPE, AFFECTED_IDS, SUCCEED_NUM, FAILURE_NUM)
    VALUES
      (P_UPLOAD_ID,
       'POS_SALES',
       L_NNT_IDS,
       L_ROWCOUNT - L_FAILURE_NUM,
       L_FAILURE_NUM);*/

     UPDATE DIM_UPLOAD_TRACKING
     SET AFFECTED_IDS=L_NNT_IDS,
         SUCCEED_NUM=L_ROWCOUNT - L_FAILURE_NUM,
         FAILURE_NUM=L_FAILURE_NUM
     WHERE UPLOAD_ID=P_UPLOAD_ID;

    DELETE/*+PARALLEL(T)*/ FROM FACT_POS_SALES T
    WHERE EXISTS(
          SELECT 1
          FROM FACT_POS_SALES_TEMP S
          INNER JOIN DIM_STYLE_COLOR_SIZE DSCS
          ON S.STYLE_COLOR_SIZE_ID=DSCS.STYLE_COLOR_SIZE_ID
          INNER JOIN DIM_STYLE_COLOR DSC
          ON DSCS.STYLE_COLOR_ID=DSC.STYLE_COLOR_ID
          INNER JOIN DIM_STYLE DS
          ON DSC.STYLE_ID=DS.STYLE_ID
          INNER JOIN DIM_DEPT DD
          ON DD.DEPT_ID=DS.DEPT_ID
          INNER JOIN DIM_STYLE DS1
          ON DD.DEPT_ID=DS1.DEPT_ID
          INNER JOIN DIM_STYLE_COLOR DSC1
          ON DS1.STYLE_ID=DSC1.STYLE_ID
          INNER JOIN DIM_STYLE_COLOR_SIZE DSCS1
          ON DSC1.STYLE_COLOR_ID=DSCS1.STYLE_COLOR_ID
          WHERE T.DATE_ID=S.DATE_ID
          AND T.STYLE_COLOR_SIZE_ID=DSCS1.STYLE_COLOR_SIZE_ID
          AND T.STORE_ID=S.STORE_ID
    );

    COMMIT;

    INSERT/*+PARALLEL(T) */ INTO FACT_POS_SALES T
    (DATE_ID,
         STYLE_COLOR_SIZE_ID,
         STYLE_YEAR_SEASON_ID,
         STORE_ID,
         SALES_STYLE_ID,
         SALES_UNIT,
         SALES_RETAIL,
         SALES_COST,
         PROMO_RETAIL,
         PROMO_PERCENT,
         PROFIT_DOLLAR,
         OWNED_COST,
         MSRP,
         OWNED_RETAIL,
         DEMAND_SALES_UNIT,
         DEMAND_SALES_COST,
         DEMAND_SALES_RETAIL,
         RETURN_UNIT,
         RETURN_COST,
         RETURN_RETAIL,
         BACK_ORDER_UNIT,
         BACK_ORDER_COST,
         BACK_ORDER_RETAIL)
      SELECT /*+PARALLEL(S)*/
         DATE_ID,
         STYLE_COLOR_SIZE_ID,
         STYLE_YEAR_SEASON_ID,
         STORE_ID,
         SALES_STYLE_ID,
         SALES_UNIT,
         SALES_RETAIL,
         SALES_COST,
         PROMO_RETAIL,
         PROMO_PERCENT,
         PROFIT_DOLLAR,
         OWNED_COST,
         MSRP,
         OWNED_RETAIL,
         DEMAND_SALES_UNIT,
         DEMAND_SALES_COST,
         DEMAND_SALES_RETAIL,
         RETURN_UNIT,
         RETURN_COST,
         RETURN_RETAIL,
         BACK_ORDER_UNIT,
         BACK_ORDER_COST,
         BACK_ORDER_RETAIL
         FROM FACT_POS_SALES_TEMP S;

    COMMIT;
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    EXECUTE IMMEDIATE 'ALTER TABLE POS_SALES_RAW TRUNCATE PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')';
    EXECUTE IMMEDIATE 'ALTER TABLE POS_SALES_RAW DROP PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')';

    GATHER_TAB_PARTITIONS_STATS('FACT_POS_SALES',L_NNT_IDS);

  END CORRECT_POS_SALES;

  FUNCTION RESULTSET_POS_INVENTORY(P_POS_INVENTORY_RAW_CUR IN POS_VENTORY_RAW_CURSOR)
    RETURN NNT_POS_INVENTORY
    PIPELINED
    PARALLEL_ENABLE(PARTITION P_POS_INVENTORY_RAW_CUR BY ANY) IS

    TYPE NNT_POS_INVENTORY_RAW IS TABLE OF POS_INVENTORY_RAW%ROWTYPE;
    L_CACHE_POS_INVENTORY_RAW NNT_POS_INVENTORY_RAW;
    L_REC_POS_INVENTORY       REC_POS_INVENTORY;
    L_REC_STYLE_ATTRS         REC_STYLE_ATTRS;
    L_REC_DATE_ATTRS          REC_DATE_ATTRS;
    L_REC_YEARSEASON_ATTRS    REC_YEARSEASON_ATTRS;
    L_NNT_MEASURES            NNT_MEASURES;

  BEGIN
    LOOP
      FETCH P_POS_INVENTORY_RAW_CUR BULK COLLECT
            INTO L_CACHE_POS_INVENTORY_RAW LIMIT C_MAX_ROWS_PER_FETCH;
      EXIT WHEN L_CACHE_POS_INVENTORY_RAW.COUNT=0;

      FOR I IN L_CACHE_POS_INVENTORY_RAW.FIRST .. L_CACHE_POS_INVENTORY_RAW.LAST LOOP
      BEGIN

        L_REC_POS_INVENTORY.BEGIN_INVENTORY_UNIT       :=NVL(L_CACHE_POS_INVENTORY_RAW(I).BEGIN_INVENTORY_UNIT,0);
        L_REC_POS_INVENTORY.BEGIN_INVENTORY_RETAIL     :=NVL(L_CACHE_POS_INVENTORY_RAW(I).BEGIN_INVENTORY_RETAIL,0);
        L_REC_POS_INVENTORY.BEGIN_INVENTORY_COST       :=NVL(L_CACHE_POS_INVENTORY_RAW(I).BEGIN_INVENTORY_COST,0);
        L_REC_POS_INVENTORY.RECEIPT_UNIT               :=NVL(L_CACHE_POS_INVENTORY_RAW(I).RECEIPT_UNIT,0);
        L_REC_POS_INVENTORY.RECEIPT_RETAIL             :=NVL(L_CACHE_POS_INVENTORY_RAW(I).RECEIPT_RETAIL,0);
        L_REC_POS_INVENTORY.RECEIPT_COST               :=NVL(L_CACHE_POS_INVENTORY_RAW(I).RECEIPT_COST,0);
        L_REC_POS_INVENTORY.END_INVENTORY_UNIT         :=NVL(L_CACHE_POS_INVENTORY_RAW(I).END_INVENTORY_UNIT,0);
        L_REC_POS_INVENTORY.END_INVENTORY_RETAIL       :=NVL(L_CACHE_POS_INVENTORY_RAW(I).END_INVENTORY_RETAIL,0);
        L_REC_POS_INVENTORY.END_INVENTORY_COST         :=NVL(L_CACHE_POS_INVENTORY_RAW(I).END_INVENTORY_COST,0);
        L_REC_POS_INVENTORY.TRANSFER_IN_UNIT           :=NVL(L_CACHE_POS_INVENTORY_RAW(I).TRANSFER_IN_UNIT,0);
        L_REC_POS_INVENTORY.TRANSFER_IN_RETAIL         :=NVL(L_CACHE_POS_INVENTORY_RAW(I).TRANSFER_IN_RETAIL,0);
        L_REC_POS_INVENTORY.TRANSFER_IN_COST           :=NVL(L_CACHE_POS_INVENTORY_RAW(I).TRANSFER_IN_COST,0);
        L_REC_POS_INVENTORY.TRANSFER_OUT_UNIT          :=NVL(L_CACHE_POS_INVENTORY_RAW(I).TRANSFER_OUT_UNIT,0);
        L_REC_POS_INVENTORY.TRANSFER_OUT_RETAIL        :=NVL(L_CACHE_POS_INVENTORY_RAW(I).TRANSFER_OUT_RETAIL,0);
        L_REC_POS_INVENTORY.TRANSFER_OUT_COST          :=NVL(L_CACHE_POS_INVENTORY_RAW(I).TRANSFER_OUT_COST,0);
        L_REC_POS_INVENTORY.ADJUSTMENT_UNIT            :=NVL(L_CACHE_POS_INVENTORY_RAW(I).ADJUSTMENT_UNIT,0);
        L_REC_POS_INVENTORY.ADJUSTMENT_RETAIL          :=NVL(L_CACHE_POS_INVENTORY_RAW(I).ADJUSTMENT_RETAIL,0);
        L_REC_POS_INVENTORY.ADJUSTMENT_COST            :=NVL(L_CACHE_POS_INVENTORY_RAW(I).ADJUSTMENT_COST,0);

        L_REC_POS_INVENTORY.OWNED_COST                 :=NVL(L_CACHE_POS_INVENTORY_RAW(I).OWNED_COST,0);
        L_REC_POS_INVENTORY.MSRP                       :=NVL(L_CACHE_POS_INVENTORY_RAW(I).MSRP,0);
        L_REC_POS_INVENTORY.OWNED_RETAIL               :=NVL(L_CACHE_POS_INVENTORY_RAW(I).OWNED_RETAIL,0);
        L_REC_POS_INVENTORY.MKD_RETAIL                 :=NVL(L_CACHE_POS_INVENTORY_RAW(I).MKD_RETAIL,0);
        L_REC_POS_INVENTORY.MKD_PERCENT                :=NVL(L_CACHE_POS_INVENTORY_RAW(I).MKD_PERCENT,0);

        L_REC_POS_INVENTORY.CORPORATE_DIVISION         :=L_CACHE_POS_INVENTORY_RAW(I).CORPORATE_DIVISION         ;
        L_REC_POS_INVENTORY.BUYER_DEPT_NUM             :=L_CACHE_POS_INVENTORY_RAW(I).BUYER_DEPT_NUM             ;
        L_REC_POS_INVENTORY.BODY_CLASSIFICATION_CODE   :=L_CACHE_POS_INVENTORY_RAW(I).BODY_CLASSIFICATION_CODE   ;
        L_REC_POS_INVENTORY.DOOR_NUM                   :=L_CACHE_POS_INVENTORY_RAW(I).DOOR_NUM                   ;
        L_REC_POS_INVENTORY.SIZE_CODE                  :=L_CACHE_POS_INVENTORY_RAW(I).SIZE_CODE                  ;
        L_REC_POS_INVENTORY.SIZE_DESC1                 :=L_CACHE_POS_INVENTORY_RAW(I).SIZE_DESC1                 ;
        L_REC_POS_INVENTORY.SIZE_DESC2                 :=L_CACHE_POS_INVENTORY_RAW(I).SIZE_DESC2                 ;
        L_REC_POS_INVENTORY.STYLE_NUMBER               :=L_CACHE_POS_INVENTORY_RAW(I).STYLE_NUMBER               ;
        L_REC_POS_INVENTORY.COLOR_CODE                 :=L_CACHE_POS_INVENTORY_RAW(I).COLOR_CODE                 ;
        L_REC_POS_INVENTORY.UPC                        :=L_CACHE_POS_INVENTORY_RAW(I).UPC                        ;
        L_REC_POS_INVENTORY.ARTICLE_NUMBER             :=L_CACHE_POS_INVENTORY_RAW(I).ARTICLE_NUMBER             ;
        L_REC_POS_INVENTORY.VENDOR_REF_NUMBER          :=L_CACHE_POS_INVENTORY_RAW(I).VENDOR_REF_NUMBER          ;
        L_REC_POS_INVENTORY.TRANSACTION_DATE           :=L_CACHE_POS_INVENTORY_RAW(I).TRANSACTION_DATE           ;
        L_REC_POS_INVENTORY.DAY                        :=L_CACHE_POS_INVENTORY_RAW(I).DAY                        ;
        L_REC_POS_INVENTORY.WEEK                       :=L_CACHE_POS_INVENTORY_RAW(I).WEEK                       ;
        L_REC_POS_INVENTORY.MONTH                      :=L_CACHE_POS_INVENTORY_RAW(I).MONTH                      ;
        L_REC_POS_INVENTORY.YEAR                       :=L_CACHE_POS_INVENTORY_RAW(I).YEAR                       ;

        L_REC_POS_INVENTORY.FILE_ROW_NUM             := L_CACHE_POS_INVENTORY_RAW(I).FILE_ROW_NUM;
        L_REC_POS_INVENTORY.UPLOAD_ID                := L_CACHE_POS_INVENTORY_RAW(I).UPLOAD_ID;
        L_REC_POS_INVENTORY.LOG_DATE                 := SYSDATE;
        L_REC_POS_INVENTORY.ERROR_ID                 := 0;
        L_REC_POS_INVENTORY.FIELD_VALUE              := '0';

          --0,Validate all measures
          L_NNT_MEASURES := NNT_MEASURES(L_REC_POS_INVENTORY.BEGIN_INVENTORY_UNIT,
                        L_REC_POS_INVENTORY.BEGIN_INVENTORY_RETAIL,
                        L_REC_POS_INVENTORY.BEGIN_INVENTORY_COST,
                        L_REC_POS_INVENTORY.RECEIPT_UNIT,
                        L_REC_POS_INVENTORY.RECEIPT_RETAIL,
                        L_REC_POS_INVENTORY.RECEIPT_COST,
                        L_REC_POS_INVENTORY.END_INVENTORY_UNIT,
                        L_REC_POS_INVENTORY.END_INVENTORY_RETAIL,
                        L_REC_POS_INVENTORY.END_INVENTORY_COST,
                        L_REC_POS_INVENTORY.TRANSFER_IN_UNIT,
                        L_REC_POS_INVENTORY.TRANSFER_IN_RETAIL,
                        L_REC_POS_INVENTORY.TRANSFER_IN_COST,
                        L_REC_POS_INVENTORY.TRANSFER_OUT_UNIT,
                        L_REC_POS_INVENTORY.TRANSFER_OUT_RETAIL,
                        L_REC_POS_INVENTORY.TRANSFER_OUT_COST,
                        L_REC_POS_INVENTORY.ADJUSTMENT_UNIT,
                        L_REC_POS_INVENTORY.ADJUSTMENT_RETAIL,
                        L_REC_POS_INVENTORY.ADJUSTMENT_COST,
                        L_REC_POS_INVENTORY.OWNED_COST,
                        L_REC_POS_INVENTORY.MSRP,
                        L_REC_POS_INVENTORY.OWNED_RETAIL,
                        L_REC_POS_INVENTORY.MKD_RETAIL,
                        L_REC_POS_INVENTORY.MKD_PERCENT);
          VALIDATE_MEASURES(L_NNT_MEASURES);

          --1,Validate time dimension
          L_REC_DATE_ATTRS.YEAR             := L_REC_POS_INVENTORY.YEAR;
          L_REC_DATE_ATTRS.MONTH            := L_REC_POS_INVENTORY.MONTH;
          L_REC_DATE_ATTRS.WEEK             := L_REC_POS_INVENTORY.WEEK;
          L_REC_DATE_ATTRS.DAY              := L_REC_POS_INVENTORY.DAY;
          L_REC_DATE_ATTRS.TRANSACTION_DATE := L_REC_POS_INVENTORY.TRANSACTION_DATE;
          VALIDATE_TIME(L_REC_DATE_ATTRS, L_REC_POS_INVENTORY.DATE_ID, L_REC_YEARSEASON_ATTRS.SMONTH_ID);

          --2,Validate style dimension
          L_REC_STYLE_ATTRS.CORPORATE_DIVISION       := L_REC_POS_INVENTORY.CORPORATE_DIVISION;
          L_REC_STYLE_ATTRS.UPC                      := L_REC_POS_INVENTORY.UPC;
          L_REC_STYLE_ATTRS.BUYER_DEPT_NUM           := L_REC_POS_INVENTORY.BUYER_DEPT_NUM;
          L_REC_STYLE_ATTRS.BODY_CLASSIFICATION_CODE := L_REC_POS_INVENTORY.BODY_CLASSIFICATION_CODE;
          L_REC_STYLE_ATTRS.VENDOR_REF_NUMBER        := L_REC_POS_INVENTORY.VENDOR_REF_NUMBER;
          L_REC_STYLE_ATTRS.STYLE_NUMBER             := L_REC_POS_INVENTORY.STYLE_NUMBER;
          L_REC_STYLE_ATTRS.COLOR_CODE               := L_REC_POS_INVENTORY.COLOR_CODE;
          L_REC_STYLE_ATTRS.SIZE_CODE                := L_REC_POS_INVENTORY.SIZE_CODE;
          L_REC_STYLE_ATTRS.SIZE_DESC1               := L_REC_POS_INVENTORY.SIZE_DESC1;
          L_REC_STYLE_ATTRS.SIZE_DESC2               := L_REC_POS_INVENTORY.SIZE_DESC2;
          VALIDATE_STYLE(L_REC_STYLE_ATTRS,
                         L_REC_POS_INVENTORY.STYLE_COLOR_SIZE_ID);

          --3,Validate store dimension
          VALIDATE_STORE(L_REC_POS_INVENTORY.DOOR_NUM,
                         L_REC_POS_INVENTORY.STORE_ID);
          L_REC_YEARSEASON_ATTRS.VENDOR_REF_NUMBER   :=L_REC_POS_INVENTORY.VENDOR_REF_NUMBER;
          L_REC_YEARSEASON_ATTRS.STYLE_NUMBER        :=L_REC_POS_INVENTORY.STYLE_NUMBER;
          L_REC_YEARSEASON_ATTRS.COLOR_CODE          :=L_REC_POS_INVENTORY.COLOR_CODE;

          VALIDATE_YEAR_SEASON(L_REC_YEARSEASON_ATTRS,L_REC_POS_INVENTORY.STYLE_YEAR_SEASON_ID);

          PIPE ROW(L_REC_POS_INVENTORY);

        EXCEPTION
          WHEN OTHERS THEN
            BEGIN
              L_REC_POS_INVENTORY.FIELD_VALUE := REGEXP_REPLACE(SQLERRM,'ORA-[[:digit:]]{5}: ','');
              L_REC_POS_INVENTORY.ERROR_ID    := L_CACHE_ERROR(SQLCODE);
              PIPE ROW(L_REC_POS_INVENTORY);
            END;
        END;

      END LOOP;


    END LOOP;

  END RESULTSET_POS_INVENTORY;

  PROCEDURE POPULATE_POS_INVENTORY(P_UPLOAD_ID POS_INVENTORY_RAW.UPLOAD_ID%TYPE) IS
    L_ROWCOUNT PLS_INTEGER;
    L_FAILURE_NUM PLS_INTEGER;
    L_NNT_IDS NNT_IDS:=NNT_IDS();
  BEGIN

    EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';

    INSERT INTO DIM_UPLOAD_TRACKING
    (UPLOAD_ID, UPLOAD_TYPE, AFFECTED_IDS, SUCCEED_NUM, FAILURE_NUM)
    VALUES
      (P_UPLOAD_ID, 'POS_INVENTORY', NULL, 0, 0);


    EXECUTE IMMEDIATE
    'INSERT /*+PARALLEL(FACT_POS_INVENTORY) PARALLEL(FACT_ERROR_LOG) */
    ALL WHEN ERROR_ID = 0 THEN INTO FACT_POS_INVENTORY
      (DATE_ID,
       STYLE_COLOR_SIZE_ID,
       STYLE_YEAR_SEASON_ID,
       STORE_ID,
       BEGIN_INVENTORY_UNIT,
       BEGIN_INVENTORY_RETAIL,
       BEGIN_INVENTORY_COST,
       RECEIPT_UNIT,
       RECEIPT_RETAIL,
       RECEIPT_COST,
       END_INVENTORY_UNIT,
       END_INVENTORY_RETAIL,
       END_INVENTORY_COST,
       TRANSFER_IN_UNIT,
       TRANSFER_IN_RETAIL,
       TRANSFER_IN_COST,
       TRANSFER_OUT_UNIT,
       TRANSFER_OUT_RETAIL,
       TRANSFER_OUT_COST,
       ADJUSTMENT_UNIT,
       ADJUSTMENT_RETAIL,
       ADJUSTMENT_COST,
       OWNED_COST,
       MSRP,
       OWNED_RETAIL,
       MKD_RETAIL,
       MKD_PERCENT)
    VALUES
      (DATE_ID,
       STYLE_COLOR_SIZE_ID,
       STYLE_YEAR_SEASON_ID,
       STORE_ID,
       BEGIN_INVENTORY_UNIT,
       BEGIN_INVENTORY_RETAIL,
       BEGIN_INVENTORY_COST,
       RECEIPT_UNIT,
       RECEIPT_RETAIL,
       RECEIPT_COST,
       END_INVENTORY_UNIT,
       END_INVENTORY_RETAIL,
       END_INVENTORY_COST,
       TRANSFER_IN_UNIT,
       TRANSFER_IN_RETAIL,
       TRANSFER_IN_COST,
       TRANSFER_OUT_UNIT,
       TRANSFER_OUT_RETAIL,
       TRANSFER_OUT_COST,
       ADJUSTMENT_UNIT,
       ADJUSTMENT_RETAIL,
       ADJUSTMENT_COST,
       OWNED_COST,
       MSRP,
       OWNED_RETAIL,
       MKD_RETAIL,
       MKD_PERCENT) ELSE INTO FACT_ERROR_LOG PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')
      (DATE_ID,
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
    VALUES
      (TO_NUMBER(TO_CHAR(LOG_DATE,''YYYYMMDD'')),
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
      SELECT /*+PARALLEL*/*
        FROM TABLE(POS_POPULATE_PACK.RESULTSET_POS_INVENTORY(CURSOR
                                                             (SELECT *
                                                                FROM POS_INVENTORY_RAW P
                                                               WHERE P.UPLOAD_ID='||TO_CHAR(P_UPLOAD_ID)||')))';
       L_ROWCOUNT:=SQL%ROWCOUNT;
       COMMIT;

       SELECT COUNT(*) INTO L_FAILURE_NUM
       FROM FACT_ERROR_LOG
       WHERE UPLOAD_ID=P_UPLOAD_ID;


       SELECT /*+PARALLEL(P)*/
         SET(CAST(COLLECT(D.DATE_ID) AS NNT_IDS)) INTO L_NNT_IDS
       FROM POS_INVENTORY_RAW P
       INNER JOIN DIM_DATE_DAY D
       ON NVL(P.TRANSACTION_DATE,P.YEAR*10000+P.MONTH*100+P.DAY)=TO_CHAR(D.DATE_ID)
       WHERE UPLOAD_ID=P_UPLOAD_ID;

       UPDATE DIM_UPLOAD_TRACKING
       SET AFFECTED_IDS=L_NNT_IDS,
           SUCCEED_NUM=L_ROWCOUNT - L_FAILURE_NUM,
           FAILURE_NUM=L_FAILURE_NUM
       WHERE UPLOAD_ID=P_UPLOAD_ID;

    COMMIT;
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    EXECUTE IMMEDIATE 'ALTER TABLE POS_INVENTORY_RAW TRUNCATE PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')';
    EXECUTE IMMEDIATE 'ALTER TABLE POS_INVENTORY_RAW DROP PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')';

    GATHER_TAB_PARTITIONS_STATS('FACT_POS_INVENTORY',L_NNT_IDS);

  END POPULATE_POS_INVENTORY;

  PROCEDURE CORRECT_POS_INVENTORY(P_UPLOAD_ID POS_INVENTORY_RAW.UPLOAD_ID%TYPE) IS
    L_ROWCOUNT PLS_INTEGER;
    L_FAILURE_NUM PLS_INTEGER;
    L_NNT_IDS NNT_IDS:=NNT_IDS();
    BEGIN
      EXECUTE IMMEDIATE 'TRUNCATE TABLE FACT_POS_INVENTORY_TEMP';
      EXECUTE IMMEDIATE 'ALTER SESSION ENABLE PARALLEL DML';


      INSERT INTO DIM_UPLOAD_TRACKING
      (UPLOAD_ID, UPLOAD_TYPE, AFFECTED_IDS, SUCCEED_NUM, FAILURE_NUM)
      VALUES
        (P_UPLOAD_ID, 'POS_INVENTORY', NULL, 0, 0);

      EXECUTE IMMEDIATE
      'INSERT /*+PARALLEL(FACT_POS_INVENTORY_TEMP) PARALLEL(POS_INVENTORY_ERRLOG) */
    ALL WHEN ERROR_ID = 0 THEN INTO FACT_POS_INVENTORY_TEMP
      (DATE_ID,
       STYLE_COLOR_SIZE_ID,
       STYLE_YEAR_SEASON_ID,
       STORE_ID,
       BEGIN_INVENTORY_UNIT,
       BEGIN_INVENTORY_RETAIL,
       BEGIN_INVENTORY_COST,
       RECEIPT_UNIT,
       RECEIPT_RETAIL,
       RECEIPT_COST,
       END_INVENTORY_UNIT,
       END_INVENTORY_RETAIL,
       END_INVENTORY_COST,
       TRANSFER_IN_UNIT,
       TRANSFER_IN_RETAIL,
       TRANSFER_IN_COST,
       TRANSFER_OUT_UNIT,
       TRANSFER_OUT_RETAIL,
       TRANSFER_OUT_COST,
       ADJUSTMENT_UNIT,
       ADJUSTMENT_RETAIL,
       ADJUSTMENT_COST,
       OWNED_COST,
       MSRP,
       OWNED_RETAIL,
       MKD_RETAIL,
       MKD_PERCENT)
    VALUES
      (DATE_ID,
       STYLE_COLOR_SIZE_ID,
       STYLE_YEAR_SEASON_ID,
       STORE_ID,
       BEGIN_INVENTORY_UNIT,
       BEGIN_INVENTORY_RETAIL,
       BEGIN_INVENTORY_COST,
       RECEIPT_UNIT,
       RECEIPT_RETAIL,
       RECEIPT_COST,
       END_INVENTORY_UNIT,
       END_INVENTORY_RETAIL,
       END_INVENTORY_COST,
       TRANSFER_IN_UNIT,
       TRANSFER_IN_RETAIL,
       TRANSFER_IN_COST,
       TRANSFER_OUT_UNIT,
       TRANSFER_OUT_RETAIL,
       TRANSFER_OUT_COST,
       ADJUSTMENT_UNIT,
       ADJUSTMENT_RETAIL,
       ADJUSTMENT_COST,
       OWNED_COST,
       MSRP,
       OWNED_RETAIL,
       MKD_RETAIL,
       MKD_PERCENT) ELSE INTO FACT_ERROR_LOG PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')
      (DATE_ID,
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
    VALUES
      (TO_NUMBER(TO_CHAR(LOG_DATE,''YYYYMMDD'')),
      UPLOAD_ID,
      ERROR_ID,
      FIELD_VALUE,
      LOG_DATE,
      FILE_ROW_NUM)
      SELECT /*+PARALLEL*/*
        FROM TABLE(POS_POPULATE_PACK.RESULTSET_POS_INVENTORY(CURSOR
                                                             (SELECT *
                                                                FROM POS_INVENTORY_RAW P
                                                               WHERE P.UPLOAD_ID='||TO_CHAR(P_UPLOAD_ID)||')))';
       L_ROWCOUNT:=SQL%ROWCOUNT;
       COMMIT;

       SELECT COUNT(*) INTO L_FAILURE_NUM
       FROM FACT_ERROR_LOG
       WHERE UPLOAD_ID=P_UPLOAD_ID;

       SELECT /*+PARALLEL(P)*/
         SET(CAST(COLLECT(D.DATE_ID) AS NNT_IDS)) INTO L_NNT_IDS
       FROM POS_INVENTORY_RAW P
       INNER JOIN DIM_DATE_DAY D
       ON NVL(P.TRANSACTION_DATE,P.YEAR*10000+P.MONTH*100+P.DAY)=TO_CHAR(D.DATE_ID)
       WHERE UPLOAD_ID=P_UPLOAD_ID;

       UPDATE DIM_UPLOAD_TRACKING
       SET AFFECTED_IDS=L_NNT_IDS,
           SUCCEED_NUM=L_ROWCOUNT - L_FAILURE_NUM,
           FAILURE_NUM=L_FAILURE_NUM
       WHERE UPLOAD_ID=P_UPLOAD_ID;

      DELETE/*+PARALLEL(T)*/ FROM FACT_POS_INVENTORY T
      WHERE EXISTS(
            SELECT 1
            FROM FACT_POS_INVENTORY_TEMP S
            INNER JOIN DIM_STYLE_COLOR_SIZE DSCS
            ON S.STYLE_COLOR_SIZE_ID=DSCS.STYLE_COLOR_SIZE_ID
            INNER JOIN DIM_STYLE_COLOR DSC
            ON DSCS.STYLE_COLOR_ID=DSC.STYLE_COLOR_ID
            INNER JOIN DIM_STYLE DS
            ON DSC.STYLE_ID=DS.STYLE_ID
            INNER JOIN DIM_DEPT DD
            ON DS.DEPT_ID=DD.DEPT_ID
            INNER JOIN DIM_STYLE DS1
            ON DD.DEPT_ID=DS1.DEPT_ID
            INNER JOIN DIM_STYLE_COLOR DSC1
            ON DS1.STYLE_ID=DSC1.STYLE_ID
            INNER JOIN DIM_STYLE_COLOR_SIZE DSCS1
            ON DSC1.STYLE_COLOR_ID=DSCS1.STYLE_COLOR_ID
            WHERE T.DATE_ID=S.DATE_ID
            AND T.STYLE_COLOR_SIZE_ID=DSCS1.STYLE_COLOR_SIZE_ID
            AND T.STORE_ID=S.STORE_ID
      );

      COMMIT;

      INSERT/*+PARALLEL(T)*/ INTO FACT_POS_INVENTORY T
      (DATE_ID,
       STYLE_COLOR_SIZE_ID,
       STYLE_YEAR_SEASON_ID,
       STORE_ID,
       BEGIN_INVENTORY_UNIT,
       BEGIN_INVENTORY_RETAIL,
       BEGIN_INVENTORY_COST,
       RECEIPT_UNIT,
       RECEIPT_RETAIL,
       RECEIPT_COST,
       END_INVENTORY_UNIT,
       END_INVENTORY_RETAIL,
       END_INVENTORY_COST,
       TRANSFER_IN_UNIT,
       TRANSFER_IN_RETAIL,
       TRANSFER_IN_COST,
       TRANSFER_OUT_UNIT,
       TRANSFER_OUT_RETAIL,
       TRANSFER_OUT_COST,
       ADJUSTMENT_UNIT,
       ADJUSTMENT_RETAIL,
       ADJUSTMENT_COST,
       OWNED_COST,
       MSRP,
       OWNED_RETAIL,
       MKD_RETAIL,
       MKD_PERCENT)
       SELECT /*+PARALLEL(S)*/
       DATE_ID,
       STYLE_COLOR_SIZE_ID,
       STYLE_YEAR_SEASON_ID,
       STORE_ID,
       BEGIN_INVENTORY_UNIT,
       BEGIN_INVENTORY_RETAIL,
       BEGIN_INVENTORY_COST,
       RECEIPT_UNIT,
       RECEIPT_RETAIL,
       RECEIPT_COST,
       END_INVENTORY_UNIT,
       END_INVENTORY_RETAIL,
       END_INVENTORY_COST,
       TRANSFER_IN_UNIT,
       TRANSFER_IN_RETAIL,
       TRANSFER_IN_COST,
       TRANSFER_OUT_UNIT,
       TRANSFER_OUT_RETAIL,
       TRANSFER_OUT_COST,
       ADJUSTMENT_UNIT,
       ADJUSTMENT_RETAIL,
       ADJUSTMENT_COST,
       OWNED_COST,
       MSRP,
       OWNED_RETAIL,
       MKD_RETAIL,
       MKD_PERCENT
       FROM FACT_POS_INVENTORY_TEMP S;

    COMMIT;
    EXECUTE IMMEDIATE 'ALTER SESSION DISABLE PARALLEL DML';
    EXECUTE IMMEDIATE 'ALTER TABLE POS_INVENTORY_RAW TRUNCATE PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')';
    EXECUTE IMMEDIATE 'ALTER TABLE POS_INVENTORY_RAW DROP PARTITION FOR('||TO_CHAR(P_UPLOAD_ID)||')';

    GATHER_TAB_PARTITIONS_STATS('FACT_POS_INVENTORY',L_NNT_IDS);
  END CORRECT_POS_INVENTORY;

--Package initialization
BEGIN

  SELECT SS.SALES_STYLE_ID ID, SS.SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_SALES_STYLE SS;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_SALES_STYLE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT V.VENDOR_ID ID, V.SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_VENDOR V;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_VENDOR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.STORE_ID ID, S.SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_STORE_STORE S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STORE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.DATE_ID ID, TO_CHAR(S.DATE_ID) SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_DATE_DAY S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_DATE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;


  SELECT B.SMONTH_ID ID, TO_CHAR(A.DATE_ID) SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_DATE_DAY A
    INNER JOIN DIM_DATE_SWEEK_PART B
    ON A.SWEEK_PART_ID=B.SWEEK_PART_ID;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_SMONTH_BY_DAY(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.SMONTH_ID ID, TO_CHAR(S.SMONTH_ID) SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_DATE_SMONTH S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_MONTH(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.CYEAR_ID ID, TO_CHAR(S.CYEAR_ID) SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_DATE_CYEAR S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_YEAR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.STYLE_ID ID, S.SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_STYLE S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STYLE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.STYLE_COLOR_ID ID, S.SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_STYLE_COLOR S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STYLE_COLOR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.STYLE_COLOR_SIZE_ID ID, S.SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_STYLE_COLOR_SIZE S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_STYLE_COLOR_SIZE(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.ERROR_ID ID, TO_CHAR(S.ERROR_CODE) SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_ERROR S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_ERROR(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

  SELECT S.STYLE_YEAR_SEASON_ID ID, S.SOURCE_BUSKEY
    BULK COLLECT
    INTO L_TEMP_CACHE
    FROM DIM_STYLE_YEAR_SEASON S;

  FOR J IN L_TEMP_CACHE.FIRST .. L_TEMP_CACHE.LAST LOOP
    L_CACHE_YEARSEASON(L_TEMP_CACHE(J).SOURCE_BUSKEY) := L_TEMP_CACHE(J).ID;
  END LOOP;

END POS_POPULATE_PACK;
/
